Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (风二西rsa)" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/exp.py b/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/exp.py	
+++ /dev/null	
@@ -1,13 +0,0 @@
-import libnum
-import gmpy2
-
-n = 27020725261160598541077357737650775795182555998856810737571508044949928734067444441660366270392732456051807439301564552672200975582350577967001486740668193835704559129378410828266554536148151615878808327988333060924165410762016082268322936465413880236634083213834739549234631742766416876749808978934944262651307600621868854944164060642189749365967978497831698002669974744487926082412272998646851047638183126945784060957075393737537570645086672473571281053798891685646561828588448040073373363454584468753860529849749093081434144360661566815886630699933232263079413562069476421802192735693386029862725050469209845710383
-c = 10188807385387617708190575473905502994151677148079820873886980571555051900701810208218351138721306416600688313703084580808183634201231599134123549448962443376514560489130860694363901933597676373555599555647232128717993571185822894818704143675318690577221330618533739592165564396729937983659337232822442555504262694675199751730664450120569727835850996566436129543730932040989365233424791093843941154003052950306359994891955336607690065213304872738280674213630736611351982705373394299097653653497017756036211550125607093109216729483090391729134062236908282557149575812220142872855836932590459512028618076264332235518829
-hint = 15179972145975733285419381814235528011288991423484121653543845156913121513320504879647666067298415751234264897435338898933073713420024176276221164394369781676781604128149168834126855517212300158864797800121336042194751965268493010327202598446572764475343894613152062609436699715193914479572113800212525965140106015838636914979735618606768207651697548364440806425770871133439416876157686985836939255598747973339866125864303982956813846287509191028829738926404992619459242904729015823730553526572575372668559669124599614613391797015393641171177282129497503752370800088634017972208535899870704612274473042064675033593148
-e = 65537
-p = gmpy2.gcd(pow(2021, n, n) - hint, n)
-q = n // p
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/A01 基础_已知e,d,n,c/题目.py
===================================================================
diff --git a/RSA_整理/整理中/A01 基础_已知e,d,n,c/题目.py b/RSA_整理/整理中/A01 基础_已知e,d,n,c/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/A01 基础_已知e,d,n,c/题目.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-#生成随机素数
-p=libnum.generate_prime(1024)
-q=libnum.generate_prime(1024)
-e=65537
-n=p*q
-phi_n=(p-1)*(q-1)
-#求逆元
-d=libnum.invmod(e,phi_n)
-c=pow(m,e,n)
-
-
-print ("n=",n)
-print("d=",d)
-print ("e=",e)
-print ("c=",c)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P11 n分解3个素数/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P11 n分解3个素数/exp.py b/RSA_基础篇/P01-P20/P11 n分解3个素数/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P11 n分解3个素数/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-
-# n=p*q*r
-r = 12328943069972158868300333965019293732240349172933398867374450193780676916633106046545397891902123683693837126404908611670219604587587151306224914062663729
-n = 928445951911850156618541782850215900925329423880533465612155142015978599609287623859912813317551629221695490535012732781489396534420011145723987610606038091488823086647363964394753700158320900867101659445170118179077194271099520502633316318889163873291574934282498061117736456183503867870294570083013883365868242889035609602940685335912371326827533418614992221705810476710807373254363162373986374486325350746366851935451369892949745302442034805629514003196071631
-e = 65537
-c = 327716655224470059950709685055600963837116578216483343492948888372401723689223347212508532985781828794786448842515029515358422017875793926582832247025212149474404973170422295165602666360784347416812528617973764432916955654602356835327769633635513894485943553309743509322858937973710628023758816806471875016815994664897320150855163109437521642800230902661034555151514311149333258071668655344069451897282357234220538922127548822361859943829665459953651351620958628
-pq = n // r
-print(pq)
-p = 8677914960051571881163393151217840674884144886709470084966197470333385987477662098134846485042365070664261589879739214029342465837414534639688284776885749
-q = 8677914960051571881163393151217840674884144886709470084966197470333385987477662098134846485042365070664261589879739214029342465837414534639688284776885411
-phi = (p - 1) * (q - 1) * (r - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/P54 p+q与p-q/rsa40.py
===================================================================
diff --git a/RSA_整理/整理中/P54 p+q与p-q/rsa40.py b/RSA_整理/整理中/P54 p+q与p-q/rsa40.py
deleted file mode 100644
--- a/RSA_整理/整理中/P54 p+q与p-q/rsa40.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-while 1:
-    if p > q:
-        a = p + q
-        b = p - q
-        break
-n=p*q
-c=pow(m,e,n)
-print("a=",a)
-print("b=",b)
-print("c=",c)
-a= 287545392132610911896032301251492356608434869325178383079452776672304825621024356929204908229777063772812677052770521870142986331205612566509656360799795299160512935307982752776256741158204379729521311070578351291236115651942393357036037779538454749993862014627012421787422257644519119355494004580692964370616
-b= 9800757947868665387927705308310135911210323857869445860428869945362460155083166164016916655867108626617763579665005881815004597815234238370308616712812035919814088879935564327814824084885577417245295642656610293081865206195247187247343566255846165207319739422930196791107362128531965375617861513278641827442
-c= 15839173264849808198739152568223724742273019986823742354823095371882306430323084067153292787790089295341617296970607091953451733721012305407762682470727208666727864664720743712412760845080324417410047852951324609092375710400535672002097799988493248356090335327600622180221525559366045379438966174713173925329443702721341478918976401800574930032980037034935480395666859952625575408326830502879455697099798385060536431378515908973467201078984785919883717575355829153460516665818805117275521445062292119110114251112960077421417851281194366453517173539331287730012775440117855282547884453581641781483672203505172252674082
Index: RSA_整理/整理中/N分解_N是p的r次方/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N是p的r次方/exp2.py b/RSA_整理/整理中/N分解_N是p的r次方/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N是p的r次方/exp2.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p ** 3 * q
-e = 65537
-q = 13345672330679418443866848695749753384841350112452462690350565885192764753702964893062035116023096943358384379827500462723016224486435032522188166109529147
-n = 4663711063632671446966617442890809468548735750386480905820144168615122369358088158709822723959108989276525102755551604204514586528122441075489492157644479194671784485228731421500391142158401889177506319977349707503678947872777602384171260874359045585814189677748712566088220734735479518470883541166059233676170283938881683675790979128058243582825012415020019043126740915522571217495119060031729061070896580899732991209113679151755713858497630999746612658308778711613697038750661479517187094033129979714688161348844542070263109259258937863241431480105798790363889436471998002323269704182369356300287043940743500087239
-e = 65537
-c = 4050303218893912343776312253598257474375000778822229482734626960955864773175090306426885201033332266573903303684635688485414725284644108123459136702775991157244389086147955395682206311752151842740679445903864544823592773331496589661187968392779340028173948172003460012051289357755574536619241969492822938688821287700132262703677149526846356206143053559703859606442209340834979412336031660590507709503830013770022485005101363701272279629510056964018618212014677531338026866748075406283893942248599825641124694672878533987994699411744521757385858889763503705242690212615083634186373933214686193717950163215308138805348
-print(n // q)
-p = 7043638514877708625347510509234285437455073680720519890604877400872929338715742690986696345788770257715966066407870250705514125001666470405076090436993533
-
-phi = (p - 1) * p ** 2 * (q - 1)
-d = gmpy2.invert(e, phi)
-print(d)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/0.sage/P54.sage_euler_phi/题目.py
===================================================================
diff --git a/RSA_整理/0.sage/P54.sage_euler_phi/题目.py b/RSA_整理/0.sage/P54.sage_euler_phi/题目.py
deleted file mode 100644
--- a/RSA_整理/0.sage/P54.sage_euler_phi/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-from Crypto.Util.number import getPrime, bytes_to_long
-import uuid
-import libnum
-flag="flag{"+str(uuid.uuid4())+"}"
-def prod(lst):
-	ret = 1
-	for num in lst:
-		ret *= num
-	return ret
-m = libnum.s2n(flag)
-primes = [getPrime(32) for _ in range(128)]
-n = prod(primes)
-e = 65537
-print(n)
-print(pow(m, e, n))
Index: RSA_基础篇/P01-P20/P19 Boneh Durfee 攻击/题目.txt
===================================================================
diff --git a/RSA_基础篇/P01-P20/P19 Boneh Durfee 攻击/题目.txt b/RSA_基础篇/P01-P20/P19 Boneh Durfee 攻击/题目.txt
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P19 Boneh Durfee 攻击/题目.txt	
+++ /dev/null	
@@ -1,8 +0,0 @@
-[+]n=0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L
-[+]d=random.getrandbits(1024*0.270)
-[+]e=invmod(d,phin)
-[+]hex(e)=0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL
-[+]m=random.getrandbits(512)
-[+]c=pow(m,e,n)=0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL
-[-]long_to_bytes(m).encode('hex')=
-知道e,d<=n^0.27 ，另外 . 查阅资料知使用 Boneh and Durfee attack. 现成脚本：
\ No newline at end of file
Index: RSA_整理/整理中/威尔逊定理_中国剩余定理/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_中国剩余定理/解析.txt b/RSA_整理/整理中/威尔逊定理_中国剩余定理/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_中国剩余定理/解析.txt	
+++ /dev/null	
@@ -1,26 +0,0 @@
-
-1.pq接近，直接分解N
-求出m
-2.阶乘，用到威尔逊定理
-(p-1)!%p=-1
-
-m = N * flag % a
-m=flag*(p-1)!%a
-m=flag*(p-1)!+ka
-#两边同时模p
-m%p=flag*(p-1)!%p
-m%p=flag*(-1)!%p
-m*(-1^-1)%p=flag%p
-flag%p=m1=m*(-1^-1)%p
-
-接着构造一个m2%q,因为p<q,需要继续阶乘上去
-for i in rang(p,q):
-    m=m*i%a
-形成一个 m=flag*(q-1)!%a
-同理 构成
-flag%q=m2=m*(-1^-1)%q
-
-然后使用中国剩余定理
-crt（[m1,m2],[p,q]）
-计算flag
-
Index: RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/出题.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/出题.py b/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/出题.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-p1 = gmpy2.invert(p, q)-q
-q1 = gmpy2.invert(q, p)-p
-c = pow(m, e, n)
-
-print("e=", e)
-print("phi=", phi)
-print("c=", c)
-print("p1=", p1)
-print("q1=", q1)
Index: RSA_整理/整理中/dp泄露_未知N/exp.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_未知N/exp.py b/RSA_整理/整理中/dp泄露_未知N/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_未知N/exp.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-
-e= 65537
-c= 698357636567367558759711776580320719340933493084285009370699059680075963885649900991785743925476703612566177770615688140828294009342321248532528135717020321638633194236304071227376280469583784324554702187585633554583585613919643029910676079881346779693579198709927276845742333575135345002140882285105432861360786403309179432637837990636999378777874170745714808407518959616602571033295952904233401306613241319072606171376709797219789705532196258388768707986490052624356816398378517468828951464911099476954775258801172030116252779985789332801046195134582313214031366595004401717278610760829369314324849813940651309932
-dp= 39896852438403708406984708916869979312352695661766157959550782921308613421683803903733849015989522374917508903612147241162520188920032456104881051889798874994032331870256031918606780154667124231064537682553043210245224684753512501513527050047942923719661361311254494006713834823643497048108777333495847434963
-#106138421686854631129229018400036851398159472928157852413033475149738282842171360115242754737605249761922824478020267657563145346915046359884131905731753556747874850163627747669970876841746268347119001668418055322502183485475581441513782109965172940605457545616224305813598725099944139072129285167660537988439
-
-import gmpy2
-
-for k in range(65537,1,-1):
-    tmp=dp*e-1
-    if tmp%k==0:
-        p = (dp*e-1)//k + 1
-        if gmpy2.is_prime(p) and gmpy2.bit_length(p)==1024:
-            print(p)
-            break
-import libnum
-
-m=pow(c,dp,p)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/求公约数_h=pow(d,e,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/求公约数_h=pow(d,e,n)/exp.py b/RSA_整理/整理中/求公约数_h=pow(d,e,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/求公约数_h=pow(d,e,n)/exp.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-
-n= 803784422494351370167592813131170042963345555482165647967956492620962013217420982867541509298616048143427109418694118101975886429334668184599704528208350169952501368083389428121409963959588217864342810533458439012893022079292471592661309119780597567697815158389955245109531282084813514028430538452099738972947224500649814505038473612255356532480657940241873476885787144581357503919901873583698351869250700204237754589245567780940856354940496837340040687563379829
-e= 65537
-c= 722017731135335684812533874316187718743706632199941243431769554136754029281055669735578867827323998548169289719376740140160936003956566363167166824922752528441908326090817549756162297888394949582370013331882631781399593109816859055804911828681126759927831446042099755582145831437135202976121938918737684544485525593475533613090869714007561291215973309637975266660571055061682948001090881350474380455040376308867990063835790807929489677357608555376828089153279166
-h= 526035042407827638767080948166756275192234386036611413820164089459256208443375647999045361445094296471369786663502664905640284076732752058952339829192647660913173800383398192895762385668985425950849805263399350233938962124460176299634862731357603442085158082699690846052498238666332645910480343340312000475675630022786935637468414155542306718730229191424259198734396956525322408893309190588908494415608371989374765463898410083731743334569876949949741279177413314
-import libnum
-
-# p=libnum.gcd(e**e*h-1,n)
-p=libnum.gcd(pow(e,e,n)*h-1,n)
-print(p)
-q=n//p**2
-print(n==p*p*q)
-d=libnum.invmod(e,p-1)
-print(d)
-m=pow(c,d,p)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/exp.py b/RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/exp.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-
-
-from Crypto.PublicKey import RSA
-from Crypto.Cipher import PKCS1_OAEP
-import libnum
-
-with open("111", 'rb') as f:
-    c = f.read()
-c=libnum.s2n(c)
-with open("11.pem", 'rb') as f:
-    key = f.read()
-rsakey = RSA.importKey(key)
-n= rsakey.n
-e= rsakey.e
-d= rsakey.d
-print(d)
-# p1=libnum.nroot(n,2)
-# p=gmpy2.next_prime(p1)
-# q=sympy.prevprime(p)
-# print(n==p*q)
-# phi=(p-1)*(q-1)
-# d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/P80 h=p+q/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P80 h=p+q/exp.py b/RSA_整理/整理中/P80 h=p+q/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P80 h=p+q/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-
-import gmpy2
-import libnum
-import sympy
-n= 152362584260172832299347742092288781523553077595415336181107340981588793827198678351439908568365900532506619219107872595952010917469583778751598317914867718261964335080084208817370990836785169395479387595153363093720954122478858717743030228933613354156557566800833234418707803592840802973241337796008470981341
-c= 19401395531981752916451282817866974743361193553919716050068261633260025385637451158918896346789157347763593932302429285603509319396908014135940103051580842310569537091180635065419629629004607071254512910448784377678421676801718187196005282018075668909717717835822216168107432901556029987260147722263316337224
-p_q= 24761248958744201462825446279928534556231843440178848260305853629617417115589455163519829983799059130246977131703814834484201858080083363998431077557014558
-e=65537
-p = sympy.symbols('p')
-q= sympy.symbols('q')
-f1=p+q-p_q
-f2=p*q-n
-p,q=sympy.solve([f1,f2],[p,q])
-
-print(p[0])
-print(p[1])
-phi=(p[0]-1)*(p[1]-1)
-d=gmpy2.invert(e,int(phi))
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
-
-
Index: RSA_整理/整理中/Coppersmith_Boneh Durfee 攻击/题目.txt
===================================================================
diff --git a/RSA_整理/整理中/Coppersmith_Boneh Durfee 攻击/题目.txt b/RSA_整理/整理中/Coppersmith_Boneh Durfee 攻击/题目.txt
deleted file mode 100644
--- a/RSA_整理/整理中/Coppersmith_Boneh Durfee 攻击/题目.txt	
+++ /dev/null	
@@ -1,8 +0,0 @@
-[+]n=0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L
-[+]d=random.getrandbits(1024*0.270)
-[+]e=invmod(d,phin)
-[+]hex(e)=0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL
-[+]m=random.getrandbits(512)
-[+]c=pow(m,e,n)=0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL
-[-]long_to_bytes(m).encode('hex')=
-知道e,d<=n^0.27 ，另外 . 查阅资料知使用 Boneh and Durfee attack. 现成脚本：
\ No newline at end of file
Index: RSA_整理/整理中/P47. p^3 + q^4/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P47. p^3 + q^4/题目.py b/RSA_整理/整理中/P47. p^3 + q^4/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P47. p^3 + q^4/题目.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-from Crypto.Util.number import *
-from gmpy2 import *
-from secret import flag
-
-p = getPrime(512)
-q = getPrime(128)
-r = getPrime(512)
-a = p**3 + q**4
-n = p * q * r
-e = 65537
-m = bytes_to_long(flag)
-c = powmod(m,e,n)
-
-print('a =', a)
-print('n =', n)
-print('c =', c)
-
-
-a = 1001757897913772351510420195662626456337522550684606727483773096673299029784598925879489541145425035208954548434364407129536623872359866140502945055841821765538135618785958230881698432164666106480484384998915283051445946164568339012311071022667483689786104241205203770248137327154122271358173278768580995401804353335810303663245624828137303106291342454008598042561788843169528260839797410662782024780465758566251328065946252974178694612662193108827812380093012592
-n = 19743856964263732842999962921764407899550835757434895392940479421960735302959163991849377985049404173836251900687827441599500422841626517558622567745437335569126719161072741233680254267603047267283814233895186061759120509099394028737117210315668037567644106922178370110286156290354552013641623466808054072066874721501635305497521532247446583415341
-c = 11573369450591319755076158585550356804136715495771905025393681593171072453674223539740220735995000501270745453812328856003963738281166754397539243769043057759237596024541470868109828449256053991918612982581009998827964614610819962346527488888094333196535012014776795315145414671509148454534127080694322513052946539505422338224596999797852421340273
Index: RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/解析.txt b/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/解析.txt	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-
-需要计算(B!)%A
-
-根据威尔逊定理
-(p-1)!%p=-1%p
-(p-2)!%p=1%p
-
-(a-2)!%p=1%p
-
-(a-2-b+b)!%p=1
-t=a-2-b
-(b+t)!%p=1
-b+t=a-2
-
-b!%p*(b+t-1)%p=inmove(a-2,p)%p
-b!%p*(b+t-1)%p=inmove(a-3,p)%p
-b!%p*(b+t-2)%p=inmove(b+t-1,p)%p
-
-
-1,2,3%5
-1*2*3*4*5%5=120%5=4
-6%5*120%5=
Index: RSA_基础篇/P21-P40/P37 m大于n/原始题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P37 m大于n/原始题目.py b/RSA_基础篇/P21-P40/P37 m大于n/原始题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P37 m大于n/原始题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2 as gp
-from secert import flag
-assert len(flag)==42
-e=0x10001
-m=bytes_to_long(flag)
-p=getPrime(160)
-q=gp.next_prime(p)
-n=p*q
-c=pow(m,e,n)
-print('n=',n)
-print('c=',c)
-"""
-n= 1938198674432811161450690669878250944830265839396906617662062291196152960227589796372087441130963
-c= 90170164274936424192415483102025065297184726282389841586708984518420677588910796600189918035116
-"""
Index: RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2e3不互素/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2e3不互素/exp.py b/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2e3不互素/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2e3不互素/exp.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-
-
-n1=22050953768202021481010915313335403389948821591290284021528823110055078952801744325742584338632743222564116025569201609100099140217395018016506154677038588910158433553200597007004268715220573321589629347699068502486270203492908109836129720897763672586681625070576997967568522356194367741554734864232958659587053761759661478814378254701518735932796643357210227340562329360114827890815519720551495219551873035412573398259484498825938763675850434100787696383253997179331644466947544341986360021205157678182603783695524965051557767005272125386048836833015580253783584964102467821576852398803546108481537310174321919050353
-
-e1=59128088630385702091793322397875412615287778093553340394935198771980934904409635908137056137500955809593299368744838440346273289970555396051144990989797210863701146919141975211913752717972107017909298545594800443496132062216604362311000654559609679035644414116340707213965027649030838962137050094466321514829
-e2=56215169078945305147968681282252756439303068274069910023349833198776537639158983027295991346383182982930396088736536749365734429090657910300545074934035046118793611766878525139472732747606948579166089291432351453511111034598283193727196891373071637478129067053858908528278572028109519929965821246065475778933
-e3=73156897345576580733336254416875446312135920505234241583955377458351670307425321903141332045390781579660774735374640610101410104174523838973391291498719274252868469620986514997919898470027086712768194090825851384606653867575710280385622236269294531071134614036937731776500204830836190134333882217896008543457
-
-c1=19976175496420780796848436562459254725655766819091829085826918149358308150771183434480326036444720888245566133903361432778229861271628280695446732985230796743181959883517331552003617993267709377216621765393365663340987203137917844628578695625623022062000732096723407958157462077180258074203352729060778611766833177607902362002125820905015209529089499964424943030945604025254397014677619659288363721977711532716145967636667129377981985698990030569256843762007665249718164170703617756181999278131026660565301567535403114776187577089832813139785291746759358023750990811762789636834511123590738087173954711684926601615115
-c2=4898586865590583349791168503497061263814474412917633892983260889915349146399251850580778058010671768731276622207144220430686590775349599075240855807281580243699788240580753584404973075025832012668575962081086112249777937293916819176020066376650920291361510348493449272807270898408762007189419333896769659437430852768446544404264173201280880803402814516726579877461957611421823994569622178100898519381415592111331870831221465078296676862706869630494365712999543574411096657312292324237752979866718985721293323434244021916237004185669910990599469829124257580347870877094040597883857029513765244082636393726155793249758
-c3=9099883293285607188457315377060923795389227851572672279537581985537813863184558195642805032976629001480514343235938921302176128381899613102386249993227001360190335966378018345908405925306216793296591916375901967580479064607956351257642318992575443552673489793187341405994074952704302526250535547037471646429167885887202208019598232257237310090543218540763411250961204711239409925361176839906514774379481609219818539741463273640959146818464495377132354754189255581006486953675501357979989730786548601066328450328018325649032865158696166428191373110380437099547406040746960175538556202450225910237128767465615939587757
-
-
-e1e2=6740560973485493036625043786360637357620464277198869494878993293248726344542203632176960860913490017486846857633080261095044261451862939397229008604970249
-e1e3=8771983350194518781617000083611750677841987896991848139049745498894342351855483382790835667007379464695226823245525542422100743814570866678833455310960421
-e2e3=8339835408369114849130895563555934346018109933913062330818844184888266124660264101689665242429038647659065732286075080285443457809210952438395361672290317
-
-import libnum
-
-s1,s2,e1e2=libnum.xgcd(e1,e2)
-c12=pow(c1,s1,n1)*pow(c2,s2,n1)%n1
-s2,s3,e2e3=libnum.xgcd(e2,e3)
-c23=pow(c2,s2,n1)*pow(c3,s3,n1)%n1
-
-s12,s23,gcd=libnum.xgcd(e1e2,e2e3)
-m=pow(c12,s12,n1)*pow(c23,s23,n1)%n1
-print(libnum.n2s(m))
-
-
-s1,s2,e1e2=libnum.xgcd(e1,e2)
-c12=pow(c1,s1,n1)*pow(c2,s2,n1)%n1
-
-s12,s3,gcd=libnum.xgcd(e1e2,e3)
-m=pow(c12,s12,n1)*pow(c3,s3,n1)%n1
-print(libnum.n2s(m))
-
-#
-s1,s2,e1e2=libnum.xgcd(e1,e2)
-s12,s3,gcd=libnum.xgcd(e1e2,e3)
-m=pow(c1,s1*s12,n1)*pow(c2,s2*s12,n1)*pow(c3,s3,n1)%n1
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/Coppersmith_Franklin-Reiter 相关消息攻击/题目.py
===================================================================
diff --git a/RSA_整理/整理中/Coppersmith_Franklin-Reiter 相关消息攻击/题目.py b/RSA_整理/整理中/Coppersmith_Franklin-Reiter 相关消息攻击/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/Coppersmith_Franklin-Reiter 相关消息攻击/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n = p * q
-e = 3
-c1=pow(m,e,n)
-c2=pow(m+23,e,n)
-print("n=",n)
-print("c1=",c1)
-print("c2=",c2)
\ No newline at end of file
Index: RSA_整理/整理中/N不互素_基础题目/出题.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_基础题目/出题.py b/RSA_整理/整理中/N不互素_基础题目/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_基础题目/出题.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q1 = libnum.generate_prime(1024)
-q2 = libnum.generate_prime(1024)
-n1 = p * q1
-n2 = p * q2
-e = 65537
-c1 = pow(m, e, n1)
-c2 = pow(m, e, n2)
-print("n1=", n1)
-print("n2=", n2)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_整理/整理中/P84.攻防世界simpleRSA/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P84.攻防世界simpleRSA/exp.py b/RSA_整理/整理中/P84.攻防世界simpleRSA/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P84.攻防世界simpleRSA/exp.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-
-import gmpy2
-import libnum
-
-n1 = 21655617838358037895534605162358784326495251462447218485102155997156394132443891540203860915433559917314267455046844360743623050975083617915806922096697304603878134295964650430393375225792781804726292460923708890722827436552209016368047420993613497196059326374616217655625810171080545267058266278112647715784756433895809757917070401895613168910166812566545593405362953487807840539425383123369842741821260523005208479361484891762714749721683834754601596796707669718084343845276793153649005628590896279281956588607062999398889314240295073524688108299345609307659091936270255367762936542565961639163236594456862919813549
-n2 = 24623016338698579967431781680200075706241014384066250660360949684385831604822817314457973559632215801205780786144608311361063622813017396858888436529116737754653067203843306015767091585697803364656624926853551997229897087731298797904208292585562517602132663331748784390752958757661484560335406769204491939879324079089140420467301773366050084810282369044622442784113688062220370531522036512803461607049619641336524486507388232280683726065679295742456158606213294533956580462863488082028563360006966912264908424680686577344549034033470952036766850596897062924137344079889301948258438680545785139118107899367307031396309
-c1 = 2615722342860373905833491925692465899705229373785773622118746270300793647098821993550686581418882518204094299812033719020077509270290007615866572202192731169538843513634106977827187688709725198643481375562114294032637211892276591506759075653224150064709644522873824736707734614347484224826380423111005274801291329132431269949575630918992520949095837680436317128676927389692790957195674310219740918585437793016218702207192925330821165126647260859644876583452851011163136097317885847756944279214149072452930036614703451352331567857453770020626414948005358547089607480508274005888648569717750523094342973767148059329557
-c2 = 6769301750070285366235237940904276375318319174100507184855293529277737253672792851212185236735819718282816927603167670154115730023644681563602020732801002035524276894497009910595468459369997765552682404281557968383413458466181053253824257764740656801662020120125474240770889092605770532420770257017137747744565202144183642972714927894809373657977142884508230107940618969817885214454558667008383628769508472963039551067432579488899853537410634175220583489733111861415444811663313479382343954977022383996370428051605169520337142916079300674356082855978456798812661535740008277913769809112114364617214398154457094899399
-e1=  377312346502536339265
-e2=  561236991551738188085
-
-
-p=libnum.gcd(n1,n2)
-q1=n1//p
-q2=n2//p
-#因为e phi不互素，需要用到中国剩余定理构建一个新的rsa
-#https://blog.csdn.net/luochen2436/article/details/128012748
-phi1=(p-1)*(q1-1)
-phi2=(p-1)*(q2-1)
-t=35
-c1=pow(c1,libnum.invmod(e1//35,phi1),n1)
-c2=pow(c2,libnum.invmod(e2//35,phi2),n2)
-m1=pow(c1,1,q1)
-m2=pow(c2,1,q2)
-m3=pow(c1*c2,1,p)
-c=libnum.solve_crt([m1,m2,m3],[q1,q2,p])
-phi=(q1-1)*(q2-1)
-m=pow(c,libnum.invmod(7,phi),q1*q2)
-print(m)
-m1=libnum.nroot(m,5)
-print(libnum.n2s(int(m1)))
-
-
-
Index: RSA_整理/整理中/P69 pow(ap+bq,c,n)/rsa29.py
===================================================================
diff --git a/RSA_整理/整理中/P69 pow(ap+bq,c,n)/rsa29.py b/RSA_整理/整理中/P69 pow(ap+bq,c,n)/rsa29.py
deleted file mode 100644
--- a/RSA_整理/整理中/P69 pow(ap+bq,c,n)/rsa29.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 65537
-n = p * q
-
-h1 = pow(2022 * p + 2021 * q, 1919, n)
-h2 = pow(2021 * p + 2022 * q, 9191, n)
-
-c = pow(m, e, n)
-print("h1=", h1)
-print("h2=", h2)
-print("n=", n)
-print("c=", c)
-h1 = 30855822627962989585229048864635672320544672090785297155723423466786046363050770166911337642023073726938940720811335150158356617935867424913657952916327330494297125827029212326952561052030408154856279444698976262609160644653834177066135162450457878611978648445980131216562928824964574836061694756466154667205
-h2 = 40100423593623305059775303455521238466361560139512541341649592368069344035986841719639287569549223369845132085965748305686682111656643181380183441717688410643280141958261131108758470255679260104010792458818255865919591927360182698571973058572267041626051012344432873060584028954870019976713790755601324558548
-n = 64102959876468100680156640535847855388761634133282097987245513821195616433464232166471238446539383399142190819132167640251487788433828354971655930602252481995598958979413328369264306739790569021167918377152867054737871100808301104788028284764159363852402951908183073134132550874656189587590198702783318894869
-c = 45131183832310284041286970164837452402860781494367814170537748979786683176908409834474718536824887130743650179867181711815561375866637642188028690304179190358058486755191379316599103162356440279017384835373685350107932236214472686050587719705355548868691431799158695967203810074232266157701183923093912519832
Index: RSA_整理/整理中/A02 基础_已知p,q,e,c/exp.py
===================================================================
diff --git a/RSA_整理/整理中/A02 基础_已知p,q,e,c/exp.py b/RSA_整理/整理中/A02 基础_已知p,q,e,c/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/A02 基础_已知p,q,e,c/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-
-import libnum
-p= 178974110759313878895493455207516672882434662571655460770401953730906926302476821805659378622536968418528094957044346203494793341636459433763427491907849563922785749794854266865548657682445692416895365631610849027415100889893466490767087266542637440212533807985124840688092762928583845838066174446047886496977
-q= 93610871651220602641323046206103959524660743045950590135111801621145944725719667412027010040112514078098465817329474817485502356054795293086881519931215167856745860801666777619204160653243683622930567962804914581845602027547589056026105213437044768786486688576038889017989891165091320977401144724582916902269
-e= 65537
-c= 10505609204533893330224001468185225454647695615253006709365840521320011117703729471412769493857753605106376689659952882885215696765275778768339621441610719177208351696489476567331875339672513868473669863672226315682278831184868041476134806131989809014422520472566202048041013413698358733781909446846787304422628166599338803127610040714545537436536348608012176828441837378861024372912755344397449657260043057239911064546424582314518819235470388313710641962070846850292694572345451390561142917224092435026246696084949470913298543523893386679712766629009873176804118782436042080621119334193337953451160118095182279971122
-n=p*q
-
-phi_n=(p-1)*(q-1)
-#求逆元
-d=libnum.invmod(e,phi_n)
-m=pow(c,d,n)
-print(m)
-#数字转字节，转字符串
-print(libnum.n2s(int(m)).decode())
\ No newline at end of file
Index: RSA_整理/整理中/P90 _P xor Q/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P90 _P xor Q/exp.py b/RSA_整理/整理中/P90 _P xor Q/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P90 _P xor Q/exp.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-import gmpy2
-import libnum
-
-n2 = 127003138248767878216087746092048765422017641585502083524432000355338408532541607865197910579606631797065299031898223525594806324068716151137783179018112665582625201123056770957620662712083897966775244206284988606422553807186125185230229622748491730778439493335081760134674989431869363324785659619359492375443
-x2 = 3713689996494536207275880780575695141387196713829050036258614350034484757813937841042992412600156055738200137589955494058780961235985782374795104819263776
-x2 = bin(x2)[2:].zfill(512)
-
-pre_sol = [(0, 0)]
-for x in range(256):
-    cur_sol = []
-    for p, q in pre_sol:
-        for i in range(2):
-            for j in range(2):
-                cur_p = p + i * pow(2, 511 - x) + (int(x2[x]) ^ j) * pow(2, x)
-                cur_q = q + j * pow(2, 511 - x) + (int(x2[511 - x]) ^ i) * pow(2, x)
-
-                if cur_p * cur_q > n2:
-                    continue
-                if (cur_p + pow(2, 511 - x)) * (cur_q + pow(2, 511 - x)) < n2:
-                    continue
-                if (cur_p * cur_q) % pow(2, x + 1) != n2 % pow(2, x + 1):
-                    continue
-                cur_sol.append((cur_p, cur_q))
-    pre_sol = cur_sol
-for p, q in pre_sol:
-    if p * q == n2:
-        print(p, q)
-        break
-
-n=n2
-e=65537
-c=28606725830066334603624115469720836321272317195642525617463167689108174235290116089778712864587832608893147665928536755331808728420928314539950719845140223156504618276048603869925007708152189255298965799947640133200085111741254836861931603704948557525706684578721413729858589789350780583640229671796472384358
-phi=(p-1)*(q-1)
-d=gmpy2.invert(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_整理/整理中/P43 l=xp - yq/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P43 l=xp - yq/exp.py b/RSA_整理/整理中/P43 l=xp - yq/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P43 l=xp - yq/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-
-c= 551564125794527360292754537135683993412073939931842743252825546160841743341364252094742222814487857418305824437323878030495005807897236944650041419697803230240542069789239142234335059646047531620567332859284127151534412455911539133365768350696428945111875792760777095508652587766083396019852298185115051969441074068938824047201192080418628602596174474774855697186208035938593534975409169684395515882685578329880719955607549130328622864194613235437820462747929915267018301395643953492066705285425220173592312775458072380593362944099308614354606781832206279986843372454066078671851476691251733787462566344010699659948657470584132290099499667486463668654484126327809783796272798211413970548059315276716638396549002556403458342714471679783144761718633856405196153659252506389046652272680738572647805669805470798408389216761414662117425919867711976198236441013393105065105046883566185424874718959523366577696635290319923431499347239353902164293776533287417684647248865650788292642479872919920916018023539192669345883686464939028997808635504006023546082570114536162143744176286568521085625879207069673824739439940521280693601490469000165917705323629474544240448431724304411942107541454761715945905363697306927908085601405210241096339584435
-c
-x= 1039921692531141453171855686573982160456036531996302869318512030808823452344564509029392768187937381358132835421353947391146152688775743299708763697482129863204164544696991625661601981428710402320295175770372423624167211973430139460361562768548290676701957053891210369700921221423149214485954906023526821279926557801581767708726392811383905896345230572315244721504057592760336332644624486050382007494446830316569572753507641996242913084915745145936195274474180406298475140237243181920308808061641459145199545975335386794052129180701729606572759157857974396497582462091051829175373289263597496839879241578243224907672832014803113635737984868263391212145914279985388384337152091881584412700291574912680627163539990219142463561790982466626815425779747862078596997632279168340914860868052097864543118762539022747121013597275757154401931133822198696036282672601198523849805269896168866902811154489835853026712709866710314531080297228565754738514945802684651397895233790841923066629484585104088163724416585649040197355115406759433403488645168693798651073547129833154915060629892670375098565171693004803737662953673589099229638713143579081504330789724161639576214795886269552237155791077509102229464684521355609590852748304069726247236704799
-y= 736014288116387998482981292225897575913033744746622859814245522394148828934504502068128536122008262895931175914404165778736109397740668050279940330934493758991133283289795093940740201033496246207192437425621387835239430286481129433660072250177825347297475025162943732731630653122272527575067247416479924583882613330362098881474738197380789249965288557232114834891782358102994942270211315653831351383961417227758531583740666226727725750344616718977607143032420115705902434150306308160817617737050537061661099447512128104666493631155591951137144970943417226364185059458456339980873416546822860516520652871647188557889586426143677544650638309834553711532895702474423578962267524516754014832022202939700966864046238418056495746842655952853211515370515521909876239291145362684660555361066717458585544421496216796451185392132170217148402925014208212261927403253177814728752653680327831399487079417648836955867684206159459353721174409472322370933025321740556907124801250532865024242284602753929833669163493860061693895261466397155211732075466641386919838121634892150813507406963394856780887481463616941192441478968072733703153183623234052142371034221826202653301438259138303438892825467473471320095956240609806088237187069554283831919431149
-e = 0x10001
-
-import libnum
-x1=libnum.invmod(x,y)
-p=pow(c1*x1,1,y)
-q=(x*p-c1)//y
-n=p*q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/P42 离散对数pow(m,flag,n)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P42 离散对数pow(m,flag,n)/题目.py b/RSA_整理/整理中/P42 离散对数pow(m,flag,n)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P42 离散对数pow(m,flag,n)/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-import random
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-e= libnum.s2n(flag)
-n=2**512
-m = random.randint(2, n-1) | 1
-c=pow(m,e,n)
-print("m=",m)
-print("c=",c)
-m= 159288671018830898156155351952186977642819454341811868237859009749383960869982923115380878290375192847504545108933927464025163205891819917678534983817309
-c= 12714803532028941243809606974437987862326521262004726834999494702689747253925210908627215296516631899337657950072189903034513687791841244487330214554784973
-
Index: RSA_基础篇/P41-P60/P60. 障眼法/exp2.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P60. 障眼法/exp2.py b/RSA_基础篇/P41-P60/P60. 障眼法/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P60. 障眼法/exp2.py	
+++ /dev/null	
@@ -1,51 +0,0 @@
-
-
-import sympy
-import gmpy2
-import libnum
-
-n1 = 6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683
-n2 = 20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947
-
-c1=6624758244437183700228793390575387439910775985543869953485120951825790403986028668723069396276896827302706342862776605008038149721097476152863529945095435498809442643082504012461883786296234960634593997098236558840899107452647003306820097771301898479134315680273315445282673421302058215601162967617943836306076
-c2=204384474875628990804496315735508023717499220909413449050868658084284187670628949761107184746708810539920536825856744947995442111688188562682921193868294477052992835394998910706435735040133361347697720913541458302074252626700854595868437809272878960638744881154520946183933043843588964174947340240510756356766
-e2=0xe18e
-print(e2)
-n22=n2//(13*25)
-
-while 1:
-    a,s=gmpy2.iroot(n22,2)
-    #print(p1,s)
-    p=sympy.nextprime(a*13)
-    q=n2//p
-    if n2%p==0:
-        # print(p)
-        # print(q)
-        q=n2//p
-        break
-
-p=102397419546952293033860597727650152144175130286102358700580521651161981691864932442389800376284315897109792547767071136122457986326994452907466660551539601
-q=196918114513369794295885764860865677200336789011735305193424080098388426330509485466134231492854453648288062591859752184850880742936527794052820501060652747
-
-# 当e约去公约数后与phi互素
-def decrypt(p, q, e, c):
-    n = p * q
-    phi = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi)
-    d = gmpy2.invert(e // t, phi)
-    print(d)
-    m = pow(c, d, n)
-    msg,s = gmpy2.iroot(m, t)
-    if msg:
-        return libnum.n2s(int(msg))
-m=decrypt(p, q, e2, c2)
-print(m)
-
-phi=(p-1)*(q-1)
-d1=libnum.invmod(n1,phi)
-m1=pow(c1,d1,n2)
-print(m1)
-flag1=libnum.n2s(m1)
-print(flag1)
-
-print(flag1+m)
Index: RSA_整理/整理中/求公约数_h=pow(d,e,n)/wp.md
===================================================================
diff --git a/RSA_整理/整理中/求公约数_h=pow(d,e,n)/wp.md b/RSA_整理/整理中/求公约数_h=pow(d,e,n)/wp.md
deleted file mode 100644
--- a/RSA_整理/整理中/求公约数_h=pow(d,e,n)/wp.md	
+++ /dev/null	
@@ -1,16 +0,0 @@
-```
-h=pow(d,e,n)
-
-```
-
-d^e%n=h
-两边同时乘e^e
-e^e*d^e%n=e^e*h%n
-(ed)^e%n=e^e*h%n
-(ed)^e%n-1=e^e*h%n-1
-(ed)^e%n-1%n=e^e*h%n-1
-((ed)^e-1)%n=e^e*h%n-1
-((k*phi+1)^e-1)%n=e^e*h%n-1
-((k*phi+1-1)%n=e^e*h%n-1
-(k*p*(p-1)*(q-1))%n=e^e*h%n-1
-k*p=e^e*h%n-1
Index: RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/rsa5.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/rsa5.py b/RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/rsa5.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P02 密钥/2.公钥分解/rsa5.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-from Crypto.PublicKey import RSA
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = libnum.s2n(flag)
-c = pow(m, e, n)
-#
-c1 = libnum.n2s(int(c))
-
-with open("flag1.pem", "wb") as f:
-    f.write(c1)
-# 生成公钥
-rsa_components = (int(n), int(e))
-keypair = RSA.construct(rsa_components)
-with open('pubckey1.pem', 'wb') as f:
-    f.write(keypair.exportKey())
Index: RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目解析.txt
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目解析.txt b/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目解析.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-hc = pow(h + p * 1111, e, n)
-hc=(h+p*1111)^e+kn
-hc=(h+p*1111)^e+kn
-hc=h^e+kp+kn
-hc-h^e=kp
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/exp.py b/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-from sympy import *
-
-
-e = 65537
-c = 846622880180923496523897101093587388412673197929101816777894080453907929979417582433675846206418833989406082027835614960931951892393700870678469052366477889491688459558189367255658278968722099012534045477993924284003153851171132420751750724394405070269223797513951991873714156884423926582172189394011114952
-n = 159452716285492879108396025652299064897348745847754101475050126796260046052685162344131542880739092630022413124977374334652652450809186959288635651980201026825896903174847709657312399801033678426271413442323084354665643010763178857967804623680894444913369256168333223214048037661178587978535722147091129404833
-leak = 2669103705669857828725305123419482758456336465207378766363532584323475128597302561377245054918781031448710846825859151788151496659511563529987056456136018
-
-p=Symbol('p')
-q=Symbol('q')
-
-x=solve([2*(p-q+1)-leak, p*q-n],[p, q])
-p=int(x[1][0])
-q=int(x[1][1])
-# print(result)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,int(d),n)
-flag=libnum.n2s(m)
-print(flag)
\ No newline at end of file
Index: RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/exp.py b/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-e = 65537
-c = 59662555342583061013008608133060203475725526601468647442902301335538953096485921516133656618941085620436784211565880744663573927593670579237831797055934897166262528476227281479029026508166848256301828084036716500159067642101104810756620735383857351274773983199968924981397675373272878756685629789497697821620
-n = 83332115751539889489689110273690067288993797655970253065863170986174973047785854940017477990345318506407680986257706329521142524295434171889087917406552261883625775754882538291980506944585738241124811588555071095223782766762626040473256423491630224616140407276984106458673447870374272906086783555489477673207
-l = 18881487897809480964326513919135880296801378921812225600834164247018332292886076618571738627353925482046410714540439662613766662197119044934743578662330528
-
-import libnum
-
-phi=n+1-l
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-flag=libnum.n2s(m)
-print(flag)
Index: RSA_整理/整理中/N分解_PQ过大/出题脚本.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_PQ过大/出题脚本.py b/RSA_整理/整理中/N分解_PQ过大/出题脚本.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_PQ过大/出题脚本.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(32)
-n = p * q
-e = 65537
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print(flag)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/题目.py b/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-from random import choice
-from Crypto.Util.number import isPrime, sieve_base as primes
-import uuid
-flag="flag{"+str(uuid.uuid4())+"}"
-
-def getPrime(bits):
-    while True:
-      n = 2
-      while n.bit_length() < bits:
-          n *= choice(primes)	#primes为前10000个素数的列表
-      if isPrime(n + 1):
-          return n + 1
-
-e = 0x10001
-m = int.from_bytes(flag.encode(), 'big')
-p, q = [getPrime(2048) for _ in range(2)]
-n = p * q
-c = pow(m, e, n)
-
-
-print("n=",n)
-print("c=",c)
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp2.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp2.py b/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp2.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-
-
-c=1051311603595400257980451542641726560928968569258042231276292652088507209347204465348483100080899623360705698249443255030368048979130482813052608650445300611553758759647722097778171873596181791974080589234136090632966294575063306439633769753905530026312180583106024810580642209905594594119077985110929675466498207370604560182924468112540068499274911327513697378581931822685826876372554425845071592347470781982215295908151280216722253883169708944885906780090210923
-e=343284449
-p= 11820891196647569262137841192985418014377132106496147254821784946481523526822939129065042819464351666077658751406165276121125571355594004514547517855730743
-r= 9484954066160968219229920429258150817546418633451929876581842443665029377287119340232501682142185708534413073877473741393278935479791561681402673403009771
-import libnum
-
-phi=(p-1)*(r-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,p*r)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/exp.py b/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/exp.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-import gmpy2
-import libnum
-
-n= 121769936784982302455460882778727803049384633262560695513781994654895190859753979310564561712445845918288140931499625808990896367059857863794677794634764954265917223929188027566735170858722793015537480829986990608756383815655534511937235703892950567493911917178761554143379884176240162037489989420552078127671
-e= 54722
-c= 68207327189131286430765764525947832439888346002213816928140706886898558628392596589715994944626609815778649728495478844245774029669442060829925589118748033844002399193350339069964179052517763638951854264605935062729791334189169468172816314672207667470048850163934061677572210757247460567864055270415151846298
-h= 12176993678498230245546088277872780304938463326256069551378199465489519085975397931056456171244584591828814093149962580899089636705985786379467779463476493219517172984909297814745438140651274778256117288586982848108213932163133817644505376344716130049020474232954521634539644016004694898461955741388897934560
-
-
-cc1=gmpy2.gcd(e,h)
-d=gmpy2.invert(e//cc1,h)
-m=pow(c,d,n)
-flag,s=gmpy2.iroot(m,cc1)
-print(libnum.n2s(int(flag)))
-
-
-# for h2 in range(4,8):
-#     try:
-#         phi = h * h2
-#         print(h2)
-#         cc1 = gmpy2.gcd(e, phi)
-#         print(cc1)
-#         d = gmpy2.invert(e // cc1, phi)
-#         print(d)
-#         m = pow(c, d, n)
-#         flag, s = gmpy2.iroot(m, cc1)
-#         print(flag)
-#         print(libnum.n2s(int(flag)))
-#     except:
-#         continue
Index: RSA_基础篇/P41-P60/P53. p^3 + q^4/exp..py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P53. p^3 + q^4/exp..py b/RSA_基础篇/P41-P60/P53. p^3 + q^4/exp..py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P53. p^3 + q^4/exp..py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-a = 1001757897913772351510420195662626456337522550684606727483773096673299029784598925879489541145425035208954548434364407129536623872359866140502945055841821765538135618785958230881698432164666106480484384998915283051445946164568339012311071022667483689786104241205203770248137327154122271358173278768580995401804353335810303663245624828137303106291342454008598042561788843169528260839797410662782024780465758566251328065946252974178694612662193108827812380093012592
-n = 19743856964263732842999962921764407899550835757434895392940479421960735302959163991849377985049404173836251900687827441599500422841626517558622567745437335569126719161072741233680254267603047267283814233895186061759120509099394028737117210315668037567644106922178370110286156290354552013641623466808054072066874721501635305497521532247446583415341
-c = 11573369450591319755076158585550356804136715495771905025393681593171072453674223539740220735995000501270745453812328856003963738281166754397539243769043057759237596024541470868109828449256053991918612982581009998827964614610819962346527488888094333196535012014776795315145414671509148454534127080694322513052946539505422338224596999797852421340273
-e = 65537
-import gmpy2
-import libnum
-
-p=gmpy2.iroot(a,3)[0]
-print(gmpy2.is_prime(p))
-q=gmpy2.iroot(a-p**3,4)[0]
-print(gmpy2.is_prime(q))
-r=n//(p*q)
-phi=(p-1)*(q-1)*(r-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P08 dp泄露/1.常规/解析.txt
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/解析.txt b/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/解析.txt	
+++ /dev/null	
@@ -1,28 +0,0 @@
-
-
-已知公钥n,e以及dp
-其中,dp = d mod (p-1)
-已知：
-c = m^e mod n
-m = c^d mod n
-ϕ(n)=(p−1)*(q−1)
-d∗e ≡ 1 mod ϕ(n)
-dp = d mod (p−1)
-由上式可以得到
-dp*e≡d*e mod (p−1)
-因此可以得到
-式1：d∗e=k∗(p−1)+dp∗e
-式2：d∗e≡1 mod ϕ(n)
-式1带入式2
-=> k∗(p−1)+dp∗e ≡1 mod ϕ(n)
-=> k∗(p−1)+dp∗e ≡1 mod (p−1)∗(q−1)
-=> k1∗(p−1)+dp∗e = k2*(p−1)∗(q−1)+1
-=> dp*e =  k2*(p−1)∗(q−1)+1-k1∗(p−1)+dp∗e
-=> dp*e = (p-1)*[k2*(p-1)-k1]+1
-因dp<p−1（dp是d//（p-1）的余数，dp<p−1）
-所以e > k2∗(q−1)−k1
-假设 x=k2∗(q−1)−k1
-x的范围为 (0,e)
-x∗(p−1)+1=dp∗e
-求出p-1方法，遍历(0,e)的范围，其中肯定有一个p可以被n整除，那么求出p和q
-
Index: RSA_整理/整理中/低加密指数_e=2_rabin/rabin1.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=2_rabin/rabin1.py b/RSA_整理/整理中/低加密指数_e=2_rabin/rabin1.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=2_rabin/rabin1.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-
-
-c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-c2 =  8943014059616554864780402232625215323717650137702921347505099596041241060991211014413068279308600979202066026580321911322396296877730441259506201930904989
-p1 =  9332664074116371272320347910722305705338764655969305966836353509444565128652866496870138156351793824473079367512299950127043084761943406224989567423866071
-c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-
-
-
-import libnum
-import gmpy2
-
-mp = pow(c2, (p1 + 1) // 4, p1)
-print(mp)
-print(gmpy2.is_prime(mp))
-print(gmpy2.bit_length(mp))
-
Index: RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/题目.py
===================================================================
diff --git a/RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/题目.py b/RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/题目.py	
+++ /dev/null	
@@ -1,28 +0,0 @@
-from Crypto.Util.number import bytes_to_long,inverse,getPrime
-from flag import flag
-
-m = bytes_to_long(flag)
-
-p = getPrime(1024)
-q = getPrime(1024)
-n = p*q
-print(n)
-e = 65537
-
-c = pow(m,e,n)
-
-pq = p*(q-1)
-qp = q*(p-1)
-
-print("c=",c)
-print("n=",n)
-print("pq=",pq)
-print("qp=",qp)
-
-'''
-c= 8722269075970644434253339592758512788160408912707387632591552130175707843950684315083250494010055435391879036285103810263591951437829414438640307561645721347859659807138051841516634704123100270651976676182059252251162982609391666023674158274992400910869692389001622774140191223807887675081808561012755545464977015973615407965906513878979919700065923364884766974187303774330319143647840846354404070430118235352622445115153298578370521811697710289716188726587743282814946239856766713516166990341116198180068191759095913957606379780234116317390622824096667107736103270907349927467971817639795094030622157581511033950777
-n= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074584935050067254029262890188260006596141011807724688556673520261743199388391094490191001701011230322653422314758778116196105077883955436582364267530633358016652912054880813710531145973799193443828969535902856467548523653920307742364119002349899553478815101092655897400295925170383678499125295006364960124859003
-pq= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074488896197029704465200125337817646702009123916866455067019234171839614862660036737875747177391796376553159880972782837853473250804807544086701088829096838316550146794766718580877976153967582795248676367265069623900208276878140709691073369415161936376086988069213820933152601453587292943483693378833664901178324
-qp= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074475956379708898904933143429835002718457573266164923043251954374464149976302585916538814746811455883837138715445492053610047383292461097590195481556557381952895539341802954749542143253491617052100969586396996063822508764438280468492894012685918249843558593322831683872737943676955669923498182824352081785243246
-'''
-
Index: RSA_基础篇/P41-P60/P49.p^5-p^4/exp2.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P49.p^5-p^4/exp2.py b/RSA_基础篇/P41-P60/P49.p^5-p^4/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P49.p^5-p^4/exp2.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-from Crypto.Util.number import *
-import gmpy2
-
-#因为p和q都是512bit长度，且已知hint=p**5 - q**4，p**5远大于q**4。由此我们可以直接对hint开5次方得到near_p，
-# 此时near_p<p我们再循环取near_p的下一个素数，直至n可以整除near_p为止,此时p=near_p，则q=n//p。
-
-n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943
-e = 65537
-c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552
-h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446
-near_p = gmpy2.iroot(h,5)[0]
-while n%near_p !=0:
-    near_p =gmpy2.next_prime(near_p)
-p = near_p
-q = n//p
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-print(long_to_bytes(m))
Index: RSA_整理/整理中/P45  e=2^n次方(有限域开方)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P45  e=2^n次方(有限域开方)/题目.py b/RSA_整理/整理中/P45  e=2^n次方(有限域开方)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P45  e=2^n次方(有限域开方)/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-e = 2**4
-n=libnum.generate_prime(512)
-c=pow(m,e,n)
-print("n=",n)
-print("c=",c)
-print("e=",e)
-n= 6706056417909032146977148210894497447322670892758026214857499040210310599424027594966978579750086907555556785153774781114612452198663154506193494869117293
-c= 1242680122077482326416451537576315381462840270521607042121188408927264012190282446465124987976978765626943470962693854431894739138078757743809643142105235
-e= 16
Index: RSA_整理/整理中/P88 光滑数p-1/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P88 光滑数p-1/exp.py b/RSA_整理/整理中/P88 光滑数p-1/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P88 光滑数p-1/exp.py	
+++ /dev/null	
@@ -1,31 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-import time
-
-def Pollards_p_1(N):
-    a = 2
-    n = 2
-    while True:
-        a = pow(a, n, N)
-        res = gmpy2.gcd(a - 1, N)
-        if res != 1 and res != N:
-            print('n =', n)
-            print('p =', res)
-            return res
-        n += 1
-
-
-t1=time.time()
-print(t1)
-e = 0x10001
-n= 74186574773094914200793316482026737888029459954999794709543067320974116632360492502173041497419087333648379365916337386550501241512964933930920296213690546163903568060144802072907352410289817238773935298058120931756211949834537184580004146147011906046925415102068575128637685130857734165699709372402386494273872659178012812526452750326989859184669742220784770554396100994762970689631211088819152161793291234247565544015273517360237216604449262594676097450253587397009568654574908264827845608948630311193568589876380198206712600988473836479191942204078557360048382752212611123994666378998631100625416354771446453086403887608196718848828625043329354162548697948577052390304018564048925705585294154706019905390513046572500156873454890769579711221993930461212240313285542036999394273974709021139378172951930880526726041086399628443532394752602706140809701992841699198694380383517720343104199384350206567999623946695141110150446707486501918242049206119419186532290441052193142213376394976152405430947027759650651324035945611520584745465738065561870522118727442644801612767924448608030907993546440313565267711970419923753819799134348966623813216535312453229146158725554129427490029779887349549098126474452019254802523030667862456482358940609
-c= 13798798797311476147972744890014796424563856033617455941174937051525031166167343556982289358877693303965831886573992503232015737346347020221617100959059102457815822751424439757088461317263736496066346047076722459059162032717547275063048254795157994106940784171252770377103146318795308076599248001282926520785876739891975082930962806865650282063600060574004255805020507563922671004042462400063066768800905559120349363170738586133483692175136730576859224176745569188789673254081647929259892325047427578860871500105880072951421944745281483929404453324499215859258361264558778834432647664456023208734349987929389782132823526018790602652352521007729672944487319519583975460558935365007888702783469129419895548188840781686738671955620339978985745783851389680095270702793801729975192698356855018330129058658904949279585905797213388910664491314145663759413554946874511881302855712885467994028085520244731561853588964212910529043604693061801895639656170650487890961433161392259934391542460134390584337120430272745712085212448898617269092305139925012285770050309750988761863061415329411345368532763833992063446541356805869749812491756359730516697166371876947390246841987901107310535600052879474086698163101234177250689444309194098222304511589220
-
-p = Pollards_p_1(n)
-q = n // p
-assert p * q == n
-d = gmpy2.invert(e, (p - 1) * (q - 1))
-m = pow(c, d, n)
-print(long_to_bytes(m))
-t2=time.time()
-print(t2-t1)
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/出题.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/出题.py b/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/出题.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 65537
-n = p * p * q
-d=libnum.invmod(e,p*(p-1)*(q-1))
-m=libnum.s2n(flag)
-c=pow(m,e,n)
-h=pow(d,e,n)
-print("n=",n)
-print("e=",e)
-print("c=",c)
-print("h=",h)
-
Index: RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp2.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp2.py b/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp2.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-n= 911844398111317507568030211586272743559642810803818787914331663929079738528202627822846667662251048042030041470033935664573209369674069523268965737987152526613582183128946606997514072807267986386234735641297355401187247104176554195444054327215371387504430247738514902782779769145341252266429046148517286484851345996337158809383287951151995318833800589048288823347779441389456557817841392926908394599075303380247202305746236213108516365664213381514378206796072503
-e= 65537
-c= 300080339924368504847999292463017220267952096084441625317459410915167415566239223145483756851374412939603387751934997080135516712082849953085909813367521641463035016978607599067098400749542472669548410227775371907737990831693441893484347549180549797195969845699789670645284724239717707715961085798385861633577513423200868155711392384499868756505186628808335033565935730117671093529418407528298958373955412302769520447097674721470752291661705398421117193503368958
-h= 809884123954977744065991060215047261767907810988513481933765255539447865171596804277438503645581843691338334721140948219772473169011209351279569779556323540372837600764584903095004505497930920117960656845231928439961247952623622357635558582989910678652444601766003645438665672155014313626630150843461032702317194331434897461512019950454176827728954669061745699105242051645684116201591222084764721911139049565331397190517268202553536034521089862673238646017020273
-
-import libnum
-
-p=libnum.gcd(e**e*h-1,n)
-print(p)
-q=n//(p*p)
-d=libnum.invmod(e,p*(p-1)*(q-1))
-m=pow(c,d,n)
-print(libnum.n2s(m))
-
-d=libnum.invmod(e,p-1)
-m=pow(c,d,p)
-print(libnum.n2s(m))
Index: RSA_基础篇/P01-P20/P13  NC不互素/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P13  NC不互素/exp.py b/RSA_基础篇/P01-P20/P13  NC不互素/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P13  NC不互素/exp.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-
-n= 17483770234884142847456666352881633858141093959507406489438832657811880348544517317886235174580364402693136945332374390980468053811072776178864091768180166876221659675217180437370214612891072604883134760061297589091497848817124108984000363937311663848944163413212471490943544013729793140932153932722897244086933590069840634776188515344586162299372418033246808686151342011111253737930983815234958893340565218112060881945578082230607232140507764864201490541905951630320920698022711376246588071419161730102709168468030659029885654176255175171297966568656762020277408125453099365768353256668477237850688484624314512104837
-c= 7756412419736534306267281137444055853970895832135119947012680801728368453412511898214833061840593207999925914861147437172775590961864429038538036044372917920901477955515874667827839423934284921039793035016663689671993982388770276121107464667278667672531024583000281458905472417802844581894023365347884859881069456113169832521363450118618605256637768282911914962650680421804219666243987097956602779278718190490013281291054728762585198175600573970428128728004843715806947600331454660689313029334295614495527134693874900019066579958992524583794853232795458791635025434351607697221423673529269965794629214578773549342054
-e= 65537
-
-p = gmpy2.gcd(n, c)
-q = n // p
-assert p * q == n
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-m1 = m // p
-print(libnum.n2s(int(m1)))
Index: RSA_整理/整理中/低加密指数_e=2_rabin/rabin2.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=2_rabin/rabin2.py b/RSA_整理/整理中/低加密指数_e=2_rabin/rabin2.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=2_rabin/rabin2.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-
-
-p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-e=2
-n=p2*q2
-
-inv_p = gmpy2.invert(p2, q2)
-inv_q = gmpy2.invert(q2, p2)
-mp = pow(c3, (p2 + 1) // 4, p2)
-mq = pow(c3, (q2 + 1) // 4, q2)
-a = (inv_p * p2 * mq + inv_q * q2 * mp) % n
-b = n - int(a)
-c = (inv_p * p2 * mq - inv_q * q2 * mp) % n
-d = n - int(c)
-# 因为rabin 加密有四种结果，全部列出。
-aa = [a, b, c, d]
-for i in aa:
-    if gmpy2.is_prime(i):
-        print(i)
-    #print(libnum.n2s(int(i)))
Index: RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/题目.py b/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/题目.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-
-from Crypto.Util.number import *
-import random
-# from secret import flag
-flag=''
-table='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
-pad=100-len(flag)
-for i in range(pad):
-    flag+=random.choice(table).encode()
-e=343284449
-m=bytes_to_long(flag)
-assert m>(1<<512)
-assert m<(1<<1024)
-p=getPrime(512)
-q=getPrime(512)
-r=getPrime(512)
-print('p=',p)
-print('q=',q)
-print('r=',r)
-n1=p*q
-n2=q*r
-c1=pow(m,e,n1)
-c2=pow(m,e,n2)
-print('c1=',c1)
-print('c2=',c2)
-
-
-p= 11820891196647569262137841192985418014377132106496147254821784946481523526822939129065042819464351666077658751406165276121125571355594004514547517855730743
-q= 10450390015864176713581330969519712299844487112687677452105216477861582967322473997670559995588440097951786576039009337782247912476227937589298529580432797
-r= 9484954066160968219229920429258150817546418633451929876581842443665029377287119340232501682142185708534413073877473741393278935479791561681402673403009771
-
-c1= 69574855207460025252857869494766338442370688922127811393280455950372371842144946699073877876005649281006116543528211809466226185922844601714337317797534664683681334132261584497953105754257846471069875622054326463757746293958069752489458646460121725019594141157667480846709081917530190233900184428943585065316
-c2= 66183492015178047844987766781469734325646160179923242098082430373061510938987908656007752256556018402101435698352339429316390909525615464024332856855411414576031970267795270882896721069952171988506477519737923165566896609181813523905810373359029413963666924039857159685161563252396502381297700252749204993228
-
-# e是q-1的因子
Index: RSA_整理/整理中/P43 l=xp - yq/题目解析.txt
===================================================================
diff --git a/RSA_整理/整理中/P43 l=xp - yq/题目解析.txt b/RSA_整理/整理中/P43 l=xp - yq/题目解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P43 l=xp - yq/题目解析.txt	
+++ /dev/null	
@@ -1,7 +0,0 @@
-
-设：c1=x * p - y * q
-两边同时模y
-
-c1%y=x * p%y
-c1*x^-1%y=p%y
-p=c1*x^-1%y
Index: RSA_基础篇/P01-P20/P11 n分解3个素数/出题2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P11 n分解3个素数/出题2.py b/RSA_基础篇/P01-P20/P11 n分解3个素数/出题2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P11 n分解3个素数/出题2.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-r = libnum.generate_prime(512)
-z = libnum.generate_prime(512)
-n = p * q * r * z
-e = 65537
-c = pow(m, e, n)
-print("p=", p)
-print("q=", q)
-print("r=", r)
-print("z=", z)
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_整理/整理中/P83 AMM算法/3.AMM_sage  单个/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P83 AMM算法/3.AMM_sage  单个/题目.py b/RSA_整理/整理中/P83 AMM算法/3.AMM_sage  单个/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P83 AMM算法/3.AMM_sage  单个/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-from Crypto.Util.number import *
-from secret import flag
-m=bytes_to_long(flag)
-p=getPrime(512)
-q=getPrime(512)
-print('p=',p)
-print('q=',q)
-n=p*q
-e=65537
-c=pow(m,e,n)
-print('c=',c)
-#p= 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073
-#q= 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379
-#c= 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595
Index: RSA_基础篇/P01-P20/P08 dp泄露/1.常规/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/exp.py b/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/exp.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-
-n = 17954000555185130679232377513216924086370205717680723426279833171815673097846434355592747466782173529597978954062272371758852339605432963940809244445748900431763988392120156128524694217746804744076348205536430811607694098089294013508111154514184079159181563040241302764793111632189829652065825442796716027051750043654503172469553222784393034067341575558782690547449884992414106322578261286526556856377419622164651917718772498388922129465042492616904419638034789576380038341882418547113136903862482397767904921157094396562770484669239932933837196899640811033424030302285885080504355934919967693498648701839252087380477
-e = 65537
-c = 1808490145328726635638705291306162339133116115672167390186563455429486046847680827004544020052978814401354685508506555963361065725012891622174617670820924531959433674273579973778657669162210657120785539629874456938159379512635932223403818177582242406964621317531188027900758868453176575753681627336133481701182056262584118645398172089436811174776978418919803975809158758707062473122656821152108292060156091196577573172937093806159669057467094718771367509856968694209472630329096814023864642219783061245777457366202879949123915168571990229277326042767587009623951348541055835347386485900505749475571895673653225741649
-dp = 114993440308125678369350484461242628405806013372930792337329972720600942891053460367721272956155528263465552939386621554396883112994907299126303463171544968629898544811159986442249990975328659373544491636958873255689808151391606942912468529923159009459712396428051292828093059494024457367637991626193487727331
-
-for i in range(1, 65537):
-    p = (dp * e - 1) // i + 1
-    if n % p == 0:
-        q = n // p
-        break
-
-print(q)
-phi_n = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi_n)
-m = pow(c, d, n)
-print(m)
-flag = libnum.n2s(int(m)).decode()
-print(flag)
-
Index: RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素2/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素2/exp.py b/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素2/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素2/exp.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-import libnum
-import gmpy2
-
-e1e2= 83317
-n= 19361442710572745971265661179912428614335978862294499554478708154961900725571203060796104846289397242207304532314240136962004100859120350866177200389723065658762704195258332314791286248842309297348039111045266185355903400590470820183877252896166548216731371364979378507526744861441605219478410567943584909399458417880788827318597539692741384869777249157338164956516233081381729474311604082892186490173033244693551617094635430697205804969501877592642316320873084247185093376277647579480643486369145925195734181193015900482737320548696928588870712293186252013457131251209473809656777543374500592007808404407059561585875569527546497652518580045435210514546460508584320606314122520882426004609258608147903667923350952560862343978526661419457923377730038903725129920335146125419046956321000719022303404018007514471776998828154744785228693422230685108494515083105086516002742258455143048441346760686508352771381755359768486489070279892078844716848637514485979868052449468414483027672075237348001190373461535494802211938683204976566773050049547807712425194913096401165728862378611187510228222428679755307056276133497536735863204478321549958435946853973687386589497836951783399492540878952618631792625025126620608024559471293131768988077589502325651357976822933654550846615039529755326862460868499406888969184042128071
-c1= 8461455935702774839606732696628583481106108739457157757237961493721249315707058365854463354773540401038228236301572933195823206925383589280380438344346918293151928169930134045632956081184945062566817678757614816611860006425866597730747864519352309046720733870943424680296477704991108084039103348714387678260925701357278152801810444616098214964231942511332731906589339642434586792884729500618636404879133808745489823990051381479316035290316511507860259556699539853817794899071305575419968794233519130191693519669424965740754005557268523536259961342893331243822271702601491251166024629032785331163334845458532041066873062181204642511730061193181806412423310871852101503714865811232852678040552266896756835104015126426669170036333066668010437674021104622132437422087899276215087590613842963706972249810831528040008304175911799215946803926073839260039708714727246670180210772138254229999545871929350538204078637835690649108982156556159082202035891312400182426109033284706424624286874595070797624804888642649414098331802113837492380725023537502746076689560748513729573164798419260068335949704460969862627638288475890309143274515210188524564546972793051029662396980537597835874860939675476734819945549433268818379519178647303476509820821756282974287073312744339124424284365074314353072957540119217061097316369179812
-c2= 6204846642785521340470513546335239064256758077473460303136152226321426573866713276868303467627807818878464124001025948893472833684203082226317608116339642653526005250588488719287359040352790572959995584093188339849695217956472022875459556871491299322868787108334073007332501731796096022506406756118808831646084743403979543281704069120640233328839980099290857269846287187888156728145277024309531510105331797866833685076835273931526615042292719970926967658919153638762985362453791732734631621502983351581711188066449777097203043897589205329057225446193852593056040301734809364853181753118739604843784216536562612033307359103893806510482236157475021740603255590914121641809865052126419196638531405221094438510231726208366630512008162663744010330103156199459170979721924714894281792427651932643530734043790246173905509400532261288534889712214483873969552991657537356198890952147322594953541508366871552561029095676172024539741525694906063413062943730465813047155464168544196529490081901356676689826701155342513241655234549380041635792150618405682571311160853526719882812618473055821608217492122688669131559593093840370537049894579011917334477512297137182557102626033423909278319394496823138854073015927815382203590762482110896381565689852266596980436613904791614372199019839459027972129220041158226866818118745059
-
-def gm_def(c1,c2,e1,e2,n):
-    _, s1, s2 = gmpy2.gcdext(e1, e2)
-    m1 = (pow(c1, s1, n) * pow(c2, s2, n)) % n
-    k = 0
-    while k < 1000:
-        m11 = m1 + k * n
-        m, s = gmpy2.iroot(m11, x)
-        if s:
-            print(libnum.n2s(int(m)))
-            break
-        k += 1
-    return m1
-
-for e1 in range(2,e1e2):
-    if e1e2%e1==0:
-        e2=e1e2//e1
-        x=gmpy2.gcd(e1,e2)
-        gm_def(c1, c2, e1, e2, n)
-
Index: RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp.py b/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/exp.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-
-n= 803784422494351370167592813131170042963345555482165647967956492620962013217420982867541509298616048143427109418694118101975886429334668184599704528208350169952501368083389428121409963959588217864342810533458439012893022079292471592661309119780597567697815158389955245109531282084813514028430538452099738972947224500649814505038473612255356532480657940241873476885787144581357503919901873583698351869250700204237754589245567780940856354940496837340040687563379829
-e= 65537
-c= 722017731135335684812533874316187718743706632199941243431769554136754029281055669735578867827323998548169289719376740140160936003956566363167166824922752528441908326090817549756162297888394949582370013331882631781399593109816859055804911828681126759927831446042099755582145831437135202976121938918737684544485525593475533613090869714007561291215973309637975266660571055061682948001090881350474380455040376308867990063835790807929489677357608555376828089153279166
-h= 526035042407827638767080948166756275192234386036611413820164089459256208443375647999045361445094296471369786663502664905640284076732752058952339829192647660913173800383398192895762385668985425950849805263399350233938962124460176299634862731357603442085158082699690846052498238666332645910480343340312000475675630022786935637468414155542306718730229191424259198734396956525322408893309190588908494415608371989374765463898410083731743334569876949949741279177413314
-import libnum
-
-# p=libnum.gcd(e**e*h-1,n)
-p=libnum.gcd(pow(e,e,n)*h-1,n)
-print(p)
-q=n//p**2
-print(n==p*p*q)
-d=libnum.invmod(e,p-1)
-print(d)
-m=pow(c,d,p)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/扩展中国剩余定理求_d/exp1.py
===================================================================
diff --git a/RSA_整理/整理中/扩展中国剩余定理求_d/exp1.py b/RSA_整理/整理中/扩展中国剩余定理求_d/exp1.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展中国剩余定理求_d/exp1.py	
+++ /dev/null	
@@ -1,50 +0,0 @@
-
-p=12922128058767029848676385650461975663483632970994721128398090402671357430399910236576943902580268365115559040908171487273491136108931171215963673857907721
-q=10395910293559541454979782434227114401257890224810826672485874938639616819909368963527556812339196570118998080877100587760101646884011742783881592586607483
-r=8104533688439480164488403019957173637520526666352540480766865791142556044817828133446063428255474375204188144310967625626318466189746446739697284656837499
-dp=73360412924315743410612858109886169233122608813546859531995431159702281180116580962235297605024326120716590757069707814371806343766956894408106019058184354279568525768909190843389534908163730972765221403797428735591146943727032277163147380538250142612444372315262195455266292156566943804557623319253942627829
-dq=40011003982913118920477233564329052389422276107266243287367766124357736739027781899850422097218506350119257015460291153483339485727984512959771805645640899525080850525273304988145509506962755664208407488807873672040970416096459662677968243781070751482234692575943914243633982505045357475070019527351586080273
-dr=21504040939112983125383942214187695383459556831904800061168077060846983552476434854825475457749096404504088696171780970907072305495623953811379179449789142049817703543458498244186699984858401903729236362439659600561895931051597248170420055792553353578915848063216831827095100173180270649367917678965552672673
-c=220428832901130282093087304800127910055992783874826238869471313726515822196746908777026147887315019800546695346099376727742597231512404648514329911088048902389321230640565683145565701498095660019604419213310866468276943241155853029934366950674139215056682438149221374543291202295130547776549069333898123270448986380025937093195496539532193583979030254746589985556996040224572481200667498253900563663950531345601763949337787268884688982469744380006435119997310653
-
-
-n = 3  # 同余方程个数
-a = [dp,dq,dr]  # 余数
-m=[(q-1)*(r-1),(p-1)*(r-1),(p-1)*(q-1)] # 模数
-
-
-"""扩展欧几里得"""
-def exgcd(a, b):
-    if 0 == b:
-        return 1, 0, a
-    x, y, q = exgcd(b, a % b)
-    x, y = y, (x - a // b * y)
-    return x, y, q
-"""扩展中国剩余定理"""
-def CRT():
-    if n == 1:
-        if m[0] > a[0]:
-            return a[0];
-        else:
-            return -1;
-
-    for i in range(n):
-        if m[i] <= a[i]:
-            return -1;
-        x, y, d = exgcd(m[0], m[i])
-        if (a[i] - a[0]) % d != 0:
-            return -1;
-
-        t = m[i] // d;
-        x = (a[i] - a[0]) // d * x % t
-        a[0] = x * m[0] + a[0];
-        m[0] = m[0] * m[i] // d;
-        a[0] = (a[0] % m[0] + m[0]) % m[0]
-        # print(a[0])
-    return a[0];
-
-
-
-ans = CRT()
-
-print(ans)
Index: RSA_基础篇/P01-P20/P05 小e低加密指数攻击/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P05 小e低加密指数攻击/exp.py b/RSA_基础篇/P01-P20/P05 小e低加密指数攻击/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P05 小e低加密指数攻击/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-import gmpy2
-
-
-n= 1101676297168703265566511587913652821222614528632844563918598090813090976948138058144049294690727841463413972173051671908835164088465174349647584948964206244648736138253802417241570633968307801570794459668533128958442296813160786428069813867034205462528763830205245218089660432399549540588101288362866463
-e= 3
-c= 175676150266622974236396526711286850987631123485212632328509227849029911058091086706143340012942548868507757097027596460222082381606490997654543157611859508598203272345044220266344322516323997126214392011463091635444512796333373451321795475333496092463760390199602320265733668648810943598505902205569125
-
-
-def exp(n, e, c):
-    k = 0
-    while 1:
-        m1 = k * n + c
-        m, t = gmpy2.iroot(m1, e)
-        if t:
-            print(m)
-            print(k)
-            print(libnum.n2s(int(m)))
-            break
-        k += 1
-exp(n, e, c)
Index: RSA_整理/P00 基础环境/3.openssl 命令.md
===================================================================
diff --git a/RSA_整理/P00 基础环境/3.openssl 命令.md b/RSA_整理/P00 基础环境/3.openssl 命令.md
deleted file mode 100644
--- a/RSA_整理/P00 基础环境/3.openssl 命令.md	
+++ /dev/null	
@@ -1,13 +0,0 @@
-解析加密密钥：
-
-```
-openssl rsa -pubin -text -modulus -in pub.key
-```
-
-生成解密密钥：
-
-```
-python rsatool.py -f PEM -o key.key -p 1 -q 1 -e 1
-openssl rsautl -decrypt -inkey key.pem -in flag.enc -out flag
-openssl rsautl -decrypt -oaep -inkey key.pem -in flag.enc -out flag （OAEP方式）
-```
Index: RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/exp.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/exp.py b/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/exp.py	
+++ /dev/null	
@@ -1,32 +0,0 @@
-
-import sympy
-import gmpy2
-import libnum
-
-A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407
-B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596
-
-A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927
-B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026
-
-n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733
-
-e=0x1001
-c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428
-
-def wex(a,b):
-    t=a-2-b
-    tmp=1
-    k=2
-    for i in range(t):
-        tmp=tmp*libnum.invmod(a-k,a)%a
-        k+=1
-    print(sympy.nextprime(tmp))
-    return sympy.nextprime(tmp)
-p=wex(A1,B1)
-q=wex(A2,B2)
-r=n//(p*q)
-phi=(p-1)*(q-1)*(r-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
Index: RSA_基础篇/P41-P60/P45  威尔逊定理入门/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P45  威尔逊定理入门/题目.py b/RSA_基础篇/P41-P60/P45  威尔逊定理入门/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P45  威尔逊定理入门/题目.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-import libnum
-import uuid
-import gmpy2
-flag="flag{"+str(uuid.uuid4())+"}"
-
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=gmpy2.next_prime(p)
-n=p*q
-e=65537
-for i in range(1,p):
-    m=(m*i)%p
-
-c=pow(m,e,n)
-print("c=",c)
-print("n=",n)
-
-c= 110529037403457010976226680228015853681747082298049971277864723725003290263121993249901746108064910538219056566054434964752554464076788576969420195833066780032521421693370829430794829520809208371861674386624296250550029664837604012247019944404589941948639334516981017574704294281416080581914051559281376725552
-n= 118816369182219711551736875622148948376274930097622029542291351942110204065005093752267272235864774888160522170555189015695148555668006209122716634896476014952586332120668094812890443697140874554631953248467119041951362983074748376348829077644413780641030688747863975973112631445365138922148115802917498155841
Index: RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp1.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp1.py b/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp1.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/2.求c/exp1.py	
+++ /dev/null	
@@ -1,51 +0,0 @@
-
-
-p= 11820891196647569262137841192985418014377132106496147254821784946481523526822939129065042819464351666077658751406165276121125571355594004514547517855730743
-q= 10450390015864176713581330969519712299844487112687677452105216477861582967322473997670559995588440097951786576039009337782247912476227937589298529580432797
-r= 9484954066160968219229920429258150817546418633451929876581842443665029377287119340232501682142185708534413073877473741393278935479791561681402673403009771
-c1= 69574855207460025252857869494766338442370688922127811393280455950372371842144946699073877876005649281006116543528211809466226185922844601714337317797534664683681334132261584497953105754257846471069875622054326463757746293958069752489458646460121725019594141157667480846709081917530190233900184428943585065316
-c2= 66183492015178047844987766781469734325646160179923242098082430373061510938987908656007752256556018402101435698352339429316390909525615464024332856855411414576031970267795270882896721069952171988506477519737923165566896609181813523905810373359029413963666924039857159685161563252396502381297700252749204993228
-n1=p*q
-n2=r*q
-n =2   # 同余方程个数
-a = [c1,c2]  # 余数
-m=[n1,n2] # 模数
-
-"""扩展欧几里得"""
-def exgcd(a, b):
-    if 0 == b:
-        return 1, 0, a
-    x, y, q = exgcd(b, a % b)
-    x, y = y, (x - a // b * y)
-    return x, y, q
-
-
-"""扩展中国剩余定理"""
-def CRT():
-    if n == 1:
-        if m[0] > a[0]:
-            return a[0];
-        else:
-            return -1;
-
-    for i in range(n):
-        if m[i] <= a[i]:
-            return -1;
-
-        x, y, d = exgcd(m[0], m[i])
-        if (a[i] - a[0]) % d != 0:
-            return -1;
-
-        t = m[i] // d;
-        x = (a[i] - a[0]) // d * x % t
-        a[0] = x * m[0] + a[0];
-        m[0] = m[0] * m[i] // d;
-        a[0] = (a[0] % m[0] + m[0]) % m[0]
-        # print(a[0])
-    return a[0];
-
-ans = CRT()
-
-print(ans)
-
-c=1051311603595400257980451542641726560928968569258042231276292652088507209347204465348483100080899623360705698249443255030368048979130482813052608650445300611553758759647722097778171873596181791974080589234136090632966294575063306439633769753905530026312180583106024810580642209905594594119077985110929675466498207370604560182924468112540068499274911327513697378581931822685826876372554425845071592347470781982215295908151280216722253883169708944885906780090210923
\ No newline at end of file
Index: RSA_整理/整理中/P66 gcd(n,ad-bc)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P66 gcd(n,ad-bc)/exp.py b/RSA_整理/整理中/P66 gcd(n,ad-bc)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P66 gcd(n,ad-bc)/exp.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-import gmpy2
-from Crypto.Util.number import *
-
-c= 34007465638566836660852768374211870538357285529060206826620688555044780516477877596651414637089490522614456532732711803500304737160162560168303462221485961593760966240770414498297915175227814336224871400766371471776600674705757656616409870237891336752248110367865552469248343708419900511716030176178698949179
-n= 70043427687738872803871163276488213173780425282753969243938124727004843810522473265066937344440899712569316720945145873584064860810161865485251816597432836666987134938760506657782143983431621481190009008491725207321741725979791393566155990005404328775785526238494554357279069151540867533082875900530405903003
-a0= 8369195163678456889416121467476480674288621867182572824570660596055739410903686466334448920102666056798356927389728982948229326705483052970212882852055482
-a1= 8369195163678456889416121462308686152524805984209312455308229689034789710117101859597220211456125364647704791637845189120538925088375209397006380815921158
-b0= 25500181489306553053743739056022091355379036380919737553326529889338409847082228856006303427136881468093863020843230477979
-b1= 31448594528370020763962343185054872105044827103889010592635556324009793301024988530934510929565983517651356856506719032859
-e = (n-pow(a0,2))//pow(b0,2)
-p = gmpy2.gcd(a0*b1-a1*b0,n)
-q = n//p
-phi  = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-flag = long_to_bytes(m)
-print(flag)
Index: RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp.py b/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp.py	
+++ /dev/null	
@@ -1,32 +0,0 @@
-
-
-a = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169
-c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810
-e = 65537
-import gmpy2
-import libnum
-
-p1=libnum.nroot(a,2)
-while a%p1!=0:
-    p1=gmpy2.next_prime(p1)
-q=int(p1)
-p=a//q
-print(a==p*q)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,a)
-print(m)
-
-m1=m*libnum.invmod(-1,p)%p
-for i in range(p,q):
-    print(i)
-    m=m*i%a
-m2=m*libnum.invmod(-1,q)%q
-
-mm=libnum.solve_crt([m1,m2],[p,q])
-print(mm)
-print(libnum.n2s(int(mm)))
-
-
-
-
Index: RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py b/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-
-
-n=30183656394805107357196370521008780218925570049861387216169054600381560517999947182495011076202126709273160644370262874124968897163730207965220921744326193258358200657778320099962189812662073746049174190737733696870138306766952659451198803418491107784028230018858597385184003464461324726173514428396625540948387202029576333925489299994380848535683878295861054849479745468667103738387433149825519903102622708548565692424513329009043335422465827135431803716962258640474502935517125459339414944346181909028036411407296618452373689029356418425024260765592536962977787010290927682883045452686496078325690903591609011622649
-h1=7931354967841361677225525366492283823894590697656669456900404637225452955459348179528014507555386203547449783236442156583903338871101372231379416298673332475841552351685699019468753684327399291889812282583934998862651749254999550865157778659585029993856246293740166651157267243002539956928571725540194386430135556941941158115392325448899508409029275561616503138231793202722531305888967930689408754797831414396346372778070017194895510733987493231643773783381517911590791997520439013140032231243105419628779624880308940011265642047838378068375393042924607140918207395722101771037631402904373527746525020704973321077960
-h2=25062305644512626278872554723682407404832559793666087363222623557675770421081399157255725073992481546436446297869801169592204892169276487493822396167281356628851048304904314012479222859204326040757182928968731733798383263988650657055905914856184098798472993044182269108543644164055399204428716761331393401597324716686296821274763372210790827746803211415514983448406120655928961667116170309904869353511506605306453153870397660846835063923643054746025854226394115291053816754538318359343733736423501470671478388599730283824290134464908259553611786880318768864343694812103186674192588648465811660170572517267553070038503
-c=10566050200491898237861779349951184912833923661795629392708549602522205458471596364817182905986707189288385851923975592583132325630526948547284585859263336194822093938912144662726671172596366107238257782270698285219710310820716655379358362338786357841955558739297544011078781470192343051678062312416475601556385198608232848554523600840313604027144055153075238544724194720089578983488275239449599014873939408460792984830861989839765653149206345119917698514546823183643061389802526139765069463102068988065342441036929752116505115330236182894409200589686944842338651901005676000551266948519276949174935413951432934098553
-
-# h1=pow((p+q),e1,n)=(p^e1+q^e1)%n
-# h2=pow((p-q),e1,n)=(p^e1=q^e1)%n
-# #h1+h2
-# h1+h2=2*p^e1%n
-
-import libnum
-from tqdm import  trange
-p=libnum.gcd(h1+h2,n)
-q=n//p
-#print(n==p*q)
-phi=(p-1)*(q-1)
-
-for e in trange(1,100000000,2):
-    try:
-        if libnum.gcd(e,phi)==1:
-            d=libnum.invmod(e,phi)
-            m=pow(c,d,n)
-            flag=libnum.n2s(m)
-            if b"flag" in flag:
-                print(e)
-                print(flag)
-                break
-
-    except:
-        continue
-# 85837
-# b'flag{97065396-788c-5274-d5e0d9-ce1c33af3c}'
\ No newline at end of file
Index: RSA_整理/整理中/扩展中国剩余定理求_c/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/扩展中国剩余定理求_c/exp2.py b/RSA_整理/整理中/扩展中国剩余定理求_c/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展中国剩余定理求_c/exp2.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-
-
-c=1051311603595400257980451542641726560928968569258042231276292652088507209347204465348483100080899623360705698249443255030368048979130482813052608650445300611553758759647722097778171873596181791974080589234136090632966294575063306439633769753905530026312180583106024810580642209905594594119077985110929675466498207370604560182924468112540068499274911327513697378581931822685826876372554425845071592347470781982215295908151280216722253883169708944885906780090210923
-e=343284449
-p= 11820891196647569262137841192985418014377132106496147254821784946481523526822939129065042819464351666077658751406165276121125571355594004514547517855730743
-r= 9484954066160968219229920429258150817546418633451929876581842443665029377287119340232501682142185708534413073877473741393278935479791561681402673403009771
-import libnum
-
-phi=(p-1)*(r-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,p*r)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/P76 l=d+p+q/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P76 l=d+p+q/exp.py b/RSA_整理/整理中/P76 l=d+p+q/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P76 l=d+p+q/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-
-
-e = 65537
-c = 65194823373091792824101730983124740337276083358867621564067880339279446092377567969207237986613196892737474455781661885696122256698478429450971196633786693648866129636737262041654769618993094832127875251068775632567036646408374963058703320605733921797230106462440860984746880466416824674570639694481298708147
-n = 101929257180069933443442160085713121307068880188090652033345240568607589666231813199686824369361640378636124324844158355533056421197926269617986872835671463371353540696806173813019752742218460997272803573114119876536384486655117245296360474103378827486280279523273344156760793016731778663058274770626116861407
-l = 87007773233816810147344015772388866522443114032719766646343787373996588014373656496789294836431302130125588646180886383013958151442324020038131736683796464202667423644714259545194662934238144990354387370533656134036753530002005551694211595695927699196016268145816389892292091218491443784193805171731592693841
-
-import libnum
-m=pow(c,l-n-1,n)
-print(m)
-flag=libnum.n2s(m)
-print(flag)
Index: RSA_整理/整理中/P88 光滑数p-1/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P88 光滑数p-1/题目.py b/RSA_整理/整理中/P88 光滑数p-1/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P88 光滑数p-1/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-from random import choice
-from Crypto.Util.number import isPrime, sieve_base as primes
-import uuid
-flag="flag{"+str(uuid.uuid4())+"}"
-
-def getPrime(bits):
-    while True:
-      n = 2
-      while n.bit_length() < bits:
-          n *= choice(primes)	#primes为前10000个素数的列表
-      if isPrime(n + 1):
-          return n + 1
-
-e = 0x10001
-m = int.from_bytes(flag.encode(), 'big')
-p, q = [getPrime(2048) for _ in range(2)]
-n = p * q
-c = pow(m, e, n)
-
-
-print("n=",n)
-print("c=",c)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp1.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp1.py b/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp1.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/exp1.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-from sympy.ntheory.modular import *
-
-n = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169
-c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810
-e = 65537
-
-
-q_near = gmpy2.iroot(n,2)[0]
-while n%q_near!=0:
-    q_near=gmpy2.next_prime(q_near)
-q = q_near
-p = n//q
-print(f"p={p}")
-print(f"q={q}")
-
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-print(m)
-
-import libnum
-m1= m*gmpy2.invert(-1,p)%p
-print("m1",m1)
-m1=m*libnum.invmod(-1,p)%p
-print("m1=",m1)
-for i in range(p,q):
-    m = m*i%q
-m2 = m * gmpy2.invert(-1,q) %q
-print(m2)
-flag = crt([p,q],[m1,m2])[0]
-print(flag)
-print(long_to_bytes(flag))
Index: RSA_基础篇/P21-P40/P37 m大于n/题目1.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P37 m大于n/题目1.py b/RSA_基础篇/P21-P40/P37 m大于n/题目1.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P37 m大于n/题目1.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2 as gp
-import uuid
-flag="flag{"+str(uuid.uuid4())+"}"
-print(len(flag))
-e=0x10001
-m=bytes_to_long(flag.encode())
-p=getPrime(160)
-q=gp.next_prime(p)
-phi=(p-1)*(q-1)
-d=gp.invert(e,phi)
-n=p*q
-c=pow(m,e,n)
-print("q=",q)
-print("p=",p)
-print("m=",m)
-print('n=',n)
-print('c=',c)
-print('d=',d)
-
Index: RSA_整理/整理中/解方程_q=inverse(e, p)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/解方程_q=inverse(e, p)/exp.py b/RSA_整理/整理中/解方程_q=inverse(e, p)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_q=inverse(e, p)/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-n= 151913753330829779363367789673597253978048533620182497747132604072824540323836504426239804081241567027736270622449855295828160124814438423488754623643933533204599629980943193643551097211543531050709295786991507076525522113596966181359611779370941657496310723772521162794885147507996772774824707716432570452403
-c= 81337035006499494768796081417947319039576994033747417935302379695580101083380316241731843797604372408639889020709527188720865744673275465620672796534287478878369491626837235522013863942055110385349674739290041899890532139474221925394370465243005480529009377659505930236007519685951328899152586367092905739547
-e=65537
-import gmpy2
-import libnum
-for k in range(e,1,-1):
-    tmp=1+4*e*n*k
-    r,s=gmpy2.iroot(tmp,2)
-    if s:
-        p=(r-1)//(2*k)
-        break
-q=n//p
-print(q)
-print(gmpy2.is_prime(q))
-assert n==p*q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目.py b/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 65537
-n = p * q
-h = 20211102
-hc = pow(h + p * 1111, e, n)
-c = pow(m, e, n)
-print("hc=", hc)
-print("n=", n)
-print("c=", c)
-hc = 71505320953946158049530109094654497075489963071106175336722892393493112481336409391299522595724154571954223093317880494307263262649833222750675105885636892419350501821324979706283867758665536771783209816719106279467902518895579024290387800216711663670572861182058425925280993190282267615052256942516011995207
-n = 76856511192427852645963041043072791148703422665129663050712492700760489247788743818199589072069758934570218804936479267319288093436111548055922916898782764333246946326823653877357695179165138863843657328764265204547147092074499832221138997131011222722917338444675582832114206750168113207646100633238664244737
-c = 39246179387125192271554620313966311736032348078183121707012959204367908070472764506984235827179206718838172586811066682034907967943722841257765922283692526422653916506577810629430853963448057701574209912936660396486847365579797147723437378122880075493171892191049105237005801787649587080840600670585409293046
Index: RSA_基础篇/P21-P40/P32 l=d+p+q/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P32 l=d+p+q/exp.py b/RSA_基础篇/P21-P40/P32 l=d+p+q/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P32 l=d+p+q/exp.py	
+++ /dev/null	
@@ -1,10 +0,0 @@
-e = 65537
-c = 65194823373091792824101730983124740337276083358867621564067880339279446092377567969207237986613196892737474455781661885696122256698478429450971196633786693648866129636737262041654769618993094832127875251068775632567036646408374963058703320605733921797230106462440860984746880466416824674570639694481298708147
-n = 101929257180069933443442160085713121307068880188090652033345240568607589666231813199686824369361640378636124324844158355533056421197926269617986872835671463371353540696806173813019752742218460997272803573114119876536384486655117245296360474103378827486280279523273344156760793016731778663058274770626116861407
-l = 87007773233816810147344015772388866522443114032719766646343787373996588014373656496789294836431302130125588646180886383013958151442324020038131736683796464202667423644714259545194662934238144990354387370533656134036753530002005551694211595695927699196016268145816389892292091218491443784193805171731592693841
-
-import libnum
-m=pow(c,l-n-1,n)
-print(m)
-flag=libnum.n2s(m)
-print(flag)
Index: RSA_整理/整理中/Coppersmith_d低位攻击/出题脚本.py
===================================================================
diff --git a/RSA_整理/整理中/Coppersmith_d低位攻击/出题脚本.py b/RSA_整理/整理中/Coppersmith_d低位攻击/出题脚本.py
deleted file mode 100644
--- a/RSA_整理/整理中/Coppersmith_d低位攻击/出题脚本.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-while True:
-    p = libnum.generate_prime(512)
-    q = libnum.generate_prime(512)
-    n = p * q
-    phi_n = (p - 1) * (q - 1)
-    e = 3
-    if gmpy2.gcd(e, phi_n) == 1:
-        break
-d = gmpy2.invert(e, phi_n)
-d1 = d & ((1 << 486) - 1)
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print("d1=", d)
Index: RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/题目.py b/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/题目.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-#coding:utf-8
-import gmpy2
-from Crypto.Util.number import *
-
-p = getPrime(512)
-q = getPrime(512)
-r = getPrime(512)
-e = getPrime(32)
-print(e)
-n = p*q*r
-phi = (p-1)*(q-1)*(r-1)
-d = gmpy2.invert(e,phi)
-dp = d%((q-1)*(r-1))
-dq = d%((p-1)*(r-1))
-dr = d%((p-1)*(q-1))
-flag = 'flag{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}'
-m = bytes_to_long(flag.encode())
-c = pow(m,e,n)
-
-print(p)
-print(q)
-print(r)
-print(dp)
-print(dq)
-print(dr)
-print(c)
-
-p=12922128058767029848676385650461975663483632970994721128398090402671357430399910236576943902580268365115559040908171487273491136108931171215963673857907721
-q=10395910293559541454979782434227114401257890224810826672485874938639616819909368963527556812339196570118998080877100587760101646884011742783881592586607483
-r=8104533688439480164488403019957173637520526666352540480766865791142556044817828133446063428255474375204188144310967625626318466189746446739697284656837499
-dp=73360412924315743410612858109886169233122608813546859531995431159702281180116580962235297605024326120716590757069707814371806343766956894408106019058184354279568525768909190843389534908163730972765221403797428735591146943727032277163147380538250142612444372315262195455266292156566943804557623319253942627829
-dq=40011003982913118920477233564329052389422276107266243287367766124357736739027781899850422097218506350119257015460291153483339485727984512959771805645640899525080850525273304988145509506962755664208407488807873672040970416096459662677968243781070751482234692575943914243633982505045357475070019527351586080273
-dr=21504040939112983125383942214187695383459556831904800061168077060846983552476434854825475457749096404504088696171780970907072305495623953811379179449789142049817703543458498244186699984858401903729236362439659600561895931051597248170420055792553353578915848063216831827095100173180270649367917678965552672673
-c=220428832901130282093087304800127910055992783874826238869471313726515822196746908777026147887315019800546695346099376727742597231512404648514329911088048902389321230640565683145565701498095660019604419213310866468276943241155853029934366950674139215056682438149221374543291202295130547776549069333898123270448986380025937093195496539532193583979030254746589985556996040224572481200667498253900563663950531345601763949337787268884688982469744380006435119997310653
-
-
Index: RSA_整理/整理中/P66 gcd(n,ad-bc)/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/P66 gcd(n,ad-bc)/解析.txt b/RSA_整理/整理中/P66 gcd(n,ad-bc)/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P66 gcd(n,ad-bc)/解析.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-
-论文：《A Note on Euler’s Factoring Problem-Brillhart_Euler_factoring_2009》
-N=ma**2+nb**2
-N=mc**2+nd**2
-p=gcd(N,ad-bc)
\ No newline at end of file
Index: RSA_整理/整理中/解方程_(n + p) % (q-1)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/解方程_(n + p) % (q-1)/exp.py b/RSA_整理/整理中/解方程_(n + p) % (q-1)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_(n + p) % (q-1)/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-from sympy import *
-
-
-e = 65537
-c = 846622880180923496523897101093587388412673197929101816777894080453907929979417582433675846206418833989406082027835614960931951892393700870678469052366477889491688459558189367255658278968722099012534045477993924284003153851171132420751750724394405070269223797513951991873714156884423926582172189394011114952
-n = 159452716285492879108396025652299064897348745847754101475050126796260046052685162344131542880739092630022413124977374334652652450809186959288635651980201026825896903174847709657312399801033678426271413442323084354665643010763178857967804623680894444913369256168333223214048037661178587978535722147091129404833
-leak = 2669103705669857828725305123419482758456336465207378766363532584323475128597302561377245054918781031448710846825859151788151496659511563529987056456136018
-
-p=Symbol('p')
-q=Symbol('q')
-
-x=solve([2*(p-q+1)-leak, p*q-n],[p, q])
-p=int(x[1][0])
-q=int(x[1][1])
-# print(result)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,int(d),n)
-flag=libnum.n2s(m)
-print(flag)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/题目.py b/RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/题目.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-dp = d % (p - 1)
-c = pow(m, e, n)
-print("e=", e)
-print("c=", c)
-print("dp=", dp)
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/题目.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/题目.py	
+++ /dev/null	
@@ -1,32 +0,0 @@
-from gmpy2 import *
-from Crypto.Util.number import bytes_to_long, getPrime, sieve_base
-import random
-from flag import flag
-
-p = getPrime(512)
-q = getPrime(512)
-n = p*q
-e = 65537
-c = powmod(bytes_to_long(flag), e, n)
-print("c =", c)
-
-p1 = getPrime(512)
-assert p< p1
-e = 2
-print("c2 = ", powmod(p, 2, p1))
-print("p1 =", p1)
-
-p2 = getPrime(512)
-q2 = getPrime(512)
-assert p2%4 == q2%4 == 3
-print("c3 = ", powmod(q, 2, p2*q2))
-print("p2 = ", p2)
-print("q2 = ", q2)
-
-# c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-# c2 =  8943014059616554864780402232625215323717650137702921347505099596041241060991211014413068279308600979202066026580321911322396296877730441259506201930904989
-# p1 = 9332664074116371272320347910722305705338764655969305966836353509444565128652866496870138156351793824473079367512299950127043084761943406224989567423866071
-# c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-# p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-# q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-
Index: RSA_整理/整理中/e和phi不互素_e=3n/题目1.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_e=3n/题目1.py b/RSA_整理/整理中/e和phi不互素_e=3n/题目1.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_e=3n/题目1.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import random
-from Crypto.Util.number import *
-import gmpy2
-# from flag import flag
-
-flag=""
-flag = bytes_to_long(flag)
-p = getPrime(512)
-q = getPrime(512)
-r = getPrime(512)
-N = p*p*p*q*q*r
-E = random.getrandbits(3) * N
-assert E != 0
-c = gmpy2.powmod(flag, E, N)
-print(c)
-print(N)
-print(p)
-print(r)
-# 254405107303005845049072747258149485455665434531849341949389151702896351704377285067476806399735915847551051984934926645265066676195182212668342809240170275111601925685425108739633735306028738440813976431594863569098420495195211247259496523691182750966814434291138671594822376699489067358139495566395880145059037908529964205911131567968259107857590036018068978645060903255984751462867095474972084318246942230515795372922732450012495738566643657477922873319803490046893484493433788181603654210794341892738158118219924980457355211094042834795257379632330516037706451375827720587904837405865838650441538283621256535491641274818330647441525602168055479178687963531914961778234475318884588150397234095722213462400828744953497197126537474009027706337497767417837993861139340860874583027430907228716660953102425009174890588920766879848601641875277580421221804043645286722094547226197336752873572741091909840169196029400597100303993
-# 821637946044802094902953070074543102306869884873579423162145698218212560752410698552506108846314463135908371234866705393800979683814845596389525129326843295858831422249359573708068647304839244720782685985712635619803869885580152819572638671856305962843339690425926129690760888646694946355455239998544856723512643532949252060312278317964664482052587982507958159258844472388626094774180039916713900974760162202618717715095611085672884887397115862509389558231090407267917488769658024219676982762849860539850223529342350530344977168605879645515110890101177408181561604973969678649331052536135175711781614723243018625804914041552004680786359005886756891564089784004207698042480302197023219264076080698310436288830578669279862026461034180820755901345813488788532773026518857742317030969388255891451584375641479739761793484573965281435630150744924011181628797817182465011004325359576146400420432678566110402359833633223404347714023
-#9311389858490364943720442507785055171284652087229819685825097201889131032147259180480486964464071289391134460834678366517191750266970473336556845313099299
-#7574044323095532570708874898079912819078129425978705352911750180288319220089479831579074114970296032516798538410455385107525890661740100367688530443421677
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P08 dp泄露/1.常规/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/出题.py b/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/1.常规/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-print("d=",d)
-dp = d % (p - 1)
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print("dp=", dp)
Index: RSA_收集篇/1.3tefanie博客/19.ab与共模/exp.py
===================================================================
diff --git a/RSA_收集篇/1.3tefanie博客/19.ab与共模/exp.py b/RSA_收集篇/1.3tefanie博客/19.ab与共模/exp.py
deleted file mode 100644
--- a/RSA_收集篇/1.3tefanie博客/19.ab与共模/exp.py	
+++ /dev/null	
@@ -1,39 +0,0 @@
-
-
-n = 16125407552864408038451978971181995868587415471360339980312161114604643561448189461178314426572196867330062460236485889607095216773610462673103525772850249723607127265156082437903554965291175082962639383670937777311212896542972880424526079735786844389686957083365598937203322023931600269428448046149266341128554306213612397973685363189571686506630309830089220474201802073858959449101463678487317186076440791650250365012789827421324921778250883488990582944368562892797416344251060566529139850257746842799863322714616986446835293581697909698285176760388107157669554377276259762618665488257388491160075176338147719827037
-a = 13322099359978468117372945784425510444699489610016328757147661948295406516253823721585011191447575070678806499049706999293540250271665120018677590850034030368730195727460200565297326051740643004879691301619699301106930837198015487978219038035197723076156409255613823021037443587984496717728543374662454371480847535762439189824812004916125039891869564141181736162482872749048932562058201189900746478873842107591299649081305019213582364534953875369121945643746097376620917802772688252466567153568522092062992030417712736678853318751806058050273319844033309624611135341470435429322414596904369077559157148448414839032363
-b = 10275112473052097822163214291710245927601932098450526023436146936515575568966157279003404407528918111137316033319928861357294023493650299285411997308906967017629349471597059845459569991332848036825641333607579647087347485564553165670865364947248868251173085509024531668592291055640081009491476771331141299698791088908862211221687025549332282038419404819610705192095183951267650322294156121830068680857085069554177406709624092077033969271498007410828074096659664006111360389535517799171965089132885207983699725930677229877112464611768708080016125996142926911506613455696889598916644316886658721740850065556243938007810
-hint1 = 5646585199324712910174870876537963922935541552960135665854448183261083672983331653471842641925332927782315514511532766879190801929980994592200158530247219526312018092215417868738295218479822713259089033062819804918266548266840411490391265219709570414166619339434539050638762944531192598576491596621743816843125895668542438923918478344982739955475060988594676093550481119457143084943131533380243144975602778461714997734422024740849870491507544447233405634629786945527801001275734833662623467945946282795996306293408310273736674209426457392716416888243874745568105752845915237400340094943662551705685040442624941385833
-hint2 = 14585520416190000580445268935877639341764643969476248446269709488912338827970488844346831212422329420900792189527752187774994153342996351962929221182898317644166070626979324794061661833397604017568609862262727324814815424928736663001245135821828306087205636823484794573005890510152188674905462762148100329985991698959636488617249906898501964648111982813010371107696317126789702686935854736324220969771123819040020121221332632913284083499130218851636149172445983987305390603339306926120007456352189098000654123268951023801063278397184055390984864816637614344524008267690049801207931569396692120561972519603849989128993
-hint3 = 62093942844955894809744369157790919272709918861758380679821577778048849347738275395666159786314235217854818169109692941511405178089534902688354311428283671061156522101189015915319595816373429513381246644721630263218045931797340921607548704947248385584064891710829013112219974267785184786002337877737639709838592212626216662132226423917011307673560256826430488539866716857680736031883178590790995624532262186067634107387809349232152735759985335934241188954392212538014367792568155050961352578224455757803682195904635225691590570030418963654743371040135500179324783700281415394891744127799547005015135086532660545095391079521112740890332419993624820181300060863161311031709022851421455500566323115875683812425673042153124072114571960643827025713430499560735327945430769108097870643289355930786864376038045754477540741831426313486186208377194724677735876320331562117490978784291302590568890413248378029250309728695855535870140308467228980587481032478718831718081368010375598581706830265936563271354286383793280590954702836704366205681837777194310753890918642427863999918174783991318434802104950572826848043286819209577713010622615357988184856985035869968426847979577245836140860190327001050885833097619703928776547085778778592553120373
-
-
-# c2=hint3//n
-#
-# hint1*1024 = (a * c1*1024  + 1023 * x*1024) % n
-# hint2*1023=  (b * c1*1023  + 1024 * x*1023) % n
-# #h1-h2
-# h1*1024-h2*1023 =(a*c1*1024-b*c1*1023)%n
-# (h1*1024-h2*1023)*(a*1024-a*1023)^-1 =c1%n
-
-c2=hint3//n
-import libnum
-import gmpy2
-
-tmp1=libnum.invmod(a*1024-b*1023,n)
-tmp2=hint1*1024-hint2*1023
-c1=pow(tmp2*tmp1,1,n)
-
-
-#e1 = randint(1, 65538)
-e2 = 9647291
-
-for e1 in range(65538,1,-1):
-    s1, s2, s = libnum.xgcd(e1, e2)
-    m = (pow(c1, s1, n) * pow(c2, s2, n) % n)
-    flag=libnum.n2s(int(m))
-    if b"flag" in flag:
-        print(flag)
-        break
-
-
Index: RSA_基础篇/P41-P60/P49.p^5-p^4/exp1.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P49.p^5-p^4/exp1.py b/RSA_基础篇/P41-P60/P49.p^5-p^4/exp1.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P49.p^5-p^4/exp1.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2
-from sympy import *
-
-n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943
-e = 65537
-c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552
-h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446
-p,q = symbols("p q")
-f1=p*q-n
-f2=p**5-q**4-h
-result = nonlinsolve([f1,f2],[p,q])
-print(result)
-p = 10543357481374908938696626650832667304979816176891429562773232136754485382413647547320866232418359800743787286242710171986152592431595912519025867918658127
-q = 7230753434414569972828808651891325142186523078619542872286840414394373161212272545789342965212718184298307353595004152854764254216044770456139231711296409
-
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-print(long_to_bytes(m))
Index: RSA_整理/整理中/N分解_N是p的r次方/出题2.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N是p的r次方/出题2.py b/RSA_整理/整理中/N分解_N是p的r次方/出题2.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N是p的r次方/出题2.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p ** 3 * q
-e = 65537
-c = pow(m, e, n)
-print("q=", q)
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_收集篇/1.3tefanie博客/P21 Mypow/题目.py
===================================================================
diff --git a/RSA_收集篇/1.3tefanie博客/P21 Mypow/题目.py b/RSA_收集篇/1.3tefanie博客/P21 Mypow/题目.py
deleted file mode 100644
--- a/RSA_收集篇/1.3tefanie博客/P21 Mypow/题目.py	
+++ /dev/null	
@@ -1,43 +0,0 @@
-+from Crypto.Util.number import *
-from gmpy2 import *
-import os
-
-flag = b'xxx'
-def Mypow(b, e, mod):
-    a = 1
-    while e:
-        e >>= 1
-        b = (b*b)%mod
-        if e&1:
-            a = (a*b)%mod
-    return a
-
-def Genp(bit_length):
-    coeff = 2 ** 5 * 3 * 7
-    while True:
-        tmp_prime = getRandomNBitInteger(bit_length - 10)
-        p = coeff * tmp_prime + 1
-        if is_prime(p):
-            break
-    return p
-
-def Genkeys(bit_length):
-    p,q = Genp(bit_length),Genp(bit_length)
-    n = p * q
-    hint = (2 * p + 7 * q) % n
-    return n, hint
-
-if __name__ == '__main__':
-    e = next_prime(666)
-    n, hint = Genkeys(512)
-    m = bytes_to_long(os.urandom(30) + flag)
-    ct = Mypow(m,e,n)
-    print(f'n = {n}')
-    print(f'hint = {hint}')
-    print(f'ct = {ct}')
-
-    '''
-    n = 36443283250594259606482132779262570582448178589602577809591307671554949253094255209079689901493052116793388954529442162972106210862341856282788030374324677114528044629385805693771773377070021111949953333360526159026822968061585876873187059674130307295006486032106471182393880915860569773206853864515489855553
-    hint = 57792516722001523643789088224096258172899052039145876393373730235406451592173971020702024058282699663364267742428240581839287357212741266617791207580236457
-    ct = 24482128269957355675512496312977308128712253968496848873519792376434347925427116612997489113223781321628516365811583310346553402215907938918891908853234881284620764982626375301219763593402089309909155204943747718536894186749932544428588048770663458669109073657836937287831725958017345747881678942488157429000
-    '''
Index: RSA_整理/整理中/P81 p^5-p^4/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P81 p^5-p^4/题目.py b/RSA_整理/整理中/P81 p^5-p^4/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P81 p^5-p^4/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-from Crypto.Util.number import getPrime, bytes_to_long
-from flag import flag
-
-m = bytes_to_long(flag)
-p = getPrime(512)
-q = getPrime(512)
-n = p*q
-e = 0x10001
-c = pow(m, e, n)
-hint = p**5 - q**4
-
-print(f"n = {n}")
-print(f"e = {e}")
-print(f"c = {c}")
-print(f"h = {hint}")
-print(f"f = {flag}")
-"""
-n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943      
-e = 65537
-c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552       
-h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446
-"""
Index: RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/出题2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/出题2.py b/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/出题2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/出题2.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = libnum.generate_prime(128)
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-
-dp = d % (p - 1)
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print("dp=", dp)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/题目.py b/RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/题目.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-from Crypto.Util.number import getPrime, bytes_to_long
-import uuid
-import libnum
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-e = 997
-p = 169192804045017094881483391290948160084538928031716323749363864952453968973507689162051165395748104110078160856791051809212190939432475142974911541618441458487669050818296365973889691415623806933502603345031427784795571665740530721508383685794846991682950112717404480456329219127191697671498037366841158723543
-q = 107516396467746261711633898678341416690878446946218041251896502835689317784482747676107795221812916591321630759086326505565275611515776242892889358779953138176525964380991025435521861396436904104071935067377647496422254521013295763929078451759522826104921925202219553793049032407587608850233803508977340633609
-
-
-c = pow(m, e, p*q)
-print("c = %d" % c)
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/推理.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/推理.txt b/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/推理.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/推理.txt	
+++ /dev/null	
@@ -1,18 +0,0 @@
- c1, c2 = pow(m1, p, n), pow(m1, q, n)
-
-根据费马小定理可以得到
-k1p+m=c1
-k2q+m=c2
-
-重要推理
-c1*c2=（k1p+m）*（k2q+m）
-c1*c2=k1p*k2*q+(k1p+k2q)*m+m^2
-
-(c1+c2)m=2m^2+(k1p+k2q)*m
-
-
-m^2-(c1+c2)m+c1*c2
-m^2-2m^2-(k1p+k2q)*m+k1p*k2*q+(k1p+k2q)*m+m^2
-k1p*k2*q
-
-所以m^2-(c1+c2)m+c1*c2 =0 mod n
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P20 AMM算法/2.AMM_sage pq/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P20 AMM算法/2.AMM_sage pq/题目.py b/RSA_基础篇/P01-P20/P20 AMM算法/2.AMM_sage pq/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P20 AMM算法/2.AMM_sage pq/题目.py	
+++ /dev/null	
@@ -1,5 +0,0 @@
-c = 15433214846771804225704093824935372144929516863829752998270111032551363583267576397009018518790803908369965458162930857063271509296349091229352855725285388975497906340053281554202527432848881160125418406408621879995822551367228501163128699032015069585502994319524445505522625561831240862136447585120010288772692097621553249775117843166714346924868089146429002417223863834435968726551668931140147337199939823985783939085842479154589529244209712172799274024573845157268545992888944742377166586536479490962335287124809557709167220756920767331929168230518135523463578566851417486746667008938122693256033127001185017237773
-p = 0xa892eb59b175bcf896be2176598f278437fe10ef032279f06e1092143acfb3c16b31811cca5286699595c2720c652ee64f8adc92c8b16a5601dd981d6f839ce9c0513db30de88c2ec6cae1a726acbd235ea946631bde633707d766287a2f075e9aace1606bd8b4f52d4f5b87dfb81f14fbc5338004575e9430257e180a169eff
-q = 0xe3d47225b77e56129dc3fed716181845f89fa15b2eb35453ffdc0f05cdf57c0d90410911d209818e886b202bc4893ebe85a07ef670122f0e70092de1b7963c3b24a58c6a9ec9ed677db3473b1882d10d550e45c18fd57b85a70a5401a074d36760e85c7e6258f0ab08fa69cd433709910fad6e145f7b85f589e83d61d3baf6ad
-n = p * q
-e = 0x3
Index: RSA_整理/整理中/m大于n/exp.py
===================================================================
diff --git a/RSA_整理/整理中/m大于n/exp.py b/RSA_整理/整理中/m大于n/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/m大于n/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-
-n= 1938198674432811161450690669878250944830265839396906617662062291196152960227589796372087441130963
-c= 90170164274936424192415483102025065297184726282389841586708984518420677588910796600189918035116
-e=0x10001
-import libnum
-import gmpy2
-p1,s=gmpy2.iroot(n,2)
-p=gmpy2.next_prime(p1)
-q=n//p
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m1=pow(c,d,n)
-print(m1)
-for k in range(100000,1,-1):
-    m=m1+k*n
-    flag=libnum.n2s(int(m))
-    if  b"flag" in flag:
-        print(flag)
-        exit()
\ No newline at end of file
Index: RSA_整理/0.sage/P56.Math_Rsa/题目.py
===================================================================
diff --git a/RSA_整理/0.sage/P56.Math_Rsa/题目.py b/RSA_整理/0.sage/P56.Math_Rsa/题目.py
deleted file mode 100644
--- a/RSA_整理/0.sage/P56.Math_Rsa/题目.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-from Crypto.Util.number import *
-from shin import flag
-
-
-m=bytes_to_long(flag)
-r=getPrime(1024)
-assert r%4==3
-p=getPrime(1024)
-assert pow(p,(r-1)//2,r)==1
-q=getPrime(1024)
-e=65537
-n=p*q
-a=pow(p,2,r)
-c=pow(m,e,n)
-print(f"n = {n}")
-print(f"r = {r}")
-print(f"a = {a}")
-print(f"c = {c}")
-
-n = 14859096721972571275113983218934367817755893152876205380485481243331724183921836088288081702352994668073737901001999266644597320501510110156000004121260529706467596723314403262665291609405901413014268847623323618322794733633701355018297180967414569196496398340411723555826597629318524966741762029358820546567319749619243298957600716201084388836601266780686983787343862081546627427588380349419143512429889606408316907950943872684371787773262968532322073585449855893701828146080616188277162144464353498105939650706920663343245426376506714689749161228876988380824497513873436735960950355105802057279581583149036118078489
-r = 145491538843334216714386412684012043545621410855800637571278502175614814648745218194962227539529331856802087217944496965842507972546292280972112841086902373612910345469921148426463042254195665018427080500677258981687116985855921771781242636077989465778056018747012467840003841693555272437071000936268768887299
-a = 55964525692779548127584763434439890529728374088765597880759713360575037841170692647451851107865577004136603179246290669488558901413896713187831298964947047118465139235438896930729550228171700578741565927677764309135314910544565108363708736408337172674125506890098872891915897539306377840936658277631020650625
-c = 12162333845365222333317364738458290101496436746496440837075952494841057738832092422679700884737328562151621948812616422038905426346860411550178061478808128855882459082137077477841624706988356642870940724988156263550796637806555269282505420720558849717265491643392140727605508756229066139493821648882251876933345101043468528015921111395602873356915520599085461538265894970248065772191748271175288506787110428723281590819815819036931155215189564342305674107662339977581410206210870725691314524812137801739246685784657364132180368529788767503223017329025740936590291109954677092128550252945936759891497673970553062223608
-
Index: RSA_整理/整理中/低加密指数_e=3/exp.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=3/exp.py b/RSA_整理/整理中/低加密指数_e=3/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=3/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-import gmpy2
-
-
-n= 1101676297168703265566511587913652821222614528632844563918598090813090976948138058144049294690727841463413972173051671908835164088465174349647584948964206244648736138253802417241570633968307801570794459668533128958442296813160786428069813867034205462528763830205245218089660432399549540588101288362866463
-e= 3
-c= 175676150266622974236396526711286850987631123485212632328509227849029911058091086706143340012942548868507757097027596460222082381606490997654543157611859508598203272345044220266344322516323997126214392011463091635444512796333373451321795475333496092463760390199602320265733668648810943598505902205569125
-
-
-def exp(n, e, c):
-    k = 0
-    while 1:
-        m1 = k * n + c
-        m, t = gmpy2.iroot(m1, e)
-        if t:
-            print(m)
-            print(k)
-            print(libnum.n2s(int(m)))
-            break
-        k += 1
-exp(n, e, c)
Index: RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/exp.py b/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/exp.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-h = 20211102
-hc= 106384684387258240722531049098438750959834432634546796126093158629033068982619149236486154320894299499989216137697597957199573714263608748031683910580852759718095289315075649033988817167708990536622109395188323875444478758847069088124040303363168928631775675927699963594399331727997914824818623771580504084965
-n= 119627119275863691775973223113889402886135310001304749817770797865393950276025694446895218068455271703211303783447183872962749202354285630879340265007787249789610239344043683675346554870710945336400432577282610068040662508411848360531439899524711843106146252725115487464478218778778258617580897992802812415013
-c= 63920671180034615728642357559640458517849002484677022618600958138002092284285653070023384124999886527636847808059927520027933499119626169362599465475988804836470570686155217116741922261621127296802099426199708590959495914836791184310591071529265191193079337973831381110449202604951001361667744959385828228605
-e = 65537
-import libnum
-p=libnum.gcd(hc-pow(h,e,n),n)
-q=n//p
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
-
Index: RSA_基础篇/P41-P60/P51.strange_rsa1/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P51.strange_rsa1/解析.txt b/RSA_基础篇/P41-P60/P51.strange_rsa1/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P51.strange_rsa1/解析.txt	
+++ /dev/null	
@@ -1,6 +0,0 @@
-
-
-由代码可知，gift=p/q，但是是一个小数。
-因为n=p*q，可以得到n*gift=p*q*p/q=p**p,直接在Python中开方的话由于gift是小数，会导致精度不够，
-但是sage中使用sqrt()进行开平方的话精度是满足。
-所以sqrt(n*gift)开方得到p，再对其进行整型转换p=int(p)，进而得到q=n//p,接下来就是普通RSA解密。
Index: RSA_整理/整理中/P55 p^2+q^2且e值较小/rsa42.py
===================================================================
diff --git a/RSA_整理/整理中/P55 p^2+q^2且e值较小/rsa42.py b/RSA_整理/整理中/P55 p^2+q^2且e值较小/rsa42.py
deleted file mode 100644
--- a/RSA_整理/整理中/P55 p^2+q^2且e值较小/rsa42.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(200)
-a = p**2+q**2
-
-e1=libnum.generate_prime(16)
-e2=gmpy2.next_prime(e1)
-n=p*q
-c1=pow(m,e1,n)
-c2=pow(m**3,e2,3*n)
-
-print("a=",a)
-print("c1=",c1)
-print("c2=",c2)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P09 dpdq/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P09 dpdq/exp.py b/RSA_基础篇/P01-P20/P09 dpdq/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P09 dpdq/exp.py	
+++ /dev/null	
@@ -1,25 +0,0 @@
-import gmpy2
-import libnum
-
-p = 112454994630978850005784651276022327545786198205744597431888680937657203192943
-q = 111081771780978300442208201256251933100607227308819156491182881723714968913833
-c = 7847140580627012782899798457736961376953768684667159008470556786390887805253326211691923724846808704462396746105331991924048819814322540306282164012066426
-dp = 99016059099144522019375365089687785694029213535292918424815544402513220169503
-dq = 79504900574184798493105575420403885224379864982754477219462523963780735261625
-
-
-def decrypt(dp, dq, p, q, c):
-    InvQ = gmpy2.invert(q, p)
-    mp = pow(c, dp, p)
-    mq = pow(c, dq, q)
-    m = (((mp - mq) * InvQ) % p) * q + mq
-    print(mp - mq)
-    print(libnum.n2s(int(m)).decode())
-
-
-decrypt(dp, dq, p, q, c)
-#
-# m=pow(c,dp,p)
-# m=pow(c,dq,q)
-# #前提就是 m<p,m<q
-# print(libnum.n2s(m))
Index: RSA_整理/整理中/e和phi不互素_e=3n/exp.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_e=3n/exp.py b/RSA_整理/整理中/e和phi不互素_e=3n/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_e=3n/exp.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-
-p=9311389858490364943720442507785055171284652087229819685825097201889131032147259180480486964464071289391134460834678366517191750266970473336556845313099299
-q=11591898166184703407170679039468830396172686422497264355129193372385309176446185445291532443964976728310025509569413731127733013564906117798148077662926901
-r=7574044323095532570708874898079912819078129425978705352911750180288319220089479831579074114970296032516798538410455385107525890661740100367688530443421677
-c = 254405107303005845049072747258149485455665434531849341949389151702896351704377285067476806399735915847551051984934926645265066676195182212668342809240170275111601925685425108739633735306028738440813976431594863569098420495195211247259496523691182750966814434291138671594822376699489067358139495566395880145059037908529964205911131567968259107857590036018068978645060903255984751462867095474972084318246942230515795372922732450012495738566643657477922873319803490046893484493433788181603654210794341892738158118219924980457355211094042834795257379632330516037706451375827720587904837405865838650441538283621256535491641274818330647441525602168055479178687963531914961778234475318884588150397234095722213462400828744953497197126537474009027706337497767417837993861139340860874583027430907228716660953102425009174890588920766879848601641875277580421221804043645286722094547226197336752873572741091909840169196029400597100303993
-
-n = p*p*p*q*q*r
-# phi =(p*p*(q-1))*(p*(p-1))*(r-1) 无逆元
-
-# 可以换成phi(p*q*r)和n的逆元，那么他们就在模p*q*r下成立
-
-phi_qpr = (p-1)*(q-1)*(r-1)
-d= libnum.invmod(n,phi_qpr)
-
-for i in range(1,8,1):
-    m = pow(c,d,q*p*r)
-    flag = libnum.n2s(libnum.nroot(m,i))
-    if b'flag' in flag:
-        print(i)
-        print(flag.decode())
-# flag{th1s-i5-7he-fla9}
-
Index: RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/题目.py b/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/题目.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-n=p*q
-p1=libnum.invmod(p,q)
-q1=libnum.invmod(q,p)
-phi=(p-1)*(q-1)
-print(phi)
-d=libnum.invmod(e,phi)
-
-c=pow(m,e,n)
-print("p1=",p1)
-print("q1=",q1)
-print("d=",d)
-print("e=",e)
-print("c=",c)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P54.sage_euler_phi/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P54.sage_euler_phi/题目.py b/RSA_基础篇/P41-P60/P54.sage_euler_phi/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P54.sage_euler_phi/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-from Crypto.Util.number import getPrime, bytes_to_long
-import uuid
-import libnum
-flag="flag{"+str(uuid.uuid4())+"}"
-def prod(lst):
-	ret = 1
-	for num in lst:
-		ret *= num
-	return ret
-m = libnum.s2n(flag)
-primes = [getPrime(32) for _ in range(128)]
-n = prod(primes)
-e = 65537
-print(n)
-print(pow(m, e, n))
Index: RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/解析.txt b/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/解析.txt	
+++ /dev/null	
@@ -1,34 +0,0 @@
-费马小定理
-p是素数
-a^p-1%p=1
-a^p%p=a%p
-
-k1 =pow(g,a1*(p-1),n)
-k1 =g^(a1*(p-1))%n
-k1 =g^(a1*(p-1))+kn
-#两边同时模上p
-k1%p=g^(a1*(p-1))%p+kn%p
-k1%p=g^(a1*(p-1))%p
-k1%p=(g^a1)^(p-1)%p
-#根据费马小定理
-k1%p=1
-k1-1=kp
-#利用公约数的原理
-p=gcd(k1-1,n)
-q=n//p
-
-
-c1 = (pow(k1,b1,n)*flag)%n
-c1=(k1^b1%n*flag)%n
-c1=(k1^b1%n*flag%n)%n
-c1=(k1^b1*flag)%n
-c1=(k1^b1*flag)+kn
-#两边同时模上p
-c1%p=(k1^b1*flag)%p
-c1%p=(k1^b1%p*flag%p)%p
-#k1%p=1
-c1%p=((k1%p)^b1)%p*flag%p)%p
-c1%p=(1^b1)%p*flag%p)%p
-c1%p=(1*flag%p)%p
-c1%p=flag%p
-c1%p=flag
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P59. 费马小定理/exp2.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P59. 费马小定理/exp2.py b/RSA_基础篇/P41-P60/P59. 费马小定理/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P59. 费马小定理/exp2.py	
+++ /dev/null	
@@ -1,11 +0,0 @@
-
-import libnum
-
-
-n = 9858036118742475059433629759400140149605427966433887001108914046633590983713890376353399251885596714047941627222518567515364827340623251995233155278723954926352575221234142199002389819918370754455018819109203109519495493316781422680537687252828642561153832774006286448224016306003631037545643746379044035822029246823483754854602215035869280453855199171915302879406862793807947285344105991067005185493038370882005106069286893165426035453262949739088328689761676541415552066845538243916687080015277379248062286846119847500455125785281216888979581104100416760176854106890525904804003871967844912776926419778292365918733
-k1 = 4961356980843219227031667558158760111429474781353239042846946454889308337426649950562701556812878479419482114480334396560017050901408543482904510839046375272618911899662922000275482705215097956326853000314956770940510205507508883917322367747195211326932972446951696070952604655668087834669239815290687449340666091764203568518066586476150861542456340936303824392273004883320273039066213750777751436497551151274574369325153858390731248298056433816285354182588883715211738843801326831297181947562239993323202961410530072969013398669658073337273085171642258091164822631807295793886169033827781164115751086585872189121242
-c1 = 4115578106197062017294044310891024039554438131787269391154862526142866937938155870549829472424386226484625850457327387070755337288822640509004443484397234720914851433620556887385729540499953724033259937785600491548446806766462413179765702810698096381537513314758346885921106310631278002150697458246447235914052771405341899822588463120295331632180131956205362147784798497203957828308109092025630961803808101730731656980785388965672073473370194469269645377465298620585379296063436880502566076330461976785816470877632107769103280243111778113065038163250625042092690628478547757779278811188187028242267396799577953511519
-
-p=libnum.gcd(k1-1,n)
-flag=c1%p
-print(libnum.n2s(flag))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目解析.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目解析.txt b/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P28  h=pow(ap+b,e,n)/题目解析.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-hc = pow(h + p * 1111, e, n)
-hc=(h+p*1111)^e+kn
-hc=(h+p*1111)^e+kn
-hc=h^e+kp+kn
-hc-h^e=kp
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P05 小e低加密指数攻击/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P05 小e低加密指数攻击/题目.py b/RSA_基础篇/P01-P20/P05 小e低加密指数攻击/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P05 小e低加密指数攻击/题目.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-print(gmpy2.bit_length(m ** 3))
-while True:
-    p = libnum.generate_prime(504)
-    q = libnum.generate_prime(504)
-    n = p * q
-    phi_n = (p - 1) * (q - 1)
-    e = 3
-    if gmpy2.gcd(e, phi_n) == 1 and  phi_n%e !=0:
-        break
-
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin3.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin3.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin3.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin3.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-p=9163780868330371783046823560204742650207381649001998649144074078237594022997541853040616995577439077419293518952061614558930717648995958968548958385492411
-q=8370013716894660543940240406654509658721347047444446140469279948687027451068359349254746794140352451890594825470508554608349473296351748298082449565302119
-n=p*q
-e=65537
-phi=(p-1)*(q-1)
-import libnum
-d=libnum.invmod(e,phi)
-print(d)
-m=pow(c,d,n)
-print(m)
-print(libnum.n2s(m))
-
Index: RSA_整理/整理中/P48. 障眼法/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P48. 障眼法/exp.py b/RSA_整理/整理中/P48. 障眼法/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P48. 障眼法/exp.py	
+++ /dev/null	
@@ -1,49 +0,0 @@
-
-n1 = 6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683
-n2 = 20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947
-
-c1=6624758244437183700228793390575387439910775985543869953485120951825790403986028668723069396276896827302706342862776605008038149721097476152863529945095435498809442643082504012461883786296234960634593997098236558840899107452647003306820097771301898479134315680273315445282673421302058215601162967617943836306076
-c2=204384474875628990804496315735508023717499220909413449050868658084284187670628949761107184746708810539920536825856744947995442111688188562682921193868294477052992835394998910706435735040133361347697720913541458302074252626700854595868437809272878960638744881154520946183933043843588964174947340240510756356766
-
-import gmpy2
-import libnum
-import sympy
-
-n22=n2//(13*25)
-# print(n22)
-a,s=gmpy2.iroot(n22,2)
-# print(a)
-# print(gmpy2.bit_length(a))
-for i in range(10000):
-    #print(i)
-    a=sympy.prevprime(a)
-    if gmpy2.is_prime(a):
-        p = sympy.nextprime(13 * a)
-        q = sympy.prevprime(25 * a)
-        if n2==p*q:
-            print(p)
-            print(q)
-            break
-p=102397419546952293033860597727650152144175130286102358700580521651161981691864932442389800376284315897109792547767071136122457986326994452907466660551539601
-q=196918114513369794295885764860865677200336789011735305193424080098388426330509485466134231492854453648288062591859752184850880742936527794052820501060652747
-phi=(p-1)*(q-1)
-e=0xe18e
-
-def decrypt(p, q, e, c):
-    n = p * q
-    phi = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi)
-    d = gmpy2.invert(e // t, phi)
-    m = pow(c, d, n)
-    m,s = gmpy2.iroot(m, t)
-    return m
-m2=decrypt(p, q, e, c2)
-print(m2)
-flag2=(libnum.n2s(int(m2)))
-
-phi = (p - 1) * (q - 1)
-d1 = gmpy2.invert(n1, phi)
-m1=pow(c1,d1,n2)
-print(m1)
-flag1=(libnum.n2s(int(m1)))
-print(flag1+flag2)
\ No newline at end of file
Index: RSA_整理/整理中/维纳攻击/出题脚本.py
===================================================================
diff --git a/RSA_整理/整理中/维纳攻击/出题脚本.py b/RSA_整理/整理中/维纳攻击/出题脚本.py
deleted file mode 100644
--- a/RSA_整理/整理中/维纳攻击/出题脚本.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-import libnum
-import random
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# 生成随机素数
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-# 字符串转数字
-m = libnum.s2n(flag)
-n = p * q
-phi_n = (p - 1) * (q - 1)
-
-# 计算d
-while True:
-    nbits = 1024
-    d = random.getrandbits(nbits // 4)
-    if (libnum.gcd(d, phi_n) == 1 and 36 * pow(d, 4) < n):
-        break
-# 计算e
-e = libnum.invmod(d, phi_n)
-
-c = pow(m, e, n)
-
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_基础篇/P21-P40/P38 ppq与ppp/exp2.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P38 ppq与ppp/exp2.py b/RSA_基础篇/P21-P40/P38 ppq与ppp/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P38 ppq与ppp/exp2.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-
-# n = p*p*q
-# t = p*p*p
-# c = powmod(m, e, n)
-
-c=695811613220508521533410410135903763704380792345313822348335925535019364085287973391006658091756337941388790850576390425798691514904654108730064898721482454942897809486946732327567166790987988769649339266791907850313832700513155194190805272799105846921535231183458026312210254181900390502309417588847104213793231394168583827484833346266655392107254900891316034825295594615584454126662183967495486871019315836843964142146438253642093949267821928660254775556448682535996878217802620757735862588509198138308229216540912203307177130148261480033848867147610177292359480179993393430101548639801133574244188591918478576785400355882470444135385837723688465703459098247158590332167802098779963168624783522306380012451430590453130321881597629274617390265737278952430391455292129197120724233266227673065462001473529262207830010588159156853973215615518415224386700532070174251781750417203041543631328597659473610199473825400069638203715
-n=1103142672269025650462929198164640404493425942265040323371207998377200145961695641048087337404972402560194267711668479433180851107371884950953570911657090487495216386781924343363213345312692741516666557796484628501590914827387171553761258413087800091632213720047678961681727564158606220008125433169164157150198004730103285226539823741065685538894369776994256049396334124080247371292445543852118777801692107831636409684364527162627188519199064013189168290873007156380530155343171815296016451575866508168728518236121071519646489851701773457562537221387306293985011019040423572239157745630631563892081210964602524396761067561161422635793249097955070576281428534742447903449072401000345617064665752070967341863838984791405144869303448662169933201623421080650216122814985967041163663854812030159367202820911939914186148267664571396203542821594364250609009816872825447917845472311564561269905225280796615586133341770795940714518373
-t=1352157133681616199949626085859887520183044653936717410198546937928330648087119395184417755928058157424764679366526294873446661771336360719004981235527982326342186212780230888122434477779310176780131887691097470115061291877918798366484343129280364265571974776435297187299058517674913907506344826320352532394679559865918025267583173757096064690288877037701829014463065076789753953054738098985305066307636180043889030783678919407771611169741555877144593927382649961986384716532446388338376466150688150609936293316903617335385558920141250240529204636396228961938978325120385146208552506658553610353813640686759609897131817533377973931149277140553678119548578402674858651748611808600372129132750796909828079961432457264127651812438564831345298563698676305419952826466259729378236885089128224289161328570151277873778313473830713469181909893871432564345696475759124658962121070495959528237764331872929513704863754771030741820729657
-e=65537
-import libnum
-
-p2=libnum.gcd(n,t)
-print(p2)
-p=t//p2
-q=n//p2
-
-phi=p*(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
-b'flag{Now_u_kn0w_GCD_and_s1mpl3_RSA}'
Index: RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/推理.txt
===================================================================
diff --git a/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/推理.txt b/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/推理.txt
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/推理.txt	
+++ /dev/null	
@@ -1,35 +0,0 @@
-x=pow(m,p,n)
-y=pow(m,q,n)
-
-x=m^p%n 一
-y=m^q%n 二
-
-x=m^p%n
-两边同时平方个q
-x^q=(m^p)^q%n
-x^q=m^n%n
-x^q=(m^q)^p%n
-x^q=(m^q%n)^p%n
-将式 二代入
-x^q=y^p%n
-两边同时平方个p
-(x^q)^p=(y^p)^p%n
-x^(q*p)=(y^p)^p%n
-x^n=(y^p)^p%n
-
-x^n=(y^p)^p+kn
-x^n=(y^p)^p+kpq
-#两边同时模p
-x^n%p=(y^p)^p%p+kpq%p
-x^n%p=(y^p)^p%p
-#根据费马小定理
-a^p-1%p=1  a^p%p=a
-
-x^n%p=(y^p)%p
-x^n%p=y%p
-
-x^n=y+kp
-x^n-y=kp
-kp=x^n-y
-利用公约数求p
-p=gcd(x^n-y,n)
Index: RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/原理.md
===================================================================
diff --git a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/原理.md b/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/原理.md
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/原理.md	
+++ /dev/null	
@@ -1,11 +0,0 @@
-![image.png](assetsmage.png)
-
-p=a-b
-
-q=a+b
-
-n=p*q=a^2-b^2
-
-b^2=a^2-n
-
-核心总结就是：令a是n的"中间值",然后让a以步长为1自增遍历，直到pow(a,2)-n的结果可以正好开方为止。那个结果开方就是b
Index: RSA_整理/整理中/解方程_(n + p) % (q-1)/txt.txt
===================================================================
diff --git a/RSA_整理/整理中/解方程_(n + p) % (q-1)/txt.txt b/RSA_整理/整理中/解方程_(n + p) % (q-1)/txt.txt
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_(n + p) % (q-1)/txt.txt	
+++ /dev/null	
@@ -1,17 +0,0 @@
-https://blog.csdn.net/luochen2436/article/details/129915828
-
-leak = (n + p) % (q-1)
-
-l=(n+p)%(q-1)
-l=(pq+p)%(q-1)
-l=p(q+1)%(q-1)
-l=(p%(q-1)*(q+1)%(q-1))%(q-1)
-#(q+1)%(q-1)==2
-l=(p%(q-1)*2)%(q-1)
-#p%(q-1)=p-q+1? p%q=p-q?
-l=2*(p-q+1)%(q-1)
-
-#形成一个方程
-l=2*(p-q+1)
-n=p*q
-
Index: RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp.py b/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-
-
-n = 9858036118742475059433629759400140149605427966433887001108914046633590983713890376353399251885596714047941627222518567515364827340623251995233155278723954926352575221234142199002389819918370754455018819109203109519495493316781422680537687252828642561153832774006286448224016306003631037545643746379044035822029246823483754854602215035869280453855199171915302879406862793807947285344105991067005185493038370882005106069286893165426035453262949739088328689761676541415552066845538243916687080015277379248062286846119847500455125785281216888979581104100416760176854106890525904804003871967844912776926419778292365918733
-k1 = 4961356980843219227031667558158760111429474781353239042846946454889308337426649950562701556812878479419482114480334396560017050901408543482904510839046375272618911899662922000275482705215097956326853000314956770940510205507508883917322367747195211326932972446951696070952604655668087834669239815290687449340666091764203568518066586476150861542456340936303824392273004883320273039066213750777751436497551151274574369325153858390731248298056433816285354182588883715211738843801326831297181947562239993323202961410530072969013398669658073337273085171642258091164822631807295793886169033827781164115751086585872189121242
-k2 = 8943660577405892997099415246000964332413663135286363632645590478753346989578467429954062835807609942851365774880023144520942029315601785638267996044694835031239940919206726351387647791985293576677117144309222345482756402074345845506698221273703274410853004407629888264128027446878663894377503365831077629911487977796118893231354280680598325548327444053575447407791091256260091884824630356121390983373431984667887019137026219503921285289004358685317477667095203722657823621429988685962573778350234701781053232256494914398637744373081735647622790113318562356606831868682912936768762749860591989864642992367932846710665
-c1 = 4115578106197062017294044310891024039554438131787269391154862526142866937938155870549829472424386226484625850457327387070755337288822640509004443484397234720914851433620556887385729540499953724033259937785600491548446806766462413179765702810698096381537513314758346885921106310631278002150697458246447235914052771405341899822588463120295331632180131956205362147784798497203957828308109092025630961803808101730731656980785388965672073473370194469269645377465298620585379296063436880502566076330461976785816470877632107769103280243111778113065038163250625042092690628478547757779278811188187028242267396799577953511519
-c2 = 1069417390392712224013484466911946251479515132512683148923109806683426116132220974153759944203026795479272077929265429391851629949467649257513543604050970026412281764244254971122378729482985044535740328359563865949603944075625096242664299209143911115287867129678168308056632406522013494918385694044348658310785409548526884085469813804712945302487796400392901241763662852123731910949146709219711388725430757562836225353975933990961286601256351973981732004724397292031523206145692402321288085912884435326461626793886145952474077975796841103796283781865005879515976167187625178845457630564285181509041968859289264784559
-
-import libnum
-
-p=libnum.gcd(k1-1,n)
-q=n//p
-print(n==p*q)
-
-flag=c1%p
-print(libnum.n2s(flag))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P07 N不互素/2.例题2/出题2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P07 N不互素/2.例题2/出题2.py b/RSA_基础篇/P01-P20/P07 N不互素/2.例题2/出题2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P07 N不互素/2.例题2/出题2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m1 = libnum.s2n(flag[:21])
-m2 = libnum.s2n(flag[21:])
-p = libnum.generate_prime(1024)
-q1 = libnum.generate_prime(1024)
-q2 = libnum.generate_prime(1024)
-n1 = p * q1
-n2 = p * q2
-e = 65537
-c1 = pow(m1, e, n1)
-c2 = pow(m2, e, n2)
-print("n1=", n1)
-print("n2=", n2)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_整理/0.sage/P52.next_prime(p+2^420)/解析.txt
===================================================================
diff --git a/RSA_整理/0.sage/P52.next_prime(p+2^420)/解析.txt b/RSA_整理/0.sage/P52.next_prime(p+2^420)/解析.txt
deleted file mode 100644
--- a/RSA_整理/0.sage/P52.next_prime(p+2^420)/解析.txt	
+++ /dev/null	
@@ -1,4 +0,0 @@
-由题目可知，q = next_prime(p+2**420)，由此我们可以构造一个一元多项式方程
-f = p*q-n = p*(p+2**420)-n,
-然后求解方程的根，此时p在根附近，于是在将根值往前推直至n%p=0为止，此时p为所求，则q=n//p，接下来就是普通RSA解密
-
Index: RSA_整理/整理中/N分解_N分解3个素数/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N分解3个素数/exp.py b/RSA_整理/整理中/N分解_N分解3个素数/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N分解3个素数/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-
-# n=p*q*r
-r = 12328943069972158868300333965019293732240349172933398867374450193780676916633106046545397891902123683693837126404908611670219604587587151306224914062663729
-n = 928445951911850156618541782850215900925329423880533465612155142015978599609287623859912813317551629221695490535012732781489396534420011145723987610606038091488823086647363964394753700158320900867101659445170118179077194271099520502633316318889163873291574934282498061117736456183503867870294570083013883365868242889035609602940685335912371326827533418614992221705810476710807373254363162373986374486325350746366851935451369892949745302442034805629514003196071631
-e = 65537
-c = 327716655224470059950709685055600963837116578216483343492948888372401723689223347212508532985781828794786448842515029515358422017875793926582832247025212149474404973170422295165602666360784347416812528617973764432916955654602356835327769633635513894485943553309743509322858937973710628023758816806471875016815994664897320150855163109437521642800230902661034555151514311149333258071668655344069451897282357234220538922127548822361859943829665459953651351620958628
-pq = n // r
-print(pq)
-p = 8677914960051571881163393151217840674884144886709470084966197470333385987477662098134846485042365070664261589879739214029342465837414534639688284776885749
-q = 8677914960051571881163393151217840674884144886709470084966197470333385987477662098134846485042365070664261589879739214029342465837414534639688284776885411
-phi = (p - 1) * (q - 1) * (r - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/中国剩余定理_广播攻击/题目.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_广播攻击/题目.py b/RSA_整理/整理中/中国剩余定理_广播攻击/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_广播攻击/题目.py	
+++ /dev/null	
@@ -1,33 +0,0 @@
-import libnum
-import gmpy2
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n1 = p * q
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n2 = p * q
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n3 = p * q
-while 1:
-    e = random.randint(10, 20)
-    print(e)
-    if gmpy2.is_prime(e):
-        break
-c1 = pow(m, e, n1)
-c2 = pow(m, e, n2)
-c3 = pow(m, e, n3)
-
-print("n1=", n1)
-print("n2=", n2)
-print("n3=", n3)
-
-print("c1=", c1)
-print("c2=", c2)
-print("c3=", c3)
Index: RSA_整理/整理中/sage_有限域开方/题目.py
===================================================================
diff --git a/RSA_整理/整理中/sage_有限域开方/题目.py b/RSA_整理/整理中/sage_有限域开方/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/sage_有限域开方/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 3
-while 1:
-    p = libnum.generate_prime(512)
-    q = libnum.generate_prime(512)
-    if (p-1)%e==0 and (q-1)%e==0:
-        break
-n=p*q
-c=pow(m,e,n)
-print(flag)
-print("n=", n)
-print("p=", p)
-print("q=", q)
-print("c=", c)
-print("e=", e)
Index: RSA_基础篇/P01-P20/P01 N分解/出题脚本.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P01 N分解/出题脚本.py b/RSA_基础篇/P01-P20/P01 N分解/出题脚本.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P01 N分解/出题脚本.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print(flag)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P58. Crypto Lost_N/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P58. Crypto Lost_N/题目.py b/RSA_基础篇/P41-P60/P58. Crypto Lost_N/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P58. Crypto Lost_N/题目.py	
+++ /dev/null	
@@ -1,67 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-# part1
-flag = b'SangFor{}'
-d = getPrime(435)
-count = 5
-while count > 0:
-    p = getPrime(512)
-    q = getPrime(512)
-    n = p * q
-    phi = (p-1) * (q-1)
-    e = gmpy2.invert(d, phi)
-    print('c =', pow(bytes_to_long(flag), e, n))
-    print('n =', n)
-    print('e =', e)
-    count -= 1
-
-# part2
-p = getPrime(1024)
-q = getPrime(1024)
-n = p * q
-e = 0x10001
-s = pow(900*p - 218*q, n-p-q, n)
-
-c = pow(last_n, e, n)
-print('n =', n)
-print('c =', c)
-print('s =', s)
-
-
-c = 13007070082982086015048648249698272815655157209727275797297990841215796701955079738986996208838342773211678208282162295881823413924960399315068498509939876883297864092435101096694113071462267388158595518905101264654742860199638059278239359756219217345342001728599121265614144789005805619626458575126846199823
-n = 145575036089862184772968012014750816659166028840828357885024516131565102712346345625910708214596157522939248398359985832422106056149116726640753670919394145037581595172384392223713667048639158944450925280598688178812170253438103664700756173806183649477673497327790421063029596049211220930285435947389700047717
-e = 6104905725583061487097813130111812725712623687061285535333592835899028572315489283518324105546236465450024687400996793197533588656449965379858202658832799573292015786259804984314040621630959455897094519928941186899832366216111359619637121411868069759469878142871432060850651758192209783752650530390826992241
-c = 59089700172263364510471541430195724136973801897202789650586019199451669728729101831161257990233999290546484165767660146638244043033774379664984894178111808280076960669616271416462197675878517863817855762681885790347812435849975072020273928469523961698304409181769820692602979823921421820511589311465948726144
-n = 171055961405321566289532118753767563629109197214150143506779656820887080836894368955104877312070939117885512468517951216152955714212079279910802095156350517032659766690101321767892798466184405283403136505441356956934759143173462058806620784497304916652269667097971495139608875846338091109621496242787157524093
-e = 30639328953696065722075015079387560065304228779854040351182305267894609577068955234152835797506237100956072519388029280776532681675227753068574540049244778077615881093270476533536257809592871380358708151151683035275615961208943826349952952069226829397420921321531951316523368786223865432179572145636266109841
-c = 24257648301491609274972482189063774024772127961295257418254600487615473027418329077996964279110710299066082437371516700591657843057597234861450272363240630164504734590903528165056021531272324846249133757036680429476939369309982196345252669711604534774523215422683385359295249160897422071732828044179085194829
-n = 99735998821682404719682435155046621256882035421263371444758755082217342389922499214602126376005623406797486880520535486455942687180959663032781490782870080236095770591995437146834606144553095293546973559144743704707021952152013362323293717685161426469215016058837362232410103330238322051089471439573994907641
-e = 81580834845272005549352820344384188734735397414102222005750919291263464191246301214086773744759605577533897859454210564034313392997143493147211816886655474145064723790935089304983994174659126346174766206623180477360887938029897557683160392738708450965784921553806400996559956745732829531154835363767773681061
-c = 105310270039347542993580213074911114373638987155564864341577443142664062749969114572669295115218200093381519732560445712425129105002834596010587656544575627162469582470245756143405705971157024449801127133755773536097173259762599166367688198314997549663330392481942723997656023552049910279885657664434799986156
-n = 118810172988175650374012494943583618875926370822995080847518376655089884052560062524542984436965153851285471302754389325839857100631601002627184437173686224779115595776898914116490948408328080895524604124937295381872443370706017215743101755848741173976351916104362193751372512936063892260855907424754174906407
-e = 57970672598245590037421993575987847127437841761387257183798066822318596392918179916711068560675528926294272336883938499809087281773070750919594701600347605662910664129043903749270935721912605279738208730075557097647316659218872977257614306133047318781156168440924237849014715453590776000659069078250493480521
-c = 50430341205487530895874157969557709374947862873979946417751686643857339147558892228311050765271667685452170747716439387141655285820549605442067496018168606163031122498272292974227360674531814593351170403519198099247839499352696883293133549658442172721339510734646474794377043195182186423251146266787514560008
-n = 80837118813383038376595037732171926303253457956240963765871280771175535050976501573174357090322706934194338649978803681581485022992041019276854467388155755920855237665754031077890133388056350355753218650482718197635332681450734918373003830855184694566883308495322647552169761087814135330222306083205629967447
-e = 51172856769626923894369204019063376718507295306271724506808987836327051371415876890252665691760404489737902233106400428873399230724307065583727090788789453353097657968301923726049631007431604461521879288667433292135840271678776989737261214286587609316530839676362375173635542358540766454865624476392874630929
-c = 24533435736573623334539431528997922833496063510219641412038735658846891237553927656156039267456590702682308774830590768888594750053426705504840854071081487058180327084899496154314864910274839867793265086899109787190447838634454294468362549369144295591261617705578124672391399319219038350878856530074063011081
-
-?
-?
-?
-?
-?
-
-e = 71905546659735491498365580186225996341462093571074706903142472266442052559638067842283521897292088493599089076218507596455101425837547743511983105386966540811629138324774640350969049873787070380161376295760563611617178869788237730560614549740931199083194226891873779907795120035746039593933256380499568775673
-
-
-
-
-
-
-
-n = 20955464633057600258987829727550073699845816289000240676927869818926752810905511184835302717855745473943671910742784074561535017974853574714483642916831791020944940633062963043482236587316552330558006573820423830770910893877191630012247591380869307656539553888318621170921800017818132160253923739647771452839191101104391894609403591447166963426444018303147924843072923713248135717578047687411974516038299879758561542241544862102935741869647633013298181782208467117482306148238724598730801037692668154263059348953587766571379262442743822007387408949824805991797355089583176028081305319076896384126383926193964322235633
-c = 14815997295683082265558346455845370590765145583224067337292601455640475216349267044144296003388877395546880235511728120803143112914764263292087421926972160283428440959367872665892349776616002018624301524264223581314248857537034849571849747613963209414193510408342387107662655487869098045345428379025731617851483935711671021438908270746316921057871871545763798735895118697635903815383424855759281301248295597297869474539060531099443223045844791615425429748703429968627505406271675074549912664863784774239200764403372298995457799473112713379340870305136776932539188516395526955161359417473843082895317392495109895085666
-s = 14728527428626630951705148488338433865446345521255631461200851513782412494843597938863837697938230856843797646287742397249258609197032095158567448934855031190354034543862057663422053672290704598313096289223478302733688501373756860855445632789922930577582465209872782549135254792729915747104521949095814028476908208917363509089190935273004331739978623136706041729628143765893264698948654175039064609891374587695812144855411176143224066975193255513405865992328257766815240718115442741846443490733767716842367336385132648983241895710001620533668392060358573295789752856876282590472528110546264872047138094995909454134250
-
-
-
Index: RSA_整理/整理中/共私钥指数攻击/题目.py
===================================================================
diff --git a/RSA_整理/整理中/共私钥指数攻击/题目.py b/RSA_整理/整理中/共私钥指数攻击/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/共私钥指数攻击/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-
-#2020 RCTF RSA
-e0=0x1589b1732d8ce5aedf1e34a63a14bac68dcc11ee18b94e293efe58c2b77d055db463503a039472eff881b504b90e6bec1c90da3efb02c6b94770ada0a921eb5e9d19a4ca1d26b47cbaee855b72da5a79a9acb675e48c46140063e53ce1a9b74c826a1173f720ad01681bb06ad6e993d953c25f854b01107f90b7ed1db62df4f1
-n0=0x4c9a771c771a499f13436e8b1e237db8bd03085297501421b08c4aad841fe078bbe3a916f24555b64b322a81d59c6bbecc9d61821406d61d59932ddebef621180f4df2b7cb4198de92609fec4cfabf4ae25abf3a1817550d1a32ce91c65974c21dea804a536d1b659458344535ed756dd9bbc683642405d1f09dbc17815ec031
-c0=0x40b12da27be9bd9f40b2462fba93786d1a0cf22aa1adc22597854f5be0856fe53031ec6cfb30f43397c6d42f4b935914a6ea448a531517f05200abd13d5777e718cc88c16bdd432a2536c1e7f6c31e78f223a3b17935c565030b497ffe2a91177b32634bb0affcb81ddce96c031548eb312faf3038386154202a9d7dcfd75061
-
-e1=0x382abe54e39f9f447fa8d0e5a7d7c9487dc25e3d82045dcadc119e4bb357436cf1f87a000e8b28ec0427cc64578dc7e17bf81935cf9d6ce9f0da262c192e63fe83ec83b50083f5f9843fcad6bd86da5e69cfbaaa4583e473ae3ac3acdc472b194cf0f37c085b6599418d12ed97d54f339a75f353958c9836097a6379ceb742fd
-n1=0xf092a041b286be8d44ec5ecfaf0504e5ed9353fa56746c6a4dab91dc684bcedf5260970c8b9f66bc470fbb4bc3d326108c2cf0502e01e38aa18faa0c626658272d507e9ececb66c927efbd6aa51c2ce6f3c47207faf94b7e385a29e85fe6d79d27eed0f4bd87a22f2a849f4e21221634e4c24bd69e62d6e110cda2e60b2a17bf
-c1=0x5f4a7a1c54bd14d1390b6f13a0a366a98f93cb68347a70684d9ce513ba1fb2e3dd72d2e5c73e432658400bc4da175a2bca6861550199337d67a40814461eaa34774a8e7179e1a33b5769946f2d387021e14e814e58bba87d0b9fa8443b8e66c7876c83e8b49d67d92613953afc7b4ce80149e189413f6d44f40460836668ecfd
-
-e2=0x2be3fbd6f7db6a8a1f04533cd3ed3f0399d43261dc5abbca04e388724f6f7ec5342f027381cc4a72b4f470ff47a01caa0e70e169c31e46c773f8b23e34683b51746a97f665f8718ca1c2a27581fbb061aa7d03e26de76af4f64788dcf44691a7f397c1fba842184a8571792f239993302b0b33e65359c1d4c4e72c4b36e55775
-n2=0x7ffdd5a578d58184af984353fed4d55b79fa92113a9f1176af691b8938340b1a7cbdf7501da790c5e899be4d77d9415f8fec271fb07b2249e147136b0823022833a9c8d58f3b6f3bea52f55cc603abb32463583aa1f29a1a9639f09b5e370cda35e1e885db83059a6bf530067bc2f3dd752216495e0d478479dec2b7e0f8dfa3
-c2=0x28e4ac6fc608d2bb8889f6ea73c07828796cff301c708d1763a139cf57640e254d93c2cdcaf79a0e33db68ebc93f72013065ac554512ab4374fe5edc023c9291bf3615d7932ab471cb4b574913c16c8452b76ad88c3c4b483e686294369577f07cbdc497e6082e1b9313529e112b54b8f5b5b86996ad76898c3315aeebb5036c
Index: RSA_整理/整理中/P47. p^3 + q^4/exp..py
===================================================================
diff --git a/RSA_整理/整理中/P47. p^3 + q^4/exp..py b/RSA_整理/整理中/P47. p^3 + q^4/exp..py
deleted file mode 100644
--- a/RSA_整理/整理中/P47. p^3 + q^4/exp..py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-a = 1001757897913772351510420195662626456337522550684606727483773096673299029784598925879489541145425035208954548434364407129536623872359866140502945055841821765538135618785958230881698432164666106480484384998915283051445946164568339012311071022667483689786104241205203770248137327154122271358173278768580995401804353335810303663245624828137303106291342454008598042561788843169528260839797410662782024780465758566251328065946252974178694612662193108827812380093012592
-n = 19743856964263732842999962921764407899550835757434895392940479421960735302959163991849377985049404173836251900687827441599500422841626517558622567745437335569126719161072741233680254267603047267283814233895186061759120509099394028737117210315668037567644106922178370110286156290354552013641623466808054072066874721501635305497521532247446583415341
-c = 11573369450591319755076158585550356804136715495771905025393681593171072453674223539740220735995000501270745453812328856003963738281166754397539243769043057759237596024541470868109828449256053991918612982581009998827964614610819962346527488888094333196535012014776795315145414671509148454534127080694322513052946539505422338224596999797852421340273
-e = 65537
-import gmpy2
-import libnum
-
-p=gmpy2.iroot(a,3)[0]
-print(gmpy2.is_prime(p))
-q=gmpy2.iroot(a-p**3,4)[0]
-print(gmpy2.is_prime(q))
-r=n//(p*q)
-phi=(p-1)*(q-1)*(r-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_整理/整理中/e和phi不互素_lcm_phi/rsa39.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_lcm_phi/rsa39.py b/RSA_整理/整理中/e和phi不互素_lcm_phi/rsa39.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_lcm_phi/rsa39.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-import uuid
-from Crypto.Util.number import *
-import gmpy2
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m=libnum.s2n(flag)
-
-p = getPrime(512)
-q = getPrime(512)
-n=p*q
-hint = gmpy2.lcm(p - 1 , q - 1)
-e=54722
-c=pow(m,e,n)
-
-print("n=",n)
-print("e=",e)
-print("c=",c)
-print("hint=",hint)
Index: RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目.py b/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/题目.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 65537
-n = p * q
-h = 20211102
-hc = pow(h + p * 1111, e, n)
-c = pow(m, e, n)
-print("hc=", hc)
-print("n=", n)
-print("c=", c)
-hc = 71505320953946158049530109094654497075489963071106175336722892393493112481336409391299522595724154571954223093317880494307263262649833222750675105885636892419350501821324979706283867758665536771783209816719106279467902518895579024290387800216711663670572861182058425925280993190282267615052256942516011995207
-n = 76856511192427852645963041043072791148703422665129663050712492700760489247788743818199589072069758934570218804936479267319288093436111548055922916898782764333246946326823653877357695179165138863843657328764265204547147092074499832221138997131011222722917338444675582832114206750168113207646100633238664244737
-c = 39246179387125192271554620313966311736032348078183121707012959204367908070472764506984235827179206718838172586811066682034907967943722841257765922283692526422653916506577810629430853963448057701574209912936660396486847365579797147723437378122880075493171892191049105237005801787649587080840600670585409293046
Index: RSA_基础篇/P01-P20/P18 Franklin-Reiter 相关消息攻击/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P18 Franklin-Reiter 相关消息攻击/题目.py b/RSA_基础篇/P01-P20/P18 Franklin-Reiter 相关消息攻击/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P18 Franklin-Reiter 相关消息攻击/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n = p * q
-e = 3
-c1=pow(m,e,n)
-c2=pow(m+23,e,n)
-print("n=",n)
-print("c1=",c1)
-print("c2=",c2)
\ No newline at end of file
Index: RSA_整理/整理中/N分解_PQ接近/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_PQ接近/exp.py b/RSA_整理/整理中/N分解_PQ接近/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_PQ接近/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-import libnum
-import gmpy2
-#11
-
-n= 17752770005959450783368980030043878547535956414119879741453560550701705489806449145991219400638575053529185909550016280513308215017385040463699931951701894554210916071934994522579016557286121819399693223747296718293086175847432934809917559318694792015696754445449090169911052611759269740275932926797176511376184207265987673583880965946906791696307374144274966668681976499889069666816573873429180101133894777446363037698265266769363040459677305869824632204494462866097824280787902105876680951222107761530644357292819483215790868606552029604879053217989241693291353552725151633669823156879311498404663745671588492388939
-e= 65537
-c= 17215114973697188228039407246534810856664195594190943813088215060573040302874656982718865711472821797706298792012615413421620367364435910565448695441533985668245204354161963958920998821327722363488545595199128223887604206339608823901845352597801014639506279914508269141350896135320522450208970336079282563152913186458859289060342568562329695673546818588161006052780570480494934554029032268444361720329775028337034266866365591838699506418326634782639236557659691322389324900487855512614150815465076893085020543027358714857336681784520429602229455376426822593566388991433069627228944458733892799679195989110824305261985
-
-p1=libnum.nroot(n,2)
-p=gmpy2.next_prime(p1)
-q=n//p
-
-assert n == p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/题目解析.txt
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/题目解析.txt b/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/题目解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/题目解析.txt	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-(p+a)^q%n=h
-#两边同时p次方
-(p+a)^q*p%n=h^p%n
-(p+a)^n=h^p+kn
-#两边模上p
-(p+a)^n%p=h^p%p
-#根据费马小定理
-(p+a)^n%p=h%p
-#展开
-a^n%p=h%p
-a^n-h=kp
-#求公约数p
-p=gcd(a^n-h,n)
\ No newline at end of file
Index: RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/exp.py b/RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-
-
-e= 65537
-phi= 111438859385212428148481031118733621985263239027759050602758690001269126931107597951630888991392455592605063206736304140942684380537173653743577098953927603519733233959472812849515187480572377732277271705203022501156361519456379646595375084946665911282264954826131284380983550947897241882426835909937959263900
-c= 46861144338584521444602861573315805443255260697668912840328385618833954964496588506239061767946762843534759456360995606541896084372139027954655652010205614427974394691218361195942346078349389688729998778546840789146971932158990271080566287563465126392634789486076343500724139380598143576754615226284474633529
-p1= -9235464617922894138629634187378977826482936299251752801837193398104074043693982004255519219730228961174312568331044191853040612620853766014741675267666409
-q1= -183407508108176489424750504254369461709634846301662502785737451043487567569232022990854768957854022755627971933382612871863921376955798189700083037408071
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-f1 = p1 * p + q1 * q - 1 +p * q
-f2 = (p - 1) * (q - 1) - phi
-pq = sympy.solve([f1, f2], [p, q])
-p = (pq[1][0])
-q = (pq[1][1])
-n = p * q
-d = gmpy2.invert(e, phi)
-m = pow(c, int(d), int(n))
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/dp泄露变形/rsa36.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露变形/rsa36.py b/RSA_整理/整理中/dp泄露变形/rsa36.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露变形/rsa36.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-from gmpy2 import lcm, invert
-import libnum
-from Crypto.Util.number import *
-import uuid
-import gmpy2
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-e = 65537
-p = getPrime(512)
-q = getPrime(512)
-n = p**4*q
-
-c = pow(libnum.s2n(flag), e, n)
-print("c=",c)
-
-h1 = (invert(e, lcm(p - 1, q - 1))) % (p - 1)
-print("h1=",h1)
-
-b = 449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839
-a = 2021*p**3 + 2022 + 2023*p**4
-
-h2 = pow(2, a, b)
-print("h2=",h2)
-c= 32461937291123838150015437738232132778136420835501172981733602990740273486953741568090810560778161966164945158511260774070358644248232323420087723385263256644196533073406984717180336745536558689984942092573081904079903490501386556080018394074410235002595317034773282955985118051270196236522237314803148550104312339887381647416993827777740145028707473690705297024951376596720342536992121548930518678367840538408090222135227089379157055839665026501357827048478457911999587594147965082828271987647298414995124826623670109344083974284447663062399760045862177923687178825610208304215451278227328518587611057109711358853294506221375136820608279989589848521299683305678250602533798187554673551619882364862267158445783085217884637473353723296775978631814700691324134568859907895
-h1= 6468066142812037811245811431029822620718431256172659827318030980766740646875043754362691871361354796260760544851348386608059020178469741472552508428173289
-h2= 351478273201661211370295992513903777012232983256056326238926333011371416629716162090104619674265156821223231264440443106892542064223779557190578501438946789254030402887731165540882104924377245618854941216703766237750410854631060908813070299202115362296699264192874798844168699489382003184297636998658037654020552631141141481533724848408730766978666934663108281432306938240589659207658915367966527390442015149064586761425865121150449377751372147728656649385001186886613722056101089644760097824725460868377846871014862553706199913248258756627415862049990930575534515661975085378650331550364542391008296344006652888696620145918034387172113175331348860126630098919166159292368091989313853372136462265585305145884122967878506561782844123480811218779889510208850962460012465794314560056622761602155517368256657436574200550175391109703542446602958770962969052052583500083109117156883274443244413957241956500358988509636068466704579092280477518578401466531668151425943794220167624532301055735350960510647752822557866484507869680755962572543981925722715965036598298885934266602923923707916902509373496039520863385795284014251153812592261523739279076312435443855905731512330578566935163359461268001866134231813803645925451787175145307904432223492155424053234885837529083612476468041346070430454900321918429553742127313743695536776850119228648659264206244539519000463928289312181246535035193277156799865273087461179498380447714523567927904242841451750445973237705788122212246137382847
Index: RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/wp.md
===================================================================
diff --git a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/wp.md b/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/wp.md
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P35 h=pow(d,e,n)/wp.md	
+++ /dev/null	
@@ -1,26 +0,0 @@
-```
-h=pow(d,e,n)
-
-```
-
-d^e%n=h
-
-两边同时乘e^e
-
-e^e*d^e%n=e^e*h%n
-
-(ed)^e%n=e^e*h%n
-
-(ed)^e%n-1=e^e*h%n-1
-
-(ed)^e%n-1%n=e^e*h%n-1
-
-((ed)^e-1)%n=e^e*h%n-1
-
-((k*phi+1)^e-1)%n=e^e*h%n-1
-
-((k*phi+1-1)%n=e^e*h%n-1
-
-(k*p*(p-1)*(q-1))%n=e^e*h%n-1
-
-k*p=e^e*h%n-1
Index: RSA_整理/整理中/中国剩余定理_ e=1/timu.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_ e=1/timu.py b/RSA_整理/整理中/中国剩余定理_ e=1/timu.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_ e=1/timu.py	
+++ /dev/null	
@@ -1,37 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(len(flag))
-print(flag)
-m = libnum.s2n(flag)
-
-p1 = libnum.generate_prime(64)
-q1 = libnum.generate_prime(64)
-p2 = libnum.generate_prime(64)
-q2 = libnum.generate_prime(64)
-p3 = libnum.generate_prime(64)
-q3 = libnum.generate_prime(64)
-e = 1
-c1 = pow(m, e, p1 * q1)
-c2 = pow(m, e, p2 * q2)
-c3 = pow(m, e, p3 * q3)
-print("n1=", p1 * q1)
-print("c1=", c1)
-print("n2=", p2 * q2)
-print("c2=", c2)
-print("n3=", p3 * q3)
-print("c3=", c3)
-print("p1=",p1)
-print("q1=",q1)
-print("p2=",p2)
-print("q2=",q2)
-print("p3=",p3)
-print("q3=",q3)
-n1= 148940337131589571956546000093283178449
-c1= 37661829633479650123965286422613768806
-n2= 194545959106983958495796913611226256697
-c2= 136557714345886330223035822589488157230
-n3= 159675071780718021961142743321726109279
-c3= 120830575737154793687705030754292986572
Index: RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/exp.py b/RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-import gmpy2
-
-c= 672211618947965669743140453815925311571913536792006320455451623329504768032653294195423386000169883889423130760702613901378226812991253672513808102582219125394975375184975680670477893616071731840578283372003364948041569480819988957797304000908767353945393438677325246806404776535366574244075168385686413998057429677446479345637389931707590541292174569539214514406772616679574446429577154994658300264395963743399028585579405127133850937684035755385536903177249615680095525438385801267848518932540742850864828339907387436386589615141301315094268048540705754105909152114279580297245086066527476038499949395262133426884691004953583259542925926790804058362169131721101062567084072161757158556850613589003126629288335943625835227353239228779420777075183829735033060565964497198340990191457681711972006273381600852029426480042505732976038791175365941723190939561137761147915067500934001302644947570092730510410631121938241136026914524548262047531029183007578603005500736114268512900086177419819102734670936080786880709408049475188517563383396936699006425388577265810859020768191320288121742321413664684223757832512232195144286087827718142083017087556701405737637649721698260338198824299502881114161665693663517201464044647997804424204974158
-n= 720239742676276892125180297266754203107040753393792061819109788620051632698640388878164710563582551395398417339060158866293057237682628696160289176629921331485290769277668335946098043360398735897380648863281934217401247716885835600015902679721336644611726200751169780657177537142181503044265719975692160293076414714427014863104317576606190229434103615882007838099640939570363751985038883738622768287033043747426059699658000045440922380571398371705698665874788485742224933932126886052739997477581453575568873105033061557099207861338425715849944147722082093066073450898210944979122392845654525731562948599513722685350626329020621203929679566003766926450933409172107168029480058053562850582746440505733686649603099598891890233020681944859657534362524449703843503708875743380789764830334189231182948902486001101574574542624002055351308194659501208428214278013747062791484983332159726081847473539435746845527406013789541657402799211822281010775911725885529125479685615597338584834382753602860489834851310346307067835494249861848527198787408591551265511901573927692939919503175252790601381174213220684859419625471536435635703766410175026305548524401754345447084444023478365533640647989603192253820896160603674343007718854266899300948742261
-
-e = 0x10001
-a=gmpy2.iroot(n,2)[0]
-while 1:
-    b2=pow(a,2)-n
-    if gmpy2.is_square(b2):
-        b=gmpy2.iroot(b2,2)[0]
-        q=a-b
-        p=a+b
-        break
-    a+=1
-print(n==p*q)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P01-P20/P10 N是p的r次方/exp2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P10 N是p的r次方/exp2.py b/RSA_基础篇/P01-P20/P10 N是p的r次方/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P10 N是p的r次方/exp2.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p ** 3 * q
-e = 65537
-q = 13345672330679418443866848695749753384841350112452462690350565885192764753702964893062035116023096943358384379827500462723016224486435032522188166109529147
-n = 4663711063632671446966617442890809468548735750386480905820144168615122369358088158709822723959108989276525102755551604204514586528122441075489492157644479194671784485228731421500391142158401889177506319977349707503678947872777602384171260874359045585814189677748712566088220734735479518470883541166059233676170283938881683675790979128058243582825012415020019043126740915522571217495119060031729061070896580899732991209113679151755713858497630999746612658308778711613697038750661479517187094033129979714688161348844542070263109259258937863241431480105798790363889436471998002323269704182369356300287043940743500087239
-e = 65537
-c = 4050303218893912343776312253598257474375000778822229482734626960955864773175090306426885201033332266573903303684635688485414725284644108123459136702775991157244389086147955395682206311752151842740679445903864544823592773331496589661187968392779340028173948172003460012051289357755574536619241969492822938688821287700132262703677149526846356206143053559703859606442209340834979412336031660590507709503830013770022485005101363701272279629510056964018618212014677531338026866748075406283893942248599825641124694672878533987994699411744521757385858889763503705242690212615083634186373933214686193717950163215308138805348
-print(n // q)
-p = 7043638514877708625347510509234285437455073680720519890604877400872929338715742690986696345788770257715966066407870250705514125001666470405076090436993533
-
-phi = (p - 1) * p ** 2 * (q - 1)
-d = gmpy2.invert(e, phi)
-print(d)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/N分解_N为素数/出题.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N为素数/出题.py b/RSA_整理/整理中/N分解_N为素数/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N为素数/出题.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-import libnum
-import gmpy2
-import uuid
-import random
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-# 生成随机素数
-p = libnum.generate_prime(1024)
-# 字符串转数字
-n = p
-e = 65537
-c = pow(m, e, n)
-print("n=",n)
-print("c=",c)
Index: RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/txt.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/txt.txt b/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/txt.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/txt.txt	
+++ /dev/null	
@@ -1,17 +0,0 @@
-https://blog.csdn.net/luochen2436/article/details/129915828
-
-leak = (n + p) % (q-1)
-
-l=(n+p)%(q-1)
-l=(pq+p)%(q-1)
-l=p(q+1)%(q-1)
-#(q+1)%(q-1)
-l=(p%(q-1)*(q+1)%(q-1))%(q-1)
-#(q+1)%(q-1)==2
-l=(p%(q-1)*2)%(q-1)
-#p%(q-1)=p-q+1? p%q=p-q?
-l=2*(p-q+1)%(q-1)
-
-#形成一个方程
-l=2*(p-q+1)
-n=p*q
Index: RSA_整理/整理中/威尔逊定理_题2/题目.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_题2/题目.py b/RSA_整理/整理中/威尔逊定理_题2/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_题2/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-from Crypto.Util.number import *
-from libnum import s2n
-from secret import flag
-p = getPrime(1024)
-q = getPrime(16)
-n = p*q
-m = s2n(flag)
-for i in range(1,p-q):
-    m = m*i%n
-e = 1049
-print(pow(2,e,n))
-print(pow(m,e,n))
-#4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377
-#3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270
Index: RSA_基础篇/P01-P20/P11 n分解3个素数/exp2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P11 n分解3个素数/exp2.py b/RSA_基础篇/P01-P20/P11 n分解3个素数/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P11 n分解3个素数/exp2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-
-p = 12213843677002747766848780813863444765635042481765413051856941866086491788109497010943473273572566841660085356963998380859972440509623320585264570870882377
-q = 10902490082251495426199569292732505400137675709524837939357515262329540011464655744129250363907196869656418112808846020897118146863902562367003327272321449
-r = 8245419815086573989912567235897662412607561235885604814025447500079491044202192595152864571279969681042912188605024753854047024662013720379103778526236839
-z = 10917615097508699827805276639030692194611453656058695332553958067645900726083779376328239937088149850336439698089338637703951122165530113430740915375254019
-
-n = 11987223678888371522590014163574474585984194442215707213681942674682481521159615601278963653710214413966851484769697316184020225580354584969280759516304518930586023758786499707314773352093733555751516210440026493115763715594030219348717378054713330562469489929071833023251985410432681379225722515249114768069799538178471227684886585818611193385720863927599686403372685979041786980765941581357531078866173940675302211156740624961660458364870744891267336542629860728676639340370300143607766541999848139604816244471035977632825191833661785202909345705598016303539579822007932773115520022154167375759849411486420750385893
-e = 65537
-c = 5395740155304669350813446148984001089577243830507792794817942379567952891169689187159605803584012696669416468262913205072505580096612689488031607303556309165510626352159994870224831746393515302036056276128780176510345937509694407306122459125905753373646070294254525528004397615098037040212875934172270348504386498501381675335673389883548268757941289932688918632949813634383348968682753785403890857910581199432899158400152800186245499719012819119582095532181336705889412130586102740186044306846473639210373743145249675886413163898094394917296889841622782268580482112735272818555859742460277831777444758731534129950815
-
-nn = [p, q, r, z]
-phi = 1
-for i in nn:
-    phi *= (i - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/P55 p^2+q^2且e值较小/exp1.py
===================================================================
diff --git a/RSA_整理/整理中/P55 p^2+q^2且e值较小/exp1.py b/RSA_整理/整理中/P55 p^2+q^2且e值较小/exp1.py
deleted file mode 100644
--- a/RSA_整理/整理中/P55 p^2+q^2且e值较小/exp1.py	
+++ /dev/null	
@@ -1,29 +0,0 @@
-
-import gmpy2
-import libnum
-
-a= 24206265871435822703437518362958531356211626642007253784650483176562422122875340827288772819943478120095206127359525474074270229930748107117372266160892473927182468441245406239260325825983178681264861898227398697570877226191045205101392758306677352447609463242377314079908674367312467009340725296069934982237938083953835511845988528740319671339681988454341775949773782599028758795858243892505801751373271145879675219676812982346718542627999285987122318375982631166086424677380378329616021990407324172009541237668232705741580914256004477070860164426099061412907214192878993303911745798633464333183684318013108481194330
-c1= 126859631077098611901511232008797051138574124478480730639144977155143424488144265276530078952871200528973257851214276765041293928258819231377836450311630167556457808627111669654324359435794012547994299283010757231576308562368663215764193973190892053938581481578656240077555108821408787703658040501252208210069312753866895619962762868562608316860640231777068617867166147
-c2= 11826835748339980863398980051042008082750935496082618268555582889298555680769555714450413403033938771160762505072342684767000980792793194857952806136430859946630518327736718530548802427141716474368099142576512330275210929488407696914896855868077026602082934281710567654604010065436992743237842728041335992414634519294554988610297895321490267356849938289132035975812904
-
-p=libnum.nroot(a,2)
-print(gmpy2.is_prime(p))
-q=libnum.nroot(a-p**2,2)
-print(gmpy2.is_prime(q))
-print(p**2+q**2==a)
-print(p)
-print(q)
-
-n=p*q
-phi=(p-1)*(q-1)
-
-for e1 in range(2**16,2**15,-1):
-    try:
-        if gmpy2.is_prime(e1):
-            d=libnum.invmod(e1,phi)
-            m=pow(c1,d,n)
-            flag=libnum.n2s(m)
-            if b"flag" in flag:
-                print(flag)
-    except:
-        continue
Index: RSA_整理/整理中/P89 P xor Q/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P89 P xor Q/exp.py b/RSA_整理/整理中/P89 P xor Q/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P89 P xor Q/exp.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-import gmpy2
-import libnum
-
-n1 = 129760065142536809806311204132351918751028992005460856468227287921282870916288856718621153143496403712311222567870977852134806106569337746575721004212669688720934096637000255747173695182744851724877533272723548422615077582025310964380370466630967534492769138475503800139599085157646896457701207621103799125719
-x1 = 2535073000605892935644131126185024717717589486004324795337079143504448380472644470690389542009724270615702616436360436628913170173803134221956364909472182
-
-x1 = bin(x1)[2:].zfill(512)
-
-
-pre_sol = [(0, 0)]
-for x in range(512 - 1, -1, -1):
-    cur_pow = pow(2, len(x1) - x - 1)
-    cur_sol = []
-    for p, q in pre_sol:
-        for i in range(2):
-            for j in range(2):
-                if str((i + j) % 2) == x1[x]:
-                    cur_p = p + i * cur_pow
-                    cur_q = q + j * cur_pow
-                    if cur_p * cur_q % pow(2, len(x1) - x) == n1 % pow(2, len(x1) - x):
-                        cur_sol.append((cur_p, cur_q))
-    pre_sol = cur_sol
-
-for p, q in pre_sol:
-    if p * q == n1:
-        print(p, q)
-        break
-n=n1
-e=65537
-c=26506766042158812153297659888261605602209965867219470797339092764667310960930283597295284822004032161597620439172538662557297590428638492713429290901250304462610596251465067375290997078433094559619684696433561726225388148663591424284892872454430710006263385391764878130290791647310468786580792375046884367243
-phi=(p-1)*(q-1)
-d=gmpy2.invert(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P07 N不互素/1.例题1/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P07 N不互素/1.例题1/出题.py b/RSA_基础篇/P01-P20/P07 N不互素/1.例题1/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P07 N不互素/1.例题1/出题.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q1 = libnum.generate_prime(1024)
-q2 = libnum.generate_prime(1024)
-n1 = p * q1
-n2 = p * q2
-e = 65537
-c1 = pow(m, e, n1)
-c2 = pow(m, e, n2)
-print("n1=", n1)
-print("n2=", n2)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/题目.py b/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/题目.py	
+++ /dev/null	
@@ -1,26 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-
-k = 1024
-while 1:
-    flag = "flag{" + str(uuid.uuid4()) + "}"
-    m = libnum.s2n(flag)
-    p = libnum.generate_prime(k)
-    q = libnum.generate_prime(k)
-    n = p * q
-    tmp = libnum.generate_prime(4)
-    e1 = libnum.generate_prime(5) * tmp
-    e2 = libnum.generate_prime(5) * tmp
-    tmp2 = gmpy2.bit_length(m ** tmp) - gmpy2.bit_length(n)
-    if e1 != e2 and tmp2 < 5:
-        break
-    k += tmp2 // 2
-print(flag)
-c1 = pow(m, e1, n)
-c2 = pow(m, e2, n)
-print("e1=", e1)
-print("e2=", e2)
-print("n=", n)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_整理/整理中/P55 p^2+q^2且e值较小/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P55 p^2+q^2且e值较小/exp.py b/RSA_整理/整理中/P55 p^2+q^2且e值较小/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P55 p^2+q^2且e值较小/exp.py	
+++ /dev/null	
@@ -1,25 +0,0 @@
-
-
-a= 28797400515907272777788720807074644544027451278095400067042490341190120189352334996138241452148175532423821718090277395544089558638646831391470663953536431467111119049130395049948300576571874111379675000352239527955880644729101297251062158828728310665680365773085974598961344628703541159263959715901972088085671585667147671325742838886147670525797090587795708163528587942880046916108794634624732433742679683335015633458542741969158852013109875937308662295100897092238174768563911924051227453173789788771604903556455351861979748446947046013505433744531553377838071281706913162114769190959526192635355883054963053796050
-c= 108924077368402221545268815431286817272969610028006900673088231628674376078204899375842466488736993088949956178259569762462005357396993558049953263821557049583251318459600909979042338427701108425851181554817284087930622076981588104383083656830566307756293821683445978726751114228982520030534054029044197200795294927175993734795493800775322053110094799154708265390934095
-
-import libnum
-import gmpy2
-
-p=gmpy2.iroot(a,2)[0]
-print(p)
-q=gmpy2.iroot(a-p**2,2)[0]
-print(q)
-n=p*q
-phi=(p-1)*(q-1)
-
-for e in range(2**15,2**16):
-    try:
-        if gmpy2.is_prime(e):
-            d=gmpy2.invert(e,phi)
-            m=pow(c,d,n)
-            flag=libnum.n2s(int(m))
-            if b"flag" in flag:
-                print(flag)
-    except:
-        continue
\ No newline at end of file
Index: RSA_整理/整理中/解方程_q=inverse(e, p)/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/解方程_q=inverse(e, p)/exp2.py b/RSA_整理/整理中/解方程_q=inverse(e, p)/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_q=inverse(e, p)/exp2.py	
+++ /dev/null	
@@ -1,32 +0,0 @@
-import gmpy2
-import sympy
-
-
-n= 151913753330829779363367789673597253978048533620182497747132604072824540323836504426239804081241567027736270622449855295828160124814438423488754623643933533204599629980943193643551097211543531050709295786991507076525522113596966181359611779370941657496310723772521162794885147507996772774824707716432570452403
-c= 81337035006499494768796081417947319039576994033747417935302379695580101083380316241731843797604372408639889020709527188720865744673275465620672796534287478878369491626837235522013863942055110385349674739290041899890532139474221925394370465243005480529009377659505930236007519685951328899152586367092905739547
-e=65537
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-
-f2 = p * q - n
-for k in range(e,1,-1):
-    try:
-        f1=e*q-1-k*p
-        a = sympy.solve([f1, f2], [p, q])
-        if len(a)>0:
-            print(a)
-            break
-
-    except:
-        continue
-
-for i in a:
-    if gmpy2.is_prime(int(i[0])):
-        p = i[0]
-        q = i[1]
-        break
-import libnum
-phi=(p-1)*(q-1)
-d=gmpy2.invert(e,int(phi))
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/exp.py b/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import libnum
-import gmpy2
-
-e1= 319
-e2= 341
-n= 19474678913649097258390489993698634404112354172317306010023197847156694099670721761327194851970009271581549666788645497433190056135299423904183196428211720097778383008788705222994940143654464858441904620596484596346512546258221838544477940550376396677203257379949758730938581258992871705570847922776599616915733519585215572243928291618659043825329209345158300980691318185817290940425730134338749693091572842746733673342908172635417820608641805710421185052054000066207235255914663558591276027965181111243394719238943210391460931903101227440963377665461618104834863663740849922340905053750264657441352910246039293609643367940051324465147023474243224362152913517822894213761331561654655858920728085714369310139310386378474433039346461001868308134135362298325390206249247092133402040374395517273415606661403933705390825879552537393088886944922940487264224704885259420580277404667343842400220922804505835566052496110575752288394130226305637409179824473762478444360732822396393944426314881434132408204638085190098614163118051368269424038473349620971134861134137603699098720960181628570503797869982072783254713064905276853023938893875178460261697758362279989965392026805157348131834895995251415105178938979192148748647493811243573203145688897449401412372097795961539772849014562325239101253682046332206756094565291781
-c1= 16842097487578929747386013933836071311636435180786000333183479444850916208499056286293221277419396487143548868011121687411419006933297728370852363750322035680140458385936896809702003278914760352066710772774379515794440911494571101054875370632979664627428088945978102656878992542056983359586963711617334422080699715850848901481895781439634119925073029944688100348409613155880974748998758622098311059613939789339423339992132464171174123104436742936539749038386100174285273092064872962110961174532333866649632099684432465861670566720188498096950478835609006702822832535569740279550564709018652584734393583891347283516641024482147655707303660809974605932283320751419752851004868386620860461774410841309524864393100974165736049945040671353974167039407791367110609972671777553345885631486896801519491159873075020494968481046661647097363668961350255292613493490519231790196337146698217641580380569238319274538735600036562195973041732846936373910618424923755644620392149451787477945923716935327549760919227680773560668256346588136223461189956081899893679417046303238188505187585679903927787518164246954458038170693402350055866777159897918079058465076803320663064873176102836775732642340270760113509631774744076482366969652954901984726320611635556882140186758717303319295278262405745747267175536641440355265151505738959
-c2= 11882419292262439388395815852169631237359134106011110793207416772099869060262304736871190266614921889223922727440751243951466369747401979020372872126460796866664490364229918484890553550414970820526722511330604028963190564560830894577762895849951145089870332361493102336506523261215879020663433735193233792538730505795660978392622223090008019752787535539689555015412414444298098846960023750837015644522855346725774495736882904164804735576222229185641453887995254842617056884667691768874085981289380925271203339962843240701273777372488844619509988897713312382774750017391240294108840393576680678601939550735366514705783804254529195233406624997337321421836044641264988646831661593186219714359601246011436856726899017296455579882011341041715930436749266151654712590104320876653590775164982704496112329832684267637475509804745971848571244643987731101962814164824430221486667978354093400800773401904607552500150032713777036941455622982693087120359170639049551330567886289216980990770976252462925360856027498185494737491836702182511810948819989831212562989917938207204621062194173157840590954059982130144900289024500353220236075815227481710808333065928147587957726526698953469304559157057103278333800243155467404900528439556287027032253160322365280145370850141701695659907382027163725331629255756528099014003526137133
-
-_,s1,s2=gmpy2.gcdext(e1,e2)
-m1=(pow(c1,s1,n)*pow(c2,s2,n))%n
-print(m1)
-x=gmpy2.gcd(e1,e2)
-print(x)
-k=0
-while 1:
-    m11=m1+k*n
-    m,s=gmpy2.iroot(m11,x)
-    if s:
-        print(libnum.n2s(int(m)))
-        break
-    k+=1
-    print(k)
\ No newline at end of file
Index: RSA_整理/整理中/N分解_N为素数/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N为素数/exp.py b/RSA_整理/整理中/N分解_N为素数/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N为素数/exp.py	
+++ /dev/null	
@@ -1,11 +0,0 @@
-
-
-n= 148154651296675896639588671531887991245899355523317857856864133378874704596866069739164561540611151155620773386524661440230174403439079503005520208867551710283141582669178842689958647035790709286863564590442793793070084640307778156922675832541544024296753586304134779161678937841760612584815108857369170560491
-c= 73203423795483104101302400616071607483021998196437643931704714759801842387041489203776649887003258860032961518177161082414786236536651163413810687750548774443848659413617698472103033866839599157007933391376877675445874489496785323769549094335362722289064739327393066538379142376756413899600528991655138660692
-e = 65537
-
-phi=n-1
-import libnum
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P22 有限域开方/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P22 有限域开方/题目.py b/RSA_基础篇/P21-P40/P22 有限域开方/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P22 有限域开方/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 3
-while 1:
-    p = libnum.generate_prime(512)
-    q = libnum.generate_prime(512)
-    if (p-1)%e==0 and (q-1)%e==0:
-        break
-n=p*q
-c=pow(m,e,n)
-print(flag)
-print("n=", n)
-print("p=", p)
-print("q=", q)
-print("c=", c)
-print("e=", e)
Index: RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/题目.py b/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/题目.py	
+++ /dev/null	
@@ -1,28 +0,0 @@
-from Crypto.Util.number import *
-import random
-from secret import flag,a0,a1,b0,b1
-
-p = getPrime(512)
-q = getPrime(512)
-e = getPrime(128)
-n = p*q
-assert pow(a0,2) + e * pow(b0,2) == n
-assert pow(a1,2) + e * pow(b1,2) == n
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-
-print("c=",c)
-print("n=",n)
-print("a0=",a0)
-print("a1=",a1)
-print("b0=",b0)
-print("b1=",b1)
-
-
-c= 34007465638566836660852768374211870538357285529060206826620688555044780516477877596651414637089490522614456532732711803500304737160162560168303462221485961593760966240770414498297915175227814336224871400766371471776600674705757656616409870237891336752248110367865552469248343708419900511716030176178698949179
-n= 70043427687738872803871163276488213173780425282753969243938124727004843810522473265066937344440899712569316720945145873584064860810161865485251816597432836666987134938760506657782143983431621481190009008491725207321741725979791393566155990005404328775785526238494554357279069151540867533082875900530405903003
-a0= 8369195163678456889416121467476480674288621867182572824570660596055739410903686466334448920102666056798356927389728982948229326705483052970212882852055482
-a1= 8369195163678456889416121462308686152524805984209312455308229689034789710117101859597220211456125364647704791637845189120538925088375209397006380815921158
-b0= 25500181489306553053743739056022091355379036380919737553326529889338409847082228856006303427136881468093863020843230477979
-b1= 31448594528370020763962343185054872105044827103889010592635556324009793301024988530934510929565983517651356856506719032859
-
Index: RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E2.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E2.py b/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E2.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E2.py	
+++ /dev/null	
@@ -1,13 +0,0 @@
-
-import gmpy2
-import libnum
-
-
-
-#2 crt 中国剩余定理
-ns = [15863230586500684911356384742123404120213699052018048588650392009927565369685497256344682150189923131009586323640507773706997704860898682946308031020361302334248895233255911348365179153799197341744863134926804603973507415697810440916305092395180382239729550833607847524005391137474497849077097574452115379368463540087172800902210822143687014813631366360652583216269138116785489485772437870528892032119729929607857459621078790511144060710035933887337208301078892163837203412081114510143406013892393607932596921308889058909544584619676380766485493114814753878272881866907210235681877689493671668534251778397658670518117, 14144098469438619358682652828507744381697293556670717685553585719665002440476256008471235313826051740009083510860714991201047915737216102220242621674841600987122005914542061963618272275986835928673920375768272390912778741502655909281390948606467847118377641357547931472588836726339758576038273820470879637555458446243401248151675266602656677360819563744765522495640821496694918515669243614141704744848980746101569785439728585144841655665959389460512628800782742764147773150430552859331269667626942993392101897661719871375721143240270211821269260950380944670195863016621594387236339317938305273510719419578308449465183, 27563822879593503938377821960427219022565215631856333510782568496016547757945464794632272818101891677705256471714805217606503652132995136255720639088424576003650628211271025648183600635145895528466199068640094470078526413324708028578289949241288828542143203769199399500669311878391255837977932634772778594526940501234736059441483897017015324765266787399950699732518347518591167932031031320265136158304460199654008895095274754918153773566824931440342525688741289235153882699461549523425169846266597156773535163599640189457171272058311480951820887261040891344076039474315985825984444520336790670313179493074014037981261]
-cs = [3833095607830862948079097323254872789586576953317671099752083261949616608759231291050566542764984974722790226120399722937104503590740358249900089784508490830379531632752169777949200718567033018577184658177019404903817920024468923715441355404672443007723525750768430895425376124679225715687382380114628103058312176343693900115638265002657622618744666247132114654135429040069316368839938881716554901593031901272992940200484460436193699175500376368456706998564064693820008778900344357745691652875500810447147088715289581351501876012044611990972521570253106671158207677490849249612002954497927762168699886110455354481924, 1502420121177211156091634258259634977709023894278792755694473756163084431123774101512866316989917922052023168401167212284219907272528117024670443698990238243030221117004372456475521502350404137469088570170885409265567084376069256924135270283335242133163303599239181417949980292944203204296598188175632723968779672994090788585343302473442389865459398142634104331743517384589200789331489394375604801951994831647339839112698394141328178967516636452592385248135340133712522135715943787590172334743893259621909532456281362868290556461907936774231166936915669816509378419892149164552548131776979706381641477878931403040942, 8992204063713908492214256291861339175525948946919629972908439132005643626148678347198381531633907182877152728077958345519083406637446972079387161726967295886447791613166577391233866583354793842121902234644830640050181130381996083089350911224037154798259291124104894554037604500881250119806371348673833105103600782286898276354573884788251542211434143476774391457587885772379990104835187104619922442613860682792470389490804228050671124495925536024571104944112397143299499508504917890140939438891891453283594000764399193028606955089853654071198909973555844004685149713774167524224100487937899126480545681565581673958854]
-
-e2=libnum.solve_crt(cs,ns)
-E2=libnum.nroot(e2,89)
-print(E2)
Index: RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/推理.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/推理.txt b/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/推理.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/推理.txt	
+++ /dev/null	
@@ -1,35 +0,0 @@
-x=pow(m,p,n)
-y=pow(m,q,n)
-
-x=m^p%n 一
-y=m^q%n 二
-
-x=m^p%n
-两边同时平方个q
-x^q=(m^p)^q%n
-x^q=m^n%n
-x^q=(m^q)^p%n
-x^q=(m^q%n)^p%n
-将式 二代入
-x^q=y^p%n
-两边同时平方个p
-(x^q)^p=(y^p)^p%n
-x^(q*p)=(y^p)^p%n
-x^n=(y^p)^p%n
-
-x^n=(y^p)^p+kn
-x^n=(y^p)^p+kpq
-#两边同时模p
-x^n%p=(y^p)^p%p+kpq%p
-x^n%p=(y^p)^p%p
-#根据费马小定理
-a^p-1%p=1  a^p%p=a
-
-x^n%p=(y^p)%p
-x^n%p=y%p
-
-x^n=y+kp
-x^n-y=kp
-kp=x^n-y
-利用公约数求p
-p=gcd(x^n-y,n)
Index: RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/解析.txt b/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/解析.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-
-论文：《A Note on Euler’s Factoring Problem-Brillhart_Euler_factoring_2009》
-N=ma**2+nb**2
-N=mc**2+nd**2
-p=gcd(N,ad-bc)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P53. p^3 + q^4/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P53. p^3 + q^4/解析.txt b/RSA_基础篇/P41-P60/P53. p^3 + q^4/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P53. p^3 + q^4/解析.txt	
+++ /dev/null	
@@ -1,4 +0,0 @@
-由题目可知p^3的位数远高于q^4,所以a可以近似当作p^3。
-所以p =gmpy2.iroot(a,3)[0],之后再根据a = p^3 + q^4,
-可以得知q=gmpy2.iroot(a-p^3,4)[0]，进而r=n//p//q。
-接下来解出phi和d，再rsa解密就行
Index: RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/exp.py
===================================================================
diff --git a/RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/exp.py b/RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/其他_攻防世界[简单] 初识RSA/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-c= 8722269075970644434253339592758512788160408912707387632591552130175707843950684315083250494010055435391879036285103810263591951437829414438640307561645721347859659807138051841516634704123100270651976676182059252251162982609391666023674158274992400910869692389001622774140191223807887675081808561012755545464977015973615407965906513878979919700065923364884766974187303774330319143647840846354404070430118235352622445115153298578370521811697710289716188726587743282814946239856766713516166990341116198180068191759095913957606379780234116317390622824096667107736103270907349927467971817639795094030622157581511033950777
-n= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074584935050067254029262890188260006596141011807724688556673520261743199388391094490191001701011230322653422314758778116196105077883955436582364267530633358016652912054880813710531145973799193443828969535902856467548523653920307742364119002349899553478815101092655897400295925170383678499125295006364960124859003
-pq= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074488896197029704465200125337817646702009123916866455067019234171839614862660036737875747177391796376553159880972782837853473250804807544086701088829096838316550146794766718580877976153967582795248676367265069623900208276878140709691073369415161936376086988069213820933152601453587292943483693378833664901178324
-qp= 10466186506773626671397261081802640650185744558208505628349249045496105597268556020207175016523119333667851114848452038431498926527983706092607207796937431312520131882751891731564121558651246025754915145600686076505962750195353958781726515647847167067621799990588328894365930423844435964506372428647802381074475956379708898904933143429835002718457573266164923043251954374464149976302585916538814746811455883837138715445492053610047383292461097590195481556557381952895539341802954749542143253491617052100969586396996063822508764438280468492894012685918249843558593322831683872737943676955669923498182824352081785243246
-e = 65537
-import libnum
-
-phi=pq*qp//n
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
-
Index: RSA_整理/0.sage/P58. Crypto Lost_N/exp1.py
===================================================================
diff --git a/RSA_整理/0.sage/P58. Crypto Lost_N/exp1.py b/RSA_整理/0.sage/P58. Crypto Lost_N/exp1.py
deleted file mode 100644
--- a/RSA_整理/0.sage/P58. Crypto Lost_N/exp1.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2
-from sympy import  *
-
-n = 20955464633057600258987829727550073699845816289000240676927869818926752810905511184835302717855745473943671910742784074561535017974853574714483642916831791020944940633062963043482236587316552330558006573820423830770910893877191630012247591380869307656539553888318621170921800017818132160253923739647771452839191101104391894609403591447166963426444018303147924843072923713248135717578047687411974516038299879758561542241544862102935741869647633013298181782208467117482306148238724598730801037692668154263059348953587766571379262442743822007387408949824805991797355089583176028081305319076896384126383926193964322235633
-c = 14815997295683082265558346455845370590765145583224067337292601455640475216349267044144296003388877395546880235511728120803143112914764263292087421926972160283428440959367872665892349776616002018624301524264223581314248857537034849571849747613963209414193510408342387107662655487869098045345428379025731617851483935711671021438908270746316921057871871545763798735895118697635903815383424855759281301248295597297869474539060531099443223045844791615425429748703429968627505406271675074549912664863784774239200764403372298995457799473112713379340870305136776932539188516395526955161359417473843082895317392495109895085666
-s = 14728527428626630951705148488338433865446345521255631461200851513782412494843597938863837697938230856843797646287742397249258609197032095158567448934855031190354034543862057663422053672290704598313096289223478302733688501373756860855445632789922930577582465209872782549135254792729915747104521949095814028476908208917363509089190935273004331739978623136706041729628143765893264698948654175039064609891374587695812144855411176143224066975193255513405865992328257766815240718115442741846443490733767716842367336385132648983241895710001620533668392060358573295789752856876282590472528110546264872047138094995909454134250
-e = 65537
-m1 = gmpy2.invert(s,n)
-p,q = symbols('p q')
-eq = [p*q-n,900*p - 218*q-m1]
-result = nonlinsolve(eq,[p,q])
-result = list(result)
-p,q = int(result[1][0]),int(result[1][1])
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-lost_n = pow(c,d,n)
-print(lost_n)
\ No newline at end of file
Index: RSA_整理/整理中/P42 离散对数pow(m,flag,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P42 离散对数pow(m,flag,n)/exp.py b/RSA_整理/整理中/P42 离散对数pow(m,flag,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P42 离散对数pow(m,flag,n)/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-
-m= 159288671018830898156155351952186977642819454341811868237859009749383960869982923115380878290375192847504545108933927464025163205891819917678534983817309
-c= 12714803532028941243809606974437987862326521262004726834999494702689747253925210908627215296516631899337657950072189903034513687791841244487330214554784973
-
-n = 2 ** 512
-
-flag=sympy.discrete_log(n,c,m)
-print(flag)
-print(libnum.n2s(int(flag)))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P03 共模攻击/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P03 共模攻击/exp.py b/RSA_基础篇/P01-P20/P03 共模攻击/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P03 共模攻击/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-
-n1 = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779
-n2 = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779
-e1 = 2333
-e2 = 23333
-c1 = 1316116662134770690879814362103839780623420120527248536043840592146479052480574077985474161623763978563721124073172820410730492348846200098142706235343164470686127445583938273863894304189618247054649514955176136464273395879832878841555224421879457659795562326746943199675846414637238040550327393009642569894024250271081839428945999237716296592560124669418322569188493036148885333003876760965512925618500360394774816066758106739359762817644284120811162065280330204951295150904138010974815308787047834776406610525102814356091515999954110712767658162496023213125548829820563945272374105274832862682574678195529192009516
-c2 = 6485241395763328009719746130709898541269729483150505308808259329749145687803066648274311801821624527910483266170666538736992203392620205417714840881369386852010836477498279266591695876758050686740322941452286584178315830797555697887040771666991377055060541491757349967338300117181859105577325308779010792879713808168285776399372981366988860647334022480774711504685240194804912592209253106123423232743785805952113875347267336118332317990496240807273787216894980604742600774512296661048914646776553393778079057461747246478299158814839681875752645552215714984659603917168300453505504140987829883479097467840565806608012
-# e1 e2 互素 gcd=1
-import libnum
-import gmpy2
-
-s, s1, s2 = gmpy2.gcdext(e1, e2)
-print(s, s1, s2)
-m = (pow(c1, s1, n1) * pow(c2, s2, n2) % n1)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/威尔逊定理_题2/exp.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_题2/exp.py b/RSA_整理/整理中/威尔逊定理_题2/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_题2/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-e = 1049
-a=4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377
-c=3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270
-
-n=pow(2,e)-a
-print(n)
-#y用yafu分解
-q = 34211
-p = 170229264879724117919007372149468684565431232721075153274808454126426741324966131188484635914814926870341378228417496808202497615585946352638507704855332363766887139815236730403246238633855524068161116748612090155595549964229654262432946553891601975628848891407847198187453488358420350203927771308228162321231
-
-phi=(p-1)*(q-1)
-import libnum
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-
-# for i in range(1,p-q):
-#     m = m*i%n
-
-for i in range(p-q,p):
-    m=pow(m*i,1,p)
-m=m*libnum.invmod(-1,p)%p
-print(libnum.n2s(m))
Index: RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/解析.txt b/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/解析.txt	
+++ /dev/null	
@@ -1,28 +0,0 @@
-c1 = pow(m, e1, n)
-c2 = pow(m, e2, n)
-gcd(e1,e2)=x
-
-扩展欧几里德算法
-e1*s1+e2*s2 = x
-
-(c1^s1*c2^s2)%n = ((m^e1%n)^s1(m^e2%n)^s2)%n
-
-(c1^s1*c2^s2)%n = ((m^e1%n)^s1*(m^e2%n)^s2)%n
-
-=> (c1^s1*c2^s2)%n = ((m^e1%n)^s1%n*(m^e2%n)^s2%n)%n #(a * b) % p = (a % p * b % p) % p
-
-=> (c1^s1*c2^s2)%n = ((m^e1)^s1%n*(m^e2)^s2%n)%n #((a % p) ^ b) % p =a ^ b % p
-
-=> (c1^s1*c2^s2)%n = ((m^e1)^s1*(m^e2)^s2)%n # (a % p * b % p) % p=(a * b) % p
-
-=>(c1^s1*c2^s2)%n = ((m^(e1*s1)*(m^(e2*s2))%n #。幂的乘方，底数不变，指数相乘。
-
-(c1^s1*c2^s2)%n = (m^(e1*s1+e2*s2))%n  # 同底数幂相乘，底数不变，指数相加。
-
- 因为e1*s1+e2*s2 = x
-
- (c1^s1*c2^s2)%n = (m^11)%n
-
- m^x= (c1^s1*c2^s2)+kn
-需要爆破下k，开x次方后，得到m
-有点类型 低加密指数攻击
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P25  e=2^n次方(有限域开方)/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P25  e=2^n次方(有限域开方)/题目.py b/RSA_基础篇/P21-P40/P25  e=2^n次方(有限域开方)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P25  e=2^n次方(有限域开方)/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-e = 2**4
-n=libnum.generate_prime(512)
-c=pow(m,e,n)
-print("n=",n)
-print("c=",c)
-print("e=",e)
-n= 6706056417909032146977148210894497447322670892758026214857499040210310599424027594966978579750086907555556785153774781114612452198663154506193494869117293
-c= 1242680122077482326416451537576315381462840270521607042121188408927264012190282446465124987976978765626943470962693854431894739138078757743809643142105235
-e= 16
Index: RSA_整理/0.sage/P56.Math_Rsa/解析.txt
===================================================================
diff --git a/RSA_整理/0.sage/P56.Math_Rsa/解析.txt b/RSA_整理/0.sage/P56.Math_Rsa/解析.txt
deleted file mode 100644
--- a/RSA_整理/0.sage/P56.Math_Rsa/解析.txt	
+++ /dev/null	
@@ -1,12 +0,0 @@
-
-由于r是一个大素数，p^2 mod r 是易计算的，所以我们利用第一个同余式构建一个在模r下的一元多项式环，然后求解p。
-可能会存在多个符合条件的p，我们简单判断一下其bit长度是否是1024以及是否是素数即可找到想要的p。
-R.<x> = Zmod(r)[]
-f = x^2-a
-f = f.monic()
-res = f.roots()
-for i in res:
-    p = int(i[0])
-    if p.bit_length()==1024 and isPrime(p) ==1:
-            print(p)
-            break
Index: RSA_整理/整理中/低加密指数_e=2_rabin/题目.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=2_rabin/题目.py b/RSA_整理/整理中/低加密指数_e=2_rabin/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=2_rabin/题目.py	
+++ /dev/null	
@@ -1,32 +0,0 @@
-from gmpy2 import *
-from Crypto.Util.number import bytes_to_long, getPrime, sieve_base
-import random
-from flag import flag
-
-p = getPrime(512)
-q = getPrime(512)
-n = p*q
-e = 65537
-c = powmod(bytes_to_long(flag), e, n)
-print("c =", c)
-
-p1 = getPrime(512)
-assert p< p1
-e = 2
-print("c2 = ", powmod(p, 2, p1))
-print("p1 =", p1)
-
-p2 = getPrime(512)
-q2 = getPrime(512)
-assert p2%4 == q2%4 == 3
-print("c3 = ", powmod(q, 2, p2*q2))
-print("p2 = ", p2)
-print("q2 = ", q2)
-
-# c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-# c2 =  8943014059616554864780402232625215323717650137702921347505099596041241060991211014413068279308600979202066026580321911322396296877730441259506201930904989
-# p1 = 9332664074116371272320347910722305705338764655969305966836353509444565128652866496870138156351793824473079367512299950127043084761943406224989567423866071
-# c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-# p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-# q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-
Index: RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/task.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/task.py b/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/task.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/task.py	
+++ /dev/null	
@@ -1,43 +0,0 @@
-from Crypto.Util.number import *
-from random import *
-from flag import FLAG
-
-BITS = 1024
-flag = bytes_to_long(FLAG)
-
-p = getPrime(BITS)
-q = getPrime(BITS)
-n = p*q
-
-g = randint(1,n)
-a1 = randint(1,n)
-a2 = randint(1,n)
-
-k1 = pow(g,a1*(p-1),n)
-k2 = pow(g,a2*(q-1),n)
-
-
-print("n = %s"%n)
-print("k1 = %s"%k1)
-print("k2 = %s"%k2)
-
-b1 = randint(1,n)
-b2 = randint(1,n)
-
-c1 = (pow(k1,b1,n)*flag)%n
-c2 = (pow(k1,b2,n)*flag)%n
-
-assert flag < n
-
-print("c1 = %d"%c1)
-print("c2 = %d"%c2)
-
-'''
-n = 9858036118742475059433629759400140149605427966433887001108914046633590983713890376353399251885596714047941627222518567515364827340623251995233155278723954926352575221234142199002389819918370754455018819109203109519495493316781422680537687252828642561153832774006286448224016306003631037545643746379044035822029246823483754854602215035869280453855199171915302879406862793807947285344105991067005185493038370882005106069286893165426035453262949739088328689761676541415552066845538243916687080015277379248062286846119847500455125785281216888979581104100416760176854106890525904804003871967844912776926419778292365918733
-k1 = 4961356980843219227031667558158760111429474781353239042846946454889308337426649950562701556812878479419482114480334396560017050901408543482904510839046375272618911899662922000275482705215097956326853000314956770940510205507508883917322367747195211326932972446951696070952604655668087834669239815290687449340666091764203568518066586476150861542456340936303824392273004883320273039066213750777751436497551151274574369325153858390731248298056433816285354182588883715211738843801326831297181947562239993323202961410530072969013398669658073337273085171642258091164822631807295793886169033827781164115751086585872189121242
-k2 = 8943660577405892997099415246000964332413663135286363632645590478753346989578467429954062835807609942851365774880023144520942029315601785638267996044694835031239940919206726351387647791985293576677117144309222345482756402074345845506698221273703274410853004407629888264128027446878663894377503365831077629911487977796118893231354280680598325548327444053575447407791091256260091884824630356121390983373431984667887019137026219503921285289004358685317477667095203722657823621429988685962573778350234701781053232256494914398637744373081735647622790113318562356606831868682912936768762749860591989864642992367932846710665
-c1 = 4115578106197062017294044310891024039554438131787269391154862526142866937938155870549829472424386226484625850457327387070755337288822640509004443484397234720914851433620556887385729540499953724033259937785600491548446806766462413179765702810698096381537513314758346885921106310631278002150697458246447235914052771405341899822588463120295331632180131956205362147784798497203957828308109092025630961803808101730731656980785388965672073473370194469269645377465298620585379296063436880502566076330461976785816470877632107769103280243111778113065038163250625042092690628478547757779278811188187028242267396799577953511519
-c2 = 1069417390392712224013484466911946251479515132512683148923109806683426116132220974153759944203026795479272077929265429391851629949467649257513543604050970026412281764244254971122378729482985044535740328359563865949603944075625096242664299209143911115287867129678168308056632406522013494918385694044348658310785409548526884085469813804712945302487796400392901241763662852123731910949146709219711388725430757562836225353975933990961286601256351973981732004724397292031523206145692402321288085912884435326461626793886145952474077975796841103796283781865005879515976167187625178845457630564285181509041968859289264784559
-'''
-
-
Index: RSA_整理/整理中/P48. 障眼法/test2.py
===================================================================
diff --git a/RSA_整理/整理中/P48. 障眼法/test2.py b/RSA_整理/整理中/P48. 障眼法/test2.py
deleted file mode 100644
--- a/RSA_整理/整理中/P48. 障眼法/test2.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-def crypto01(n3, n1, n2):
-    n4 = 1
-    while n1 > 0:
-        if n1 % 2: 
-            n4 = (n4 * n3) % n2
-        n3 = n3 *n3 % n2
-        n1 //= 2
-    return n4
-
-n3=3
-n1=5
-n2=23
-c1=crypto01(n3, n1, n2)
-c2=pow(n3,n1,n2)
-print(c1)
-print(c2)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P48.方程+中国剩余/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P48.方程+中国剩余/解析.txt b/RSA_基础篇/P41-P60/P48.方程+中国剩余/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P48.方程+中国剩余/解析.txt	
+++ /dev/null	
@@ -1,3 +0,0 @@
-已知n=p*q,leak3=p+q,由此可以组成方程组，从而得到p和q。
-又leak1 = c % q、leak2 = c % p，使用中国剩余定理CRT组合一下可以计算出c。
-已知此时p,q,n,c，又e <= 500000,所以我们只需要爆破出一个合适的e即可获得flag。
\ No newline at end of file
Index: RSA_整理/整理中/低加密指数_e=2_rabin/exp.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=2_rabin/exp.py b/RSA_整理/整理中/低加密指数_e=2_rabin/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=2_rabin/exp.py	
+++ /dev/null	
@@ -1,46 +0,0 @@
-
-
-#p和q采用rabin算法求出后，求出私钥d 解出flag
-
-c2 =  8943014059616554864780402232625215323717650137702921347505099596041241060991211014413068279308600979202066026580321911322396296877730441259506201930904989
-p1 =  9332664074116371272320347910722305705338764655969305966836353509444565128652866496870138156351793824473079367512299950127043084761943406224989567423866071
-c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-
-import libnum
-import gmpy2
-
-p = pow(c2, (p1 + 1) // 4, p1)
-print(p)
-print(c2==pow(p,2,p1))
-
-e=2
-n=p2*q2
-inv_p = gmpy2.invert(p2, q2)
-inv_q = gmpy2.invert(q2, p2)
-mp = pow(c3, (p2 + 1) // 4, p2)
-mq = pow(c3, (q2 + 1) // 4, q2)
-a = (inv_p * p2 * mq + inv_q * q2 * mp) % n
-b = n - int(a)
-c = (inv_p * p2 * mq - inv_q * q2 * mp) % n
-d = n - int(c)
-# 因为rabin 加密有四种结果，全部列出。
-aa = [a, b, c, d]
-for i in aa:
-    if gmpy2.is_prime(i):
-        q=i
-        print(q)
-        print(c3==pow(q, 2, p2*q2))
-        break
-
-c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-e=65537
-n=p*q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-print(d)
-print(c)
-m=pow(c,d,n)
-print(m)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/威尔逊定理_题2/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_题2/解析.txt b/RSA_整理/整理中/威尔逊定理_题2/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_题2/解析.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-
-1.先算出N
-2.因为pq相差过大，可以直接分解
-3.后面是威尔逊定理
-（p-1)！%p=-1
\ No newline at end of file
Index: RSA_整理/整理中/费马小定理  little fermat/题目.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理  little fermat/题目.py b/RSA_整理/整理中/费马小定理  little fermat/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理  little fermat/题目.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-from Crypto.Util.number import *
-from random import *
-from libnum import *
-import gmpy2
-from secret import x
-
-flag = b'?????????'
-m = bytes_to_long(flag)
-def obfuscate(p, k):
-    nbit = p.bit_length()
-    while True:
-        l1 = [getRandomRange(-1, 1) for _ in '_' * k]
-        l2 = [getRandomRange(100, nbit) for _ in '_' * k]
-        l3 = [getRandomRange(10, nbit//4) for _ in '_' * k]
-        l4 = [getRandomRange(2, 6) for _ in '_' *k]
-        A = sum([l1[_] * 2 ** ((l2[_]+l3[_])//l4[_]) for _ in range(0, k)])
-        q = p + A
-        if isPrime(q) * A != 0:
-            return q
-
-p = getPrime(512)
-q = obfuscate(p, 5)
-e = 65537
-n = p*q
-print(f'n = {n}')
-
-assert 114514 ** x % p == 1
-m = m ^ (x**2)
-c = pow(m, e, n)
-print(f'c = {c}')
-
-'''
-n = 141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393
-c = 81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883
-'''
Index: RSA_整理/整理中/扩展中国剩余定理求_d/题目.py
===================================================================
diff --git a/RSA_整理/整理中/扩展中国剩余定理求_d/题目.py b/RSA_整理/整理中/扩展中国剩余定理求_d/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展中国剩余定理求_d/题目.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-#coding:utf-8
-import gmpy2
-from Crypto.Util.number import *
-
-p = getPrime(512)
-q = getPrime(512)
-r = getPrime(512)
-e = getPrime(32)
-print(e)
-n = p*q*r
-phi = (p-1)*(q-1)*(r-1)
-d = gmpy2.invert(e,phi)
-dp = d%((q-1)*(r-1))
-dq = d%((p-1)*(r-1))
-dr = d%((p-1)*(q-1))
-flag = 'flag{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}'
-m = bytes_to_long(flag.encode())
-c = pow(m,e,n)
-
-print(p)
-print(q)
-print(r)
-print(dp)
-print(dq)
-print(dr)
-print(c)
-
-p=12922128058767029848676385650461975663483632970994721128398090402671357430399910236576943902580268365115559040908171487273491136108931171215963673857907721
-q=10395910293559541454979782434227114401257890224810826672485874938639616819909368963527556812339196570118998080877100587760101646884011742783881592586607483
-r=8104533688439480164488403019957173637520526666352540480766865791142556044817828133446063428255474375204188144310967625626318466189746446739697284656837499
-dp=73360412924315743410612858109886169233122608813546859531995431159702281180116580962235297605024326120716590757069707814371806343766956894408106019058184354279568525768909190843389534908163730972765221403797428735591146943727032277163147380538250142612444372315262195455266292156566943804557623319253942627829
-dq=40011003982913118920477233564329052389422276107266243287367766124357736739027781899850422097218506350119257015460291153483339485727984512959771805645640899525080850525273304988145509506962755664208407488807873672040970416096459662677968243781070751482234692575943914243633982505045357475070019527351586080273
-dr=21504040939112983125383942214187695383459556831904800061168077060846983552476434854825475457749096404504088696171780970907072305495623953811379179449789142049817703543458498244186699984858401903729236362439659600561895931051597248170420055792553353578915848063216831827095100173180270649367917678965552672673
-c=220428832901130282093087304800127910055992783874826238869471313726515822196746908777026147887315019800546695346099376727742597231512404648514329911088048902389321230640565683145565701498095660019604419213310866468276943241155853029934366950674139215056682438149221374543291202295130547776549069333898123270448986380025937093195496539532193583979030254746589985556996040224572481200667498253900563663950531345601763949337787268884688982469744380006435119997310653
-
-
Index: RSA_整理/整理中/P76 l=d+p+q/wp.txt
===================================================================
diff --git a/RSA_整理/整理中/P76 l=d+p+q/wp.txt b/RSA_整理/整理中/P76 l=d+p+q/wp.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P76 l=d+p+q/wp.txt	
+++ /dev/null	
@@ -1,30 +0,0 @@
-
-leak = d+p+q
-
-m=pow(c,d,n)
-
-
-l= d+p+q
-c^d%n=m
-l= d+p+q
-d=l-(p+q)
-c^[l-(p+q)]%n=m
-c^l*c^[-(p+q)]%n=m
-
-c^(p+q)%n=?
-因为 phi=(p-1)*(q-1)
-phi=pq+1-p-q
-phi=n+1-(p+q)
-根据欧拉定理
-a^phi%n=1
-
-c^phi%n=1
-c^[n+1-(p+q)]%n=1
-c^(n+1)*c^[-(p+q)]%n=1
-c^(n+1)*c^[-(p+q)]%n*c^(p+q)%n=1*c^(p+q)%n
-结论：c^(n+1)%n=c^(p+q)%n
-
-c^l*c^[-(n+1)]%n=m
-c^[l-(n+1)]%n=m
-
-c^(l-n-1)%n=m
\ No newline at end of file
Index: RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/exp.py
===================================================================
diff --git a/RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/exp.py b/RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/exp.py
deleted file mode 100644
--- a/RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-
-n=17292721978983607267718923718634305548293925536048457222972976121289309885759139060295886920407164363819420901895875254399359595973394431387846360520765205327144836799906135362452257623307102022291445029628782238521405931409291229248463837617401580600173077583943171896679232904981458275862028378237023986028001153676164561182371356596898184187590184455478690318324741581571554812742647463631545337268021329984154569576370352598120197605991949144443013468206983245554057352904863889632138060467077134384662793998998572664873312208265022794676616426412680890902293364368502643048737873693953075550383723675285227616397
-c=11262957726526687856651103086915410919363781583740281242541133435895684557872848373183598908277896372575220350655871410741973457011773621514911795457547247638143385931212189807332453016648124312325964078502610642954492042568898679870975716747418361926689045230000169564315065425780404351118159843362139039288762708906878572375208700123570919174225712073740951890433433880474093154078203775671775455655269403226928059841306122415423576661710193478093980413703925973076259628618599441045577652991187944026246969418191789705042820179834443061730873779638409826451944533113953353770983794728402615949910204363918628794938
-e1=863730506311496380048464177431832856757231887750545766714043
-e2=1150630598011230266913144827508479988054069316592596632718511
-l=-9754612898628159268860797664298712620277301422822838483994027820600830106601927950168099205655730606742179276931554297578144525517754502663164605727502538787530579445688270704975958798751701673102593289201022186939320416269904242044099057518099075087472668747599123871745309839519713586137376001719593282486886331696055431287073705776659579254318080838375798526393908110868567114766287332516172333848631716689972944168953061446251353501793569920572432606314353875375139368870574672253417182827525543752158266074722259377017516428042286015114715209304254818046235283075281762932451264597218529734117472816995494099941
-e3=65537
-import libnum
-from sympy import *
-k=(l*e1*e2-3*e2-2*e1)//n
-phi=(l*e1*e2-3*e2-2*e1)//k
-
-d3=libnum.invmod(e3,phi)
-m=pow(c,d3,n)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/N不互素_平分明文/出题2.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_平分明文/出题2.py b/RSA_整理/整理中/N不互素_平分明文/出题2.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_平分明文/出题2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m1 = libnum.s2n(flag[:21])
-m2 = libnum.s2n(flag[21:])
-p = libnum.generate_prime(1024)
-q1 = libnum.generate_prime(1024)
-q2 = libnum.generate_prime(1024)
-n1 = p * q1
-n2 = p * q2
-e = 65537
-c1 = pow(m1, e, n1)
-c2 = pow(m2, e, n2)
-print("n1=", n1)
-print("n2=", n2)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/exp.py b/RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-c1= 6733838789459931199058149670308727260843741096811449715444872676794872013183754622858142358860953409090471275056663852093255382831595445093389027611418533073251542228105122098655672243201566013269049673257545950265921334769453660794260369460626145929789420379373117970169521395700109883829930832864801056074877674941597582088285235646759637909087476295147786527873676567410566717421523346422950182870668646809884825822209501435038703929387996244766422894277224634645939878481756200099084364167558964681594043169720137522542692333678325260048812579899748925536673077066928758276593208971988942663469169538691035047694
-c2= 8366277709764400685046974874556048480052496413928056769515579166359481224673400489772756573250767790594839615839083763898307048126689342195264524356874243599245090238779605753249119610170611143039424214272370993787185091949643348010978753622976256276642743234789172453774761354256683433570844983636116313586831018168267526012235746840937969827190549583438830654378812487809058974682282579118375227701868159940746116268326846677193441199872518360781657796776416813543201068186698175639943920727192924592723876352818832499607933389909348997360827293372712297925074254469038243598148632369617179529428124887418815513980
-n= 18817594671090743657272253762944576150137162885923542977286206265757425414985090758109410978146720356103998948718214270184508716827830409430441234706995168712344420950028012950634922410416769515072316211057242302962478172436850591043456595538065256499508407496097561437670387166881800267145313078814265201339439524924036116421018006462379533497424347501070705658003620710859122307390256199828928801036473297236708659050799043830928526868538891939761670420670258518198985039020439020541730747119429222464031076670255708095414432621713513727172536335364200547007022393362808026249379896670380908869775413898849075996507
-e1= 41981
-e2= 36209
-dd= 1053704841024395437174966126533190981616292415576606812740918909121096916949302531783101209289389200245384407349748603292561596667558819619086001066677101374394170513370717808658925536480708691940905153090874424365353443644389110969859064875481674601586495481715770875127506827571256652900931272013627123620403523296244399421027877414684962334619785788986710188422499709843593365835744664902744928748656403821851709598285463439355756235533416138015740467498790254173390459329436575772984367497189565361716119512393162905231586789553789322178062842452918483776810036444979996001994632844167024771563150952249751416556
-import libnum
-# e1*d1=1+kphi
-# e2*d2=1+kphi
-# e1e2*d1=e2+kphi
-# e2e1*d2=e1+kphi
-# 相减
-# e1e2dd=e1-e2-kphi
-kphi=e1*e2*dd-e1+e2
-d1,a,b=libnum.xgcd(e1,kphi)
-d2,a,b=libnum.xgcd(e2,kphi)
-m1=pow(c1,d1,n)
-flag1=(libnum.n2s(m1))
-m2=pow(c2,d2,n)
-flag2=(libnum.n2s(m2))
-flag=flag1+flag2
-print(flag)
Index: RSA_整理/整理中/费马小定理  little fermat/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理  little fermat/exp.py b/RSA_整理/整理中/费马小定理  little fermat/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理  little fermat/exp.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-from Crypto.Util.number import  *
-
-#用yafu分解N
-#114514 ** x % p == 1 根据费马小定理得知 x=p-1
-
-n = 141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393
-c = 81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883
-p = 11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734648016476153593841839977704512156756634066593725142934001
-q = 11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734646483980612727952939084061619889139517526028673988305393
-e = 65537
-x = p-1
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-real_m = m^(x**2)
-print(long_to_bytes(real_m))
-
-
Index: RSA_整理/整理中/N不互素_八进制/rsa38.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_八进制/rsa38.py b/RSA_整理/整理中/N不互素_八进制/rsa38.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_八进制/rsa38.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import libnum
-import uuid
-from Crypto.Util.number import *
-import gmpy2
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m=libnum.s2n(flag)
-
-p = getPrime(512)
-q1 = getPrime(512)
-q2 = getPrime(512)
-n1 = p * q1
-n2 = p * q2
-e = 65537
-c1 = pow(m, e, n1)
-c2 = pow(m, e, n2)
-
-print("e=",e)
-print("n1=",oct(n1)[2:])
-print("n2=",oct(n2)[2:])
-print("c1=",oct(c1)[2:])
-print("c2=",oct(c2)[2:])
Index: RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/解析.txt b/RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/解析.txt	
+++ /dev/null	
@@ -1,4 +0,0 @@
-由题目可知，q = next_prime(p+2**420)，由此我们可以构造一个一元多项式方程
-f = p*q-n = p*(p+2**420)-n,
-然后求解方程的根，此时p在根附近，于是在将根值往前推直至n%p=0为止，此时p为所求，则q=n//p，接下来就是普通RSA解密
-
Index: RSA_整理/整理中/威尔逊定理_题1/题目.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_题1/题目.py b/RSA_整理/整理中/威尔逊定理_题1/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_题1/题目.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-import libnum
-import uuid
-import gmpy2
-flag="flag{"+str(uuid.uuid4())+"}"
-
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=gmpy2.next_prime(p)
-n=p*q
-e=65537
-for i in range(1,p):
-    m=(m*i)%p
-
-c=pow(m,e,n)
-print("c=",c)
-print("n=",n)
-
-c= 110529037403457010976226680228015853681747082298049971277864723725003290263121993249901746108064910538219056566054434964752554464076788576969420195833066780032521421693370829430794829520809208371861674386624296250550029664837604012247019944404589941948639334516981017574704294281416080581914051559281376725552
-n= 118816369182219711551736875622148948376274930097622029542291351942110204065005093752267272235864774888160522170555189015695148555668006209122716634896476014952586332120668094812890443697140874554631953248467119041951362983074748376348829077644413780641030688747863975973112631445365138922148115802917498155841
Index: RSA_基础篇/P01-P20/P10 N是p的r次方/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P10 N是p的r次方/出题.py b/RSA_基础篇/P01-P20/P10 N是p的r次方/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P10 N是p的r次方/出题.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-n = p ** 5
-e = 65537
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/题目.py b/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-n=p*q
-x=pow(m,p,n)
-y=pow(m,q,n)
-print("n=",n)
-print("x=",x)
-print("y=",y)
-n= 49134891668897345591333219711303339144007670596441894829337290952093400283298630665826095289165809681961208520996265436195389904640720636719133734406693433810554096598929737422594980883724481297143537076662178576926253446582535294294231165454562659420944920445437433494540727083960515996626310138062984512331
-x= 24898114380189083075249478644617176345363769858290571489415603903447660857572376734333314388004344067870622511211551400003900882292855408080408530612898712604821849194436116203045876702326786310101264912258598823736415425063797050123512802647807994402065186878212852202204820369988512984137386942003350601013
-y= 16329839654620902472571665649919967371160409036961382290481165859731193710305989211665714814452109039568075053785039634104665516076749524765980529291699849764465433749870986860914147427598112865371747917109336808548762214669827404524571735460653099723747061723390924856171469660835909151652929700638010039801
Index: RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/题目.py
===================================================================
diff --git a/RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/题目.py b/RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马分解法(平方差遍历法)_yafu不能分解/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-from Crypto.Util.number import *
-import uuid
-flag = 'flag{'+str(uuid.uuid4())+"}"
-flag=flag.encode()
-import gmpy2
-
-p = getPrime(2048)
-q = gmpy2.next_prime(p)
-for i in range(3600):
-    if i%100 ==0:
-        print(i)
-        q = gmpy2.next_prime(q)
-
-n = p * q
-e = 0x10001
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print("c=",c)
-print("n=",n)
-
-c= 672211618947965669743140453815925311571913536792006320455451623329504768032653294195423386000169883889423130760702613901378226812991253672513808102582219125394975375184975680670477893616071731840578283372003364948041569480819988957797304000908767353945393438677325246806404776535366574244075168385686413998057429677446479345637389931707590541292174569539214514406772616679574446429577154994658300264395963743399028585579405127133850937684035755385536903177249615680095525438385801267848518932540742850864828339907387436386589615141301315094268048540705754105909152114279580297245086066527476038499949395262133426884691004953583259542925926790804058362169131721101062567084072161757158556850613589003126629288335943625835227353239228779420777075183829735033060565964497198340990191457681711972006273381600852029426480042505732976038791175365941723190939561137761147915067500934001302644947570092730510410631121938241136026914524548262047531029183007578603005500736114268512900086177419819102734670936080786880709408049475188517563383396936699006425388577265810859020768191320288121742321413664684223757832512232195144286087827718142083017087556701405737637649721698260338198824299502881114161665693663517201464044647997804424204974158
-n= 720239742676276892125180297266754203107040753393792061819109788620051632698640388878164710563582551395398417339060158866293057237682628696160289176629921331485290769277668335946098043360398735897380648863281934217401247716885835600015902679721336644611726200751169780657177537142181503044265719975692160293076414714427014863104317576606190229434103615882007838099640939570363751985038883738622768287033043747426059699658000045440922380571398371705698665874788485742224933932126886052739997477581453575568873105033061557099207861338425715849944147722082093066073450898210944979122392845654525731562948599513722685350626329020621203929679566003766926450933409172107168029480058053562850582746440505733686649603099598891890233020681944859657534362524449703843503708875743380789764830334189231182948902486001101574574542624002055351308194659501208428214278013747062791484983332159726081847473539435746845527406013789541657402799211822281010775911725885529125479685615597338584834382753602860489834851310346307067835494249861848527198787408591551265511901573927692939919503175252790601381174213220684859419625471536435635703766410175026305548524401754345447084444023478365533640647989603192253820896160603674343007718854266899300948742261
Index: RSA_整理/整理中/N分解_分解有合数/题目.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_分解有合数/题目.py b/RSA_整理/整理中/N分解_分解有合数/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_分解有合数/题目.py	
+++ /dev/null	
@@ -1,11 +0,0 @@
-#!/usr/bin/env python
-from Crypto.Util.number import *
-from secret import flag
-
-n = 264048827496427248021277383801027180195275776366915828865010362454006394906519399441496561006668252031429735502465174250525698696973129422193405161920872162928097673289330345041221985548078586423910246601720647996170161319016119241836415788315729493164331517547663558380515400720081995290120793014108439083514403659082115510258023834737471488528527557960636984676435543300074504679264476413252780514962473070445293528877641502742438571110744667739728450283295649865745629276142949963507003094791773183928894536793857609738113546410753895719242547720815692998871947957214118354127328586542848234994500987288641595105
-e = 65537
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print(c)
-# 76196483810925191371357319946893762223027002702624516192769497540954799651198719100683206759706879828894501526423422596543748404479640715319801018211652987852179907519286760601944889601355220646374788026632971331786307898234821477134265724962397355614076896148563340833323366935479885600112872998594315513803419069126624158092821269145991266528158747750965226483644012365861166608598063649804899693010576080857540523307078138634628539419178875838147396170651777949577793359622498517581948006585916952705460782942977789615065947303447566918741750017127110484065354974088489869377128636357092420660532261674969708694
-
Index: RSA_整理/整理中/m大于n/原始题目.py
===================================================================
diff --git a/RSA_整理/整理中/m大于n/原始题目.py b/RSA_整理/整理中/m大于n/原始题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/m大于n/原始题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2 as gp
-from secert import flag
-assert len(flag)==42
-e=0x10001
-m=bytes_to_long(flag)
-p=getPrime(160)
-q=gp.next_prime(p)
-n=p*q
-c=pow(m,e,n)
-print('n=',n)
-print('c=',c)
-"""
-n= 1938198674432811161450690669878250944830265839396906617662062291196152960227589796372087441130963
-c= 90170164274936424192415483102025065297184726282389841586708984518420677588910796600189918035116
-"""
Index: RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/tmp思路.txt
===================================================================
diff --git a/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/tmp思路.txt b/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/tmp思路.txt
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/tmp思路.txt	
+++ /dev/null	
@@ -1,29 +0,0 @@
-
-
-h = gmpy2.lcm(p - 1 , q - 1)
-h2= gmpy2.gcd(p - 1 , q - 1)
-
-phi= (p-1)*(q-1)
-phi= h*h2
-
-n = 1024
-h = 1021
-h2= 3
-(4-7)
-
-
-h = gmpy2.lcm(p - 1 , q - 1)
-h2= gmpy2.gcd(p - 1 , q - 1)
-
-
-m=c^d%n
-c=m^e%n
-
-ed=1%phi
-ed=1%h
-
-
-ed=1+kphi
-ed=1+k*h2*h
-ed=1+k*h
-ed=1%h
\ No newline at end of file
Index: RSA_整理/整理中/密钥_泄露私钥/exp.py
===================================================================
diff --git a/RSA_整理/整理中/密钥_泄露私钥/exp.py b/RSA_整理/整理中/密钥_泄露私钥/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/密钥_泄露私钥/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-from Crypto.PublicKey import RSA
-import libnum
-with open("flag.pem", 'rb') as f:
-    c = int(f.read().hex(),16)
-
-with open("pubckey.pem", 'rb') as f:
-    key = f.read()
-
-rsakey = RSA.importKey(key)
-# print(rsakey)
-
-d = rsakey.d
-n = rsakey.n
-m = pow(c,d,n)
-print(libnum.n2s(m))
-# flag{947ce8a3-40ee-46c0-a00e-0026e583f8da}
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin2.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin2.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-
-
-p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-e=2
-n=p2*q2
-
-inv_p = gmpy2.invert(p2, q2)
-inv_q = gmpy2.invert(q2, p2)
-mp = pow(c3, (p2 + 1) // 4, p2)
-mq = pow(c3, (q2 + 1) // 4, q2)
-a = (inv_p * p2 * mq + inv_q * q2 * mp) % n
-b = n - int(a)
-c = (inv_p * p2 * mq - inv_q * q2 * mp) % n
-d = n - int(c)
-# 因为rabin 加密有四种结果，全部列出。
-aa = [a, b, c, d]
-for i in aa:
-    if gmpy2.is_prime(i):
-        print(i)
-    #print(libnum.n2s(int(i)))
Index: RSA_基础篇/P41-P60/P48.方程+中国剩余/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P48.方程+中国剩余/exp.py b/RSA_基础篇/P41-P60/P48.方程+中国剩余/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P48.方程+中国剩余/exp.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-
-from sympy import *
-import libnum
-import tqdm
-n = 21256406304024147327122699985764737895162788854942201173538004689536569610046157311527715126074775927977409773971656249943602454790380966869525211733301201659688694473703188427037879868522859419364680904585572399937639393418586498509580133474303442722716959873727260844993296681950092753897902540593927952622713860163782763263944291810729056735965535138964485886748344167499818148134252327820007439830749462775149754781930983094046362696040641091039506998835624218220892441813224657845627120344960554424765109502415773475619490661527184126374299883610442465428985757004551740482644952396990065188807827114495184096249
-leak1 = 8842431959638543756327530752221031675897458993985909403335303147413741167900365489182674478419510549838159493192002672500346433589707076289344572454304647803237654059883974235710442126617587691632375039292283285577033977676131772115877520248352227419433136507412485140428972344000541898060766721412300525883
-leak2 = 127414092867622693231378230621806169422569654246682818498761930473755998913688181327473434110121174292309611256339271412324673262030535400937563769685033472683498585742711576446343086462569783541192470920638935990937187809422965809986860709074542257475025562691683977493260026623616012846939417988284096473040
-leak3 = 293130152177150437492580785085598394773458388719469800871702200331766258900690595210759869625006484354799804558552583572062231998451041105464048317708732987121458633718573774164071597186461239762511364549980544029915308083867329707804739776241438307060614946195675715671343671137725809499387682363101164970886
-
-p=Symbol("p")
-q=Symbol("q")
-f1=p+q-leak3
-f2=p*q-n
-pq1=solve([f1,f2],[p,q])
-print(pq1)
-
-p = 161562249983202700035527081166558786031731223261198195999535987465827171883730733359944156020947215855022510635343983292897557354440470230745496731228302894376018866016596714241754815953745113727125200716224341010140868299262202025976056483744622119807303134689795661748036502596285135565503272596613700276343
-q = 131567902193947737457053703919039608741727165458271604872166212865939087016959861850815713604059268499777293923208600279164674644010570874718551586480430092745439767701977059922316781232716126035386163833756203019774439784605127681828683292496816187253311811505880053923307168541440673933884409766487464694543
-
-c1=[leak2,leak1]
-pq=[q,p]
-c=libnum.solve_crt(c1,pq)
-print(c)
-phi=n-leak3+1
-for e in tqdm.trange(1,500000,2):
-    try:
-        if libnum.gcd(e,phi)==1:
-            d=libnum.invmod(e,phi)
-            m=pow(c,d,n)
-            flag=libnum.n2s(m)
-            if b"flag" in flag:
-                print(flag)
-                print(e)
-                break
-    except:
-        continue
\ No newline at end of file
Index: RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/exp.py b/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 h=pow(ap+b,e,n)/exp.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-h = 20211102
-hc= 106384684387258240722531049098438750959834432634546796126093158629033068982619149236486154320894299499989216137697597957199573714263608748031683910580852759718095289315075649033988817167708990536622109395188323875444478758847069088124040303363168928631775675927699963594399331727997914824818623771580504084965
-n= 119627119275863691775973223113889402886135310001304749817770797865393950276025694446895218068455271703211303783447183872962749202354285630879340265007787249789610239344043683675346554870710945336400432577282610068040662508411848360531439899524711843106146252725115487464478218778778258617580897992802812415013
-c= 63920671180034615728642357559640458517849002484677022618600958138002092284285653070023384124999886527636847808059927520027933499119626169362599465475988804836470570686155217116741922261621127296802099426199708590959495914836791184310591071529265191193079337973831381110449202604951001361667744959385828228605
-e = 65537
-import libnum
-p=libnum.gcd(hc-pow(h,e,n),n)
-q=n//p
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
-
Index: RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/exp.py b/RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P20 AMM算法/1.单个P/exp.py	
+++ /dev/null	
@@ -1,75 +0,0 @@
-import random
-import math
-import libnum
-import time
-from Crypto.Util.number import bytes_to_long,long_to_bytes
-#设置模数
-def GF(a):
-    global p
-    p = a
-#乘法取模
-def g(a,b):
-    global p
-    return pow(a,b,p)
-
-
-def AMM(x,e,p):
-    GF(p)
-    y = random.randint(1, p-1)
-    while g(y, (p-1)//e) == 1:
-        y = random.randint(1, p-1)
-        print(y)
-    #p-1 = e^t*s
-    t = 1
-    s = 0
-    while p % e == 0:
-        t += 1
-        print(t)
-    s = p // (e**t)
-    # s|ralpha-1
-    k = 1
-    while((s * k + 1) % e != 0):
-        k += 1
-    alpha = (s * k + 1) // e
-    #计算a = y^s b = x^s h =1
-    #h为e次非剩余部分的积
-    a = g(y, (e ** (t - 1) ) * s)
-    b = g(x, e * alpha - 1)
-    c = g(y, s)
-    h = 1
-    #
-    for i in range(1, t-1):
-        d = g(b,e**(t-1-i))
-        if d == 1:
-            j = 0
-        else:
-            j = -math.log(d,a)
-        b = b * (g(g(c, e), j))
-        h = h * g(c, j)
-        c = g(c, e)
-    #return (g(x, alpha * h)) % p
-    root = (g(x, alpha * h)) % p
-    roots = set()
-    for i in range(e):
-        mp2 = root * g(a,i) %p
-        #assert(g(mp2, e) == x)
-        roots.add(mp2)
-    return roots
-def check(m):
-    if 'flag' in m:
-        return True
-    else:
-        return False
-e = 997
-
-p = 169192804045017094881483391290948160084538928031716323749363864952453968973507689162051165395748104110078160856791051809212190939432475142974911541618441458487669050818296365973889691415623806933502603345031427784795571665740530721508383685794846991682950112717404480456329219127191697671498037366841158723543
-q = 107516396467746261711633898678341416690878446946218041251896502835689317784482747676107795221812916591321630759086326505565275611515776242892889358779953138176525964380991025435521861396436904104071935067377647496422254521013295763929078451759522826104921925202219553793049032407587608850233803508977340633609
-c = 7296955328866123806615327249732627185102404227332181196296735121223965109231156544280256472492779759505533523060928048594910557437933201943976173955148680274140829916070075759044441331615135242760488256932238858269529909634447825461421412145996149026770528870738269768868586920051310346790350630656242240675615378779267818783700730455951708072880647986805110335263926177449091704517836266354071222826319675028232152825498040408774211261689801412297908590166114832939080331783731498956480608994534272354837899909567113733994622681549792329747132730450648055557829163328285671440063040320192447007187073122676185153708
-
-
-mps = AMM(c,e,q)
-# print(mps)
-for mpp in mps:
-        solution = str(long_to_bytes(mpp))
-        if check(solution):
-            print(solution)
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/题目.py b/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-
-e = 0x10001
-n = p * q
-c = pow(m, e, n)
-leak = (pow(p, q, n) + pow(q, p, n)) % n
-print(f'{e = }')
-print(f'{c = }')
-print(f'{n = }')
-print(f'{leak = }')
Index: RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E1.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E1.py b/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E1.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp_E1.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-import  gmpy2
-import libnum
-
-n = 1605247600724752598798254639224215706171506359654961357324428027985787942008103766562745464838961569081446916113769517713344420113584254259000172572811154232107339480903672251992191997458469905064423618888336088652352540882576826988355783159237971043770132628344798937353150930071309347972804118952814447576207066147031238749098842662046825743988208813903138796789940911515825517078554074496474819128789835309636804325132602557092847746454786387067599510769382078521691609970320528531270474091713477040343897269903489441410062592732302402854035415438078656688806905350495825334584533345448091335565792091890185673190424063
-c = 751639057610677013264061431434189083017589908118307247217007533938435229431015858783222167911772848893015518607229280589985711010766459396989232072512314594917029375221335361209036112742388866873824163350886610514973038316512032459352053158417705406031466332440378871927174731975794579894912999936641163063898365134788537389162378185448090279397717831977803284480743612393591614284972981435749362255654561121758163485884075260156288337176713756471879489767416836868661153693157792733142765671887792303181376620864506386820826866340907593080654521498766421056474652652337037121881207188033108746890998208582406826010121861
-
-for i in range(2**16,2**15,-1):
-    if gmpy2.is_prime(i):
-        q=gmpy2.next_prime(i*gmpy2.iroot(n//i,2)[0]+38219)
-        if n%q==0:
-            break
-p=n//q
-phi=(p-1)*(q-1)
-d=libnum.invmod(65537,phi)
-E1=pow(c,d,n)
-print(E1)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P59. 费马小定理/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P59. 费马小定理/exp.py b/RSA_基础篇/P41-P60/P59. 费马小定理/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P59. 费马小定理/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-
-
-n = 9858036118742475059433629759400140149605427966433887001108914046633590983713890376353399251885596714047941627222518567515364827340623251995233155278723954926352575221234142199002389819918370754455018819109203109519495493316781422680537687252828642561153832774006286448224016306003631037545643746379044035822029246823483754854602215035869280453855199171915302879406862793807947285344105991067005185493038370882005106069286893165426035453262949739088328689761676541415552066845538243916687080015277379248062286846119847500455125785281216888979581104100416760176854106890525904804003871967844912776926419778292365918733
-k1 = 4961356980843219227031667558158760111429474781353239042846946454889308337426649950562701556812878479419482114480334396560017050901408543482904510839046375272618911899662922000275482705215097956326853000314956770940510205507508883917322367747195211326932972446951696070952604655668087834669239815290687449340666091764203568518066586476150861542456340936303824392273004883320273039066213750777751436497551151274574369325153858390731248298056433816285354182588883715211738843801326831297181947562239993323202961410530072969013398669658073337273085171642258091164822631807295793886169033827781164115751086585872189121242
-k2 = 8943660577405892997099415246000964332413663135286363632645590478753346989578467429954062835807609942851365774880023144520942029315601785638267996044694835031239940919206726351387647791985293576677117144309222345482756402074345845506698221273703274410853004407629888264128027446878663894377503365831077629911487977796118893231354280680598325548327444053575447407791091256260091884824630356121390983373431984667887019137026219503921285289004358685317477667095203722657823621429988685962573778350234701781053232256494914398637744373081735647622790113318562356606831868682912936768762749860591989864642992367932846710665
-c1 = 4115578106197062017294044310891024039554438131787269391154862526142866937938155870549829472424386226484625850457327387070755337288822640509004443484397234720914851433620556887385729540499953724033259937785600491548446806766462413179765702810698096381537513314758346885921106310631278002150697458246447235914052771405341899822588463120295331632180131956205362147784798497203957828308109092025630961803808101730731656980785388965672073473370194469269645377465298620585379296063436880502566076330461976785816470877632107769103280243111778113065038163250625042092690628478547757779278811188187028242267396799577953511519
-c2 = 1069417390392712224013484466911946251479515132512683148923109806683426116132220974153759944203026795479272077929265429391851629949467649257513543604050970026412281764244254971122378729482985044535740328359563865949603944075625096242664299209143911115287867129678168308056632406522013494918385694044348658310785409548526884085469813804712945302487796400392901241763662852123731910949146709219711388725430757562836225353975933990961286601256351973981732004724397292031523206145692402321288085912884435326461626793886145952474077975796841103796283781865005879515976167187625178845457630564285181509041968859289264784559
-
-import libnum
-
-p=libnum.gcd(k1-1,n)
-q=n//p
-print(n==p*q)
-
-flag=c1%p
-print(libnum.n2s(flag))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/exp.py b/RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/exp.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-# -*- coding: utf-8 -*-
-from gmpy2 import *
-from libnum import n2s, solve_crt
-
-#c1 == pow(flag, e1, p * q1)
-#c2 == pow(flag, e2, p * q2)
-e1 = 15218928658178
-e2 = 381791429275130
-q1 = 127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871
-p = 109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453
-q2 = 114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513
-c1 = 262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124
-c2 = 7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596
-n1, n2 = p*q1, p*q2
-phi1, phi2 = (p-1)*(q1-1), (p-1)*(q2-1)
-gcd1, gcd2 = gcd(e1, phi1), gcd(e2, phi2)
-print(f'gcd1 = {gcd1}')
-print(f'gcd2 = {gcd2}')
-m1 = powmod(c1, invert(e1//gcd1, phi1), n1)
-m2 = powmod(c2, invert(e2//gcd2, phi2), n2)
-
-
-gcd1_, gcd2_ = gcd(gcd1, q1-1), gcd(gcd2, q2-1)
-print(f'gcd1_ = {gcd1_}')
-print(f'gcd2_ = {gcd2_}')
-m1 = powmod(m1, invert(gcd1//gcd1_, q1-1), q1)
-m2 = powmod(m2, invert(gcd2//gcd2_, q2-1), q2)
-m = solve_crt((m1, m2), (q1, q2))
-print(m)
-print(n2s(int(iroot(m, 2)[0])))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin1.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin1.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin1.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/rabin1.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-
-
-c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-c2 =  8943014059616554864780402232625215323717650137702921347505099596041241060991211014413068279308600979202066026580321911322396296877730441259506201930904989
-p1 =  9332664074116371272320347910722305705338764655969305966836353509444565128652866496870138156351793824473079367512299950127043084761943406224989567423866071
-c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-
-
-
-import libnum
-import gmpy2
-
-mp = pow(c2, (p1 + 1) // 4, p1)
-print(mp)
-print(gmpy2.is_prime(mp))
-print(gmpy2.bit_length(mp))
-
Index: RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/exp.py b/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P42.gcd(n,ad-bc)/exp.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-import gmpy2
-from Crypto.Util.number import *
-
-c= 34007465638566836660852768374211870538357285529060206826620688555044780516477877596651414637089490522614456532732711803500304737160162560168303462221485961593760966240770414498297915175227814336224871400766371471776600674705757656616409870237891336752248110367865552469248343708419900511716030176178698949179
-n= 70043427687738872803871163276488213173780425282753969243938124727004843810522473265066937344440899712569316720945145873584064860810161865485251816597432836666987134938760506657782143983431621481190009008491725207321741725979791393566155990005404328775785526238494554357279069151540867533082875900530405903003
-a0= 8369195163678456889416121467476480674288621867182572824570660596055739410903686466334448920102666056798356927389728982948229326705483052970212882852055482
-a1= 8369195163678456889416121462308686152524805984209312455308229689034789710117101859597220211456125364647704791637845189120538925088375209397006380815921158
-b0= 25500181489306553053743739056022091355379036380919737553326529889338409847082228856006303427136881468093863020843230477979
-b1= 31448594528370020763962343185054872105044827103889010592635556324009793301024988530934510929565983517651356856506719032859
-e = (n-pow(a0,2))//pow(b0,2)
-p = gmpy2.gcd(a0*b1-a1*b0,n)
-q = n//p
-phi  = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-flag = long_to_bytes(m)
-print(flag)
Index: RSA_整理/0.sage/P52.next_prime(p+2^420)/exp.py
===================================================================
diff --git a/RSA_整理/0.sage/P52.next_prime(p+2^420)/exp.py b/RSA_整理/0.sage/P52.next_prime(p+2^420)/exp.py
deleted file mode 100644
--- a/RSA_整理/0.sage/P52.next_prime(p+2^420)/exp.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-
-
-#
-# e = 101684733522589049376051051576215902510166244234370429058800153902445053536138419222096346715560283781778705047246555278271919928248836576236044123786248907522717751222608113597458768397652361813688176017155353220911686089871315647328303370846954697334521948003485878793121446614220897034652783771882675756065
-# n = 106490064297459077911162044548396107234298314288687868971249318200714506925762583340058042587392504450330878677254698499363515259785914237880057943786202091010532603853142050802310895234445611880617572636397946757345480447391544962796834842717321639098108976593541239044249391398321435940436125823407760564233
-# c = 92367575354201067679929326801477992215675304496512806779109227230237905402825022908214026985431756172011616861246881703226244396008088878308925377019775353026444957454196182919500667632574210469783704454438904889268692709062013797002819384105191802781841741128273810101308641357704215204494382259638905571144
-#
-#
-# import gmpy2
-# import libnum
-# import sympy
-# x=2**420
-# tmp = n - x
-# p, s = gmpy2.iroot(tmp, 2)
-# while 1:
-#     print(p)
-#     p=sympy.prevprime(p)
-#     if n%p==0:
-#         print(p)
-#         break
-#     if p*p>n:
-#         break
-
-from Crypto.Util.number import *
-from gmpy2 import *
-p = getPrime(512)
-print(p)
-q = next_prime(p + 2 ** 420)
-#print(q)
-n=p*q
-tmp = n - 2**420
-p1, s = iroot(tmp, 2)
-print(p1)
-print(p1-p)
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P32 l=d+p+q/wp.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P32 l=d+p+q/wp.txt b/RSA_基础篇/P21-P40/P32 l=d+p+q/wp.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P32 l=d+p+q/wp.txt	
+++ /dev/null	
@@ -1,30 +0,0 @@
-
-leak = d+p+q
-
-m=pow(c,d,n)
-
-
-l= d+p+q
-c^d%n=m
-l= d+p+q
-d=l-(p+q)
-c^[l-(p+q)]%n=m
-c^l*c^[-(p+q)]%n=m
-
-c^(p+q)%n=?
-因为 phi=(p-1)*(q-1)
-phi=pq+1-p-q
-phi=n+1-(p+q)
-根据欧拉定理
-a^phi%n=1
-
-c^phi%n=1
-c^[n+1-(p+q)]%n=1
-c^(n+1)*c^[-(p+q)]%n=1
-c^(n+1)*c^[-(p+q)]%n*c^(p+q)%n=1*c^(p+q)%n
-结论：c^(n+1)%n=c^(p+q)%n
-
-c^l*c^[-(n+1)]%n=m
-c^[l-(n+1)]%n=m
-
-c^(l-n-1)%n=m
\ No newline at end of file
Index: RSA_整理/整理中/扩展中国剩余定理求_c/题目.py
===================================================================
diff --git a/RSA_整理/整理中/扩展中国剩余定理求_c/题目.py b/RSA_整理/整理中/扩展中国剩余定理求_c/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展中国剩余定理求_c/题目.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-
-from Crypto.Util.number import *
-import random
-# from secret import flag
-flag=''
-table='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
-pad=100-len(flag)
-for i in range(pad):
-    flag+=random.choice(table).encode()
-e=343284449
-m=bytes_to_long(flag)
-assert m>(1<<512)
-assert m<(1<<1024)
-p=getPrime(512)
-q=getPrime(512)
-r=getPrime(512)
-print('p=',p)
-print('q=',q)
-print('r=',r)
-n1=p*q
-n2=q*r
-c1=pow(m,e,n1)
-c2=pow(m,e,n2)
-print('c1=',c1)
-print('c2=',c2)
-
-
-p= 11820891196647569262137841192985418014377132106496147254821784946481523526822939129065042819464351666077658751406165276121125571355594004514547517855730743
-q= 10450390015864176713581330969519712299844487112687677452105216477861582967322473997670559995588440097951786576039009337782247912476227937589298529580432797
-r= 9484954066160968219229920429258150817546418633451929876581842443665029377287119340232501682142185708534413073877473741393278935479791561681402673403009771
-
-c1= 69574855207460025252857869494766338442370688922127811393280455950372371842144946699073877876005649281006116543528211809466226185922844601714337317797534664683681334132261584497953105754257846471069875622054326463757746293958069752489458646460121725019594141157667480846709081917530190233900184428943585065316
-c2= 66183492015178047844987766781469734325646160179923242098082430373061510938987908656007752256556018402101435698352339429316390909525615464024332856855411414576031970267795270882896721069952171988506477519737923165566896609181813523905810373359029413963666924039857159685161563252396502381297700252749204993228
-
-# e是q-1的因子
Index: RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/exp3.py
===================================================================
diff --git a/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/exp3.py b/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/exp3.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/exp3.py	
+++ /dev/null	
@@ -1,42 +0,0 @@
-
-
-e = 0x10001
-c= 9949542934673249601822379710110536682375274333294212429688584989332571435120688962792756767799023906332576991820877786082142174075762351091472858450420524999000438499038246804892307015253501997557003507879115010365751701766309706931191167213901685725286428926861333201965004869326873632404052661985741631906479109023390455968199954361183959446992180809970004376995201084933073767278979855530735756096072840384641334181432769063314242300512881491103946010394543208395998872730145780806025267971492301568490427293141120807461902093932052106811061648537600125019831876736538658644780471805555396705702634885360657660235
-n= 14775235844515544576473611382698284004133861994231391972299917039113871334718108546717938305388267655285590882177982603418940337565701637106925368292676630781520319110700106306029357476649553934570683454139537943486518666101218072140043084858740684805876092240053196287287330188619164273915005792335974297620475140547828827559062269649682393716241864595363863867012095487700403514116433664086346056485373014640655316422588972338531776150881686013955605480910803097642414475309381073364181798620439167561641939844350252283317699576359402716770493658380425200603092475286870303441165147435503582004675788584686434009043
-
-import gmpy2
-import libnum
-
-a=gmpy2.iroot(n,2)[0]
-lt=[]
-while 1:
-    a+=1
-    b2=pow(a,2)-n
-    if gmpy2.is_square(b2):
-        tmp=[]
-        b=gmpy2.iroot(b2,2)[0]
-        x1=a-b
-        x2=a+b
-        tmp.append(int(x1))
-        tmp.append(int(x2))
-        lt.append(tmp)
-    if len(lt)>=2:
-        break
-print(lt)
-assert lt[0][1]*lt[0][0]==n
-assert lt[1][1]*lt[1][0]==n
-p=libnum.gcd(lt[0][0],lt[1][0])
-print(p)
-print(gmpy2.is_prime(p))
-p1=gmpy2.next_prime(p)
-print(p1)
-q=libnum.gcd(lt[0][1],lt[1][0])
-print(q)
-print(gmpy2.is_prime(q))
-q1=gmpy2.next_prime(q)
-print(q1)
-print(n==p*p1*q*q1)
-phi=(p-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,p)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P01-P20/P01 N分解/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P01 N分解/exp.py b/RSA_基础篇/P01-P20/P01 N分解/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P01 N分解/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-import libnum
-import gmpy2
-#11
-
-n = 12627644643778588563638920097915399454513514338804142285365906525498881036764131263143503359846189659273574532609463345820199502529021505655249992763681092637840409087205147095497477412031460598408163901210084467516709264700724398765301043908384308244747517893224665577128486689416162459250095126318456522046726204794830519283112518017007468770465828497144764208737754275011224549145753948172880930824906241704072415618131966725150546352452195727712056875106693907690990407658130836472884891082069644890044024145259903993177177196801509187283280149791400422260709944706691099262186583269852628892867781015062638406807
-e = 65537
-c = 3591154430994525075059034292233285219547469362782194889629270181283842636528606554393490851841066761509914849524082427752928544931823147005056532710833510595339404286404496491815089547021604266428940702481584786412593056050015881926826382036205406303525545716475450640777471292475111436226636460600345957363695624982558394414290121846251722500596533341384706714159205414604934501768918663557451374023537565102442827170460775303421150229829840660742855663501969208548706192593969737261023358057081741247088819534013372830024084918363322257487890942468889177188305118367719047889896681307253995123323963920988776643105
-
-p1=libnum.nroot(n,2)
-p=gmpy2.next_prime(p1)
-q=n//p
-
-assert n == p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/出题.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/出题.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p * q
-e = 2
-c = pow(m, e, n)
-print("p=", p)
-print("q=", q)
-print("n=", n)
-print("c=", c)
-print("e=", e)
Index: RSA_基础篇/P01-P20/P07 N不互素/3.例题3/pub 2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P07 N不互素/3.例题3/pub 2.py b/RSA_基础篇/P01-P20/P07 N不互素/3.例题3/pub 2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P07 N不互素/3.例题3/pub 2.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-from Crypto.Util.number import *
-from flag import *
-
-n1 = 103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061
-n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073
-e = 65537
-
-m = bytes_to_long(flag)
-c = pow(m, e, n1)
-c = pow(c, e, n2)
-
-print("c = %d" % c)
-
-# output
-# c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264
Index: RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/exp.py b/RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/3.未告诉n/exp.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-
-e= 65537
-c= 698357636567367558759711776580320719340933493084285009370699059680075963885649900991785743925476703612566177770615688140828294009342321248532528135717020321638633194236304071227376280469583784324554702187585633554583585613919643029910676079881346779693579198709927276845742333575135345002140882285105432861360786403309179432637837990636999378777874170745714808407518959616602571033295952904233401306613241319072606171376709797219789705532196258388768707986490052624356816398378517468828951464911099476954775258801172030116252779985789332801046195134582313214031366595004401717278610760829369314324849813940651309932
-dp= 39896852438403708406984708916869979312352695661766157959550782921308613421683803903733849015989522374917508903612147241162520188920032456104881051889798874994032331870256031918606780154667124231064537682553043210245224684753512501513527050047942923719661361311254494006713834823643497048108777333495847434963
-#106138421686854631129229018400036851398159472928157852413033475149738282842171360115242754737605249761922824478020267657563145346915046359884131905731753556747874850163627747669970876841746268347119001668418055322502183485475581441513782109965172940605457545616224305813598725099944139072129285167660537988439
-
-import gmpy2
-
-for k in range(65537,1,-1):
-    tmp=dp*e-1
-    if tmp%k==0:
-        p = (dp*e-1)//k + 1
-        if gmpy2.is_prime(p) and gmpy2.bit_length(p)==1024:
-            print(p)
-            break
-import libnum
-
-m=pow(c,dp,p)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/中国剩余定理_e=65537/exp.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_e=65537/exp.py b/RSA_整理/整理中/中国剩余定理_e=65537/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_e=65537/exp.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-
-p1= 251223716969679284158034841648497945449
-q1= 312034879071048933569057506006677671543
-p2= 211337891216364704869900032967411360087
-q2= 297188134283417063106785912026186242733
-n1= 78390562144413299279009467011698556344448786147101545377210676133018753657807
-n2= 62807113593983181355469795214442769014099701199525162295780030497899849997771
-c1= 6211708410907396487178694692964828961624573302527469677177853845246758507683
-c2= 42421016332044012951488859938433606804129539757256957220125138277657724418334
-e=65537
-
-import libnum
-
-phi1=(p1-1)*(q1-1)
-d1=libnum.invmod(e,phi1)
-m1=pow(c1,d1,n1)
-
-phi2=(p2-1)*(q2-1)
-d2=libnum.invmod(e,phi2)
-m2=pow(c2,d2,n2)
-
-m=libnum.solve_crt([m1,m2],[n1,n2])
-print(libnum.n2s(m))
-
-
-c=libnum.solve_crt([c1,c2],[n1,n2])
-phi=(p1-1)*(p2-1)*(q1-1)*(q2-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n1*n2)
-print(libnum.n2s(m))
-
-
-
-
-
-
Index: RSA_基础篇/P41-P60/P59. 费马小定理/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P59. 费马小定理/解析.txt b/RSA_基础篇/P41-P60/P59. 费马小定理/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P59. 费马小定理/解析.txt	
+++ /dev/null	
@@ -1,34 +0,0 @@
-费马小定理
-p是素数
-a^p-1%p=1
-a^p%p=a%p
-
-k1 =pow(g,a1*(p-1),n)
-k1 =g^(a1*(p-1))%n
-k1 =g^(a1*(p-1))+kn
-#两边同时模上p
-k1%p=g^(a1*(p-1))%p+kn%p
-k1%p=g^(a1*(p-1))%p
-k1%p=(g^a1)^(p-1)%p
-#根据费马小定理
-k1%p=1
-k1-1=kp
-#利用公约数的原理
-p=gcd(k1-1,n)
-q=n//p
-
-
-c1 = (pow(k1,b1,n)*flag)%n
-c1=(k1^b1%n*flag)%n
-c1=(k1^b1%n*flag%n)%n
-c1=(k1^b1*flag)%n
-c1=(k1^b1*flag)+kn
-#两边同时模上p
-c1%p=(k1^b1*flag)%p
-c1%p=(k1^b1%p*flag%p)%p
-#k1%p=1
-c1%p=((k1%p)^b1)%p*flag%p)%p
-c1%p=(1^b1)%p*flag%p)%p
-c1%p=(1*flag%p)%p
-c1%p=flag%p
-c1%p=flag
\ No newline at end of file
Index: RSA_整理/整理中/P46 ppq与ppp/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/P46 ppq与ppp/exp2.py b/RSA_整理/整理中/P46 ppq与ppp/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/P46 ppq与ppp/exp2.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-
-# n = p*p*q
-# t = p*p*p
-# c = powmod(m, e, n)
-
-c=695811613220508521533410410135903763704380792345313822348335925535019364085287973391006658091756337941388790850576390425798691514904654108730064898721482454942897809486946732327567166790987988769649339266791907850313832700513155194190805272799105846921535231183458026312210254181900390502309417588847104213793231394168583827484833346266655392107254900891316034825295594615584454126662183967495486871019315836843964142146438253642093949267821928660254775556448682535996878217802620757735862588509198138308229216540912203307177130148261480033848867147610177292359480179993393430101548639801133574244188591918478576785400355882470444135385837723688465703459098247158590332167802098779963168624783522306380012451430590453130321881597629274617390265737278952430391455292129197120724233266227673065462001473529262207830010588159156853973215615518415224386700532070174251781750417203041543631328597659473610199473825400069638203715
-n=1103142672269025650462929198164640404493425942265040323371207998377200145961695641048087337404972402560194267711668479433180851107371884950953570911657090487495216386781924343363213345312692741516666557796484628501590914827387171553761258413087800091632213720047678961681727564158606220008125433169164157150198004730103285226539823741065685538894369776994256049396334124080247371292445543852118777801692107831636409684364527162627188519199064013189168290873007156380530155343171815296016451575866508168728518236121071519646489851701773457562537221387306293985011019040423572239157745630631563892081210964602524396761067561161422635793249097955070576281428534742447903449072401000345617064665752070967341863838984791405144869303448662169933201623421080650216122814985967041163663854812030159367202820911939914186148267664571396203542821594364250609009816872825447917845472311564561269905225280796615586133341770795940714518373
-t=1352157133681616199949626085859887520183044653936717410198546937928330648087119395184417755928058157424764679366526294873446661771336360719004981235527982326342186212780230888122434477779310176780131887691097470115061291877918798366484343129280364265571974776435297187299058517674913907506344826320352532394679559865918025267583173757096064690288877037701829014463065076789753953054738098985305066307636180043889030783678919407771611169741555877144593927382649961986384716532446388338376466150688150609936293316903617335385558920141250240529204636396228961938978325120385146208552506658553610353813640686759609897131817533377973931149277140553678119548578402674858651748611808600372129132750796909828079961432457264127651812438564831345298563698676305419952826466259729378236885089128224289161328570151277873778313473830713469181909893871432564345696475759124658962121070495959528237764331872929513704863754771030741820729657
-e=65537
-import libnum
-
-p2=libnum.gcd(n,t)
-print(p2)
-p=t//p2
-q=n//p2
-
-phi=p*(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
-b'flag{Now_u_kn0w_GCD_and_s1mpl3_RSA}'
Index: RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/题目.py b/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/题目.py	
+++ /dev/null	
@@ -1,26 +0,0 @@
-from os import urandom
-from gmpy2 import next_prime
-from Crypto.Util.number import getPrime, bytes_to_long
-
-p = getPrime(512)
-q = next_prime(p)
-f = open('flag.txt', 'rb')
-flag = bytes_to_long(f.read() + urandom(80))
-f.close()
-
-N = 1
-a = p * q
-for i in range(1, p):
-    N = (N * i) % a
-e = 65537
-m = N * flag % a
-c = pow(m, e, a)
-f = open('Encode.txt', 'w')
-f.write(f'a = {a}\n')
-f.write(f'c = {c}\n')
-f.close()
-
-
-a = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169
-c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810
-
Index: RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/出题.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/出题.py b/RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n1 = p * q
-n2 = p * q
-e1 = 2333
-e2 = 23333
-m = libnum.s2n(flag)
-c1 = pow(m, e1, n1)
-c2 = pow(m, e2, n2)
-print("n1=", n1)
-print("n2=", n2)
-print("e1=", e1)
-print("e2=", e2)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_整理/整理中/P81 p^5-p^4/exp1.py
===================================================================
diff --git a/RSA_整理/整理中/P81 p^5-p^4/exp1.py b/RSA_整理/整理中/P81 p^5-p^4/exp1.py
deleted file mode 100644
--- a/RSA_整理/整理中/P81 p^5-p^4/exp1.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2
-from sympy import *
-
-n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943
-e = 65537
-c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552
-h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446
-p,q = symbols("p q")
-f1=p*q-n
-f2=p**5-q**4-h
-result = nonlinsolve([f1,f2],[p,q])
-print(result)
-p = 10543357481374908938696626650832667304979816176891429562773232136754485382413647547320866232418359800743787286242710171986152592431595912519025867918658127
-q = 7230753434414569972828808651891325142186523078619542872286840414394373161212272545789342965212718184298307353595004152854764254216044770456139231711296409
-
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-print(long_to_bytes(m))
Index: RSA_整理/整理中/P67 求公约数+2^16/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P67 求公约数+2^16/exp.py b/RSA_整理/整理中/P67 求公约数+2^16/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P67 求公约数+2^16/exp.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-
-from Crypto.Util.number import *
-import gmpy2
-
-
-n1= 83758575069905304067768481601753574998130100929563488113032489538841228437614038849648582947130531285620158614235448872871127520586959431556641650448541549150788998002451811261912231543271446644060890282133258667768706029719891178262570370575285298224152119578339390800107889334951078164762184333747467380888
-n2= 9831276541826816789368451633385540087371496489313852209076031193730848235018296111252032115432949863700248359574145846899107616306788202793767305144740541785563939136198331219646159758474239920030391929508514991198073422146216586741498057527918329570942088288077450777684683107307014975767032857456318358064
-n= 140856289298906159437739029545347610108994755491239167745641832705764858521348872395929019274279252591208014041777481788324765489375807836151544773947219166392455703715770608717639845195855883468725012423798709748849187737712690267229995903190368828458681379150127037925721096918609588453047678178189307880401
-c= 53100585481275556435409181501721693813984862333551455563238323458270043603912938367431862281708352595284147129805506010649262433103290734582315903650224375708892586331205036195752388648357117325957081723405359096400361691896699396085109653734337210068638841322039054338712409255759760189138139488615812969337
-
-
-p = gmpy2.gcd(n1+n2,n)
-q = n//p
-print(n==p*q)
-x0=gmpy2.invert(p,q)
-x1=gmpy2.invert(q,p)
-cs = [c]
-for i in range(16):
-    ps = []
-    for c2 in cs:
-        r = pow(c2, (p + 1) // 4, p)
-        s = pow(c2, (q + 1) // 4, q)
-        x = (r * x1 * q + s * x0 * p) % n
-        y = (r * x1 * q - s * x0 * p) % n
-        if x not in ps:
-            ps.append(x)
-        if n - x not in ps:
-            ps.append(n - x)
-        if y not in ps:
-            ps.append(y)
-        if n - y not in ps:
-            ps.append(n - y)
-    cs = ps
-
-for m in ps:
-    print(m)
-    flag = long_to_bytes(m)
-    if b"flag" in flag:
-        print(flag)
-        break
-
Index: RSA_整理/整理中/威尔逊定理_中国剩余定理/题目.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_中国剩余定理/题目.py b/RSA_整理/整理中/威尔逊定理_中国剩余定理/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_中国剩余定理/题目.py	
+++ /dev/null	
@@ -1,26 +0,0 @@
-from os import urandom
-from gmpy2 import next_prime
-from Crypto.Util.number import getPrime, bytes_to_long
-
-p = getPrime(512)
-q = next_prime(p)
-f = open('flag.txt', 'rb')
-flag = bytes_to_long(f.read() + urandom(80))
-f.close()
-
-N = 1
-a = p * q
-for i in range(1, p):
-    N = (N * i) % a
-e = 65537
-m = N * flag % a
-c = pow(m, e, a)
-f = open('Encode.txt', 'w')
-f.write(f'a = {a}\n')
-f.write(f'c = {c}\n')
-f.close()
-
-
-a = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169
-c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810
-
Index: RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py b/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/exp.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-
-
-n=30183656394805107357196370521008780218925570049861387216169054600381560517999947182495011076202126709273160644370262874124968897163730207965220921744326193258358200657778320099962189812662073746049174190737733696870138306766952659451198803418491107784028230018858597385184003464461324726173514428396625540948387202029576333925489299994380848535683878295861054849479745468667103738387433149825519903102622708548565692424513329009043335422465827135431803716962258640474502935517125459339414944346181909028036411407296618452373689029356418425024260765592536962977787010290927682883045452686496078325690903591609011622649
-h1=7931354967841361677225525366492283823894590697656669456900404637225452955459348179528014507555386203547449783236442156583903338871101372231379416298673332475841552351685699019468753684327399291889812282583934998862651749254999550865157778659585029993856246293740166651157267243002539956928571725540194386430135556941941158115392325448899508409029275561616503138231793202722531305888967930689408754797831414396346372778070017194895510733987493231643773783381517911590791997520439013140032231243105419628779624880308940011265642047838378068375393042924607140918207395722101771037631402904373527746525020704973321077960
-h2=25062305644512626278872554723682407404832559793666087363222623557675770421081399157255725073992481546436446297869801169592204892169276487493822396167281356628851048304904314012479222859204326040757182928968731733798383263988650657055905914856184098798472993044182269108543644164055399204428716761331393401597324716686296821274763372210790827746803211415514983448406120655928961667116170309904869353511506605306453153870397660846835063923643054746025854226394115291053816754538318359343733736423501470671478388599730283824290134464908259553611786880318768864343694812103186674192588648465811660170572517267553070038503
-c=10566050200491898237861779349951184912833923661795629392708549602522205458471596364817182905986707189288385851923975592583132325630526948547284585859263336194822093938912144662726671172596366107238257782270698285219710310820716655379358362338786357841955558739297544011078781470192343051678062312416475601556385198608232848554523600840313604027144055153075238544724194720089578983488275239449599014873939408460792984830861989839765653149206345119917698514546823183643061389802526139765069463102068988065342441036929752116505115330236182894409200589686944842338651901005676000551266948519276949174935413951432934098553
-
-# h1=pow((p+q),e1,n)=(p^e1+q^e1)%n
-# h2=pow((p-q),e1,n)=(p^e1=q^e1)%n
-# #h1+h2
-# h1+h2=2*p^e1%n
-
-import libnum
-from tqdm import  trange
-p=libnum.gcd(h1+h2,n)
-q=n//p
-#print(n==p*q)
-phi=(p-1)*(q-1)
-
-for e in trange(1,100000000,2):
-    try:
-        if libnum.gcd(e,phi)==1:
-            d=libnum.invmod(e,phi)
-            m=pow(c,d,n)
-            flag=libnum.n2s(m)
-            if b"flag" in flag:
-                print(e)
-                print(flag)
-                break
-
-    except:
-        continue
-# 85837
-# b'flag{97065396-788c-5274-d5e0d9-ce1c33af3c}'
\ No newline at end of file
Index: RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/exp.py b/RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-c1= 6733838789459931199058149670308727260843741096811449715444872676794872013183754622858142358860953409090471275056663852093255382831595445093389027611418533073251542228105122098655672243201566013269049673257545950265921334769453660794260369460626145929789420379373117970169521395700109883829930832864801056074877674941597582088285235646759637909087476295147786527873676567410566717421523346422950182870668646809884825822209501435038703929387996244766422894277224634645939878481756200099084364167558964681594043169720137522542692333678325260048812579899748925536673077066928758276593208971988942663469169538691035047694
-c2= 8366277709764400685046974874556048480052496413928056769515579166359481224673400489772756573250767790594839615839083763898307048126689342195264524356874243599245090238779605753249119610170611143039424214272370993787185091949643348010978753622976256276642743234789172453774761354256683433570844983636116313586831018168267526012235746840937969827190549583438830654378812487809058974682282579118375227701868159940746116268326846677193441199872518360781657796776416813543201068186698175639943920727192924592723876352818832499607933389909348997360827293372712297925074254469038243598148632369617179529428124887418815513980
-n= 18817594671090743657272253762944576150137162885923542977286206265757425414985090758109410978146720356103998948718214270184508716827830409430441234706995168712344420950028012950634922410416769515072316211057242302962478172436850591043456595538065256499508407496097561437670387166881800267145313078814265201339439524924036116421018006462379533497424347501070705658003620710859122307390256199828928801036473297236708659050799043830928526868538891939761670420670258518198985039020439020541730747119429222464031076670255708095414432621713513727172536335364200547007022393362808026249379896670380908869775413898849075996507
-e1= 41981
-e2= 36209
-dd= 1053704841024395437174966126533190981616292415576606812740918909121096916949302531783101209289389200245384407349748603292561596667558819619086001066677101374394170513370717808658925536480708691940905153090874424365353443644389110969859064875481674601586495481715770875127506827571256652900931272013627123620403523296244399421027877414684962334619785788986710188422499709843593365835744664902744928748656403821851709598285463439355756235533416138015740467498790254173390459329436575772984367497189565361716119512393162905231586789553789322178062842452918483776810036444979996001994632844167024771563150952249751416556
-import libnum
-# e1*d1=1+kphi
-# e2*d2=1+kphi
-# e1e2*d1=e2+kphi
-# e2e1*d2=e1+kphi
-# 相减
-# e1e2dd=e1-e2-kphi
-kphi=e1*e2*dd-e1+e2
-d1,a,b=libnum.xgcd(e1,kphi)
-d2,a,b=libnum.xgcd(e2,kphi)
-m1=pow(c1,d1,n)
-flag1=(libnum.n2s(m1))
-m2=pow(c2,d2,n)
-flag2=(libnum.n2s(m2))
-flag=flag1+flag2
-print(flag)
Index: RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/exp.py b/RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-from Crypto.PublicKey import RSA
-import libnum
-with open("flag.pem", 'rb') as f:
-    c = int(f.read().hex(),16)
-
-with open("pubckey.pem", 'rb') as f:
-    key = f.read()
-
-rsakey = RSA.importKey(key)
-# print(rsakey)
-
-d = rsakey.d
-n = rsakey.n
-m = pow(c,d,n)
-print(libnum.n2s(m))
-# flag{947ce8a3-40ee-46c0-a00e-0026e583f8da}
\ No newline at end of file
Index: RSA_整理/整理中/e和phi不互素_基础/出题.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_基础/出题.py b/RSA_整理/整理中/e和phi不互素_基础/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_基础/出题.py	
+++ /dev/null	
@@ -1,26 +0,0 @@
-import gmpy2
-import libnum
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-while 1:
-    e = random.randint(100, 1000)
-    p = libnum.generate_prime(1024)
-    q = libnum.generate_prime(1024)
-    phi_n = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi_n)
-    if t == e:
-        continue
-    t1 = e // t
-    if gmpy2.invert(t1, phi_n) and t > 1:
-        break
-n = p * q
-c = pow(m, e, n)
-print("p=", p)
-print("q=", q)
-print("e=", e)
-print("c=", c)
Index: RSA_整理/整理中/威尔逊定理_中国剩余定理/exp1.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_中国剩余定理/exp1.py b/RSA_整理/整理中/威尔逊定理_中国剩余定理/exp1.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_中国剩余定理/exp1.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-from sympy.ntheory.modular import *
-
-n = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169
-c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810
-e = 65537
-
-
-q_near = gmpy2.iroot(n,2)[0]
-while n%q_near!=0:
-    q_near=gmpy2.next_prime(q_near)
-q = q_near
-p = n//q
-print(f"p={p}")
-print(f"q={q}")
-
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-print(m)
-
-import libnum
-m1= m*gmpy2.invert(-1,p)%p
-print("m1",m1)
-m1=m*libnum.invmod(-1,p)%p
-print("m1=",m1)
-for i in range(p,q):
-    m = m*i%q
-m2 = m * gmpy2.invert(-1,q) %q
-print(m2)
-flag = crt([p,q],[m1,m2])[0]
-print(flag)
-print(long_to_bytes(flag))
Index: RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp3.py
===================================================================
diff --git a/RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp3.py b/RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp3.py
deleted file mode 100644
--- a/RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp3.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-
-h1 = 50093225622326613075008292422460877759915494003945998204372854284540003921650010329622942305853671870107902837707316522150339183171683236657152764602752823345579480869622247717503685412525800668636956159010196311753561905001781530766572173966467239057275393133094802152327269628992603820713861541646618420878
-h2 = 54138182204090526156540838289344314365508424306000856122684364840371461563286075397011078611194948721744021927729852312251455712359409292965930200330957257663599970647245456427752092694275258542499492434099923282270391030829067271108069209887917855975216507834149958830553194937733689453852939891070345319717
-n = 73492923252226921335862976160092694723168343109847578998552424806545676705102485590582109018396196335293301477992207793074795015331695688539627515168053274306696450693022908398895858823024862255510216359826060297365219417049650614014492754852833892116199489925081177024808361975387737938050129688958893302283
-c = 55885643492172879338535436362343120600392360651900953481071576052726196711752224950414414825674996193433399601583064081256552081262034631882060652282033635354797266613373428828204534301222627906478077384127219616693941702029118120782543080199216129577621842916739299824303867659291429410555827688257577362409
-e = 65537
-h3 = pow(h2, 1919, n) * pow(2022, 1919 * 9191, n) - pow(h1, 9191, n) * pow(2021, 1919 * 9191, n)
-q = gmpy2.gcd(h3, n)
-print(q)
-p = n // q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/题目.py b/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-from Crypto.Util.number import *
-import uuid
-flag = 'flag{'+str(uuid.uuid4())+"}"
-flag=flag.encode()
-import gmpy2
-
-p = getPrime(2048)
-q = gmpy2.next_prime(p)
-for i in range(3600):
-    if i%100 ==0:
-        print(i)
-        q = gmpy2.next_prime(q)
-
-n = p * q
-e = 0x10001
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print("c=",c)
-print("n=",n)
-
-c= 672211618947965669743140453815925311571913536792006320455451623329504768032653294195423386000169883889423130760702613901378226812991253672513808102582219125394975375184975680670477893616071731840578283372003364948041569480819988957797304000908767353945393438677325246806404776535366574244075168385686413998057429677446479345637389931707590541292174569539214514406772616679574446429577154994658300264395963743399028585579405127133850937684035755385536903177249615680095525438385801267848518932540742850864828339907387436386589615141301315094268048540705754105909152114279580297245086066527476038499949395262133426884691004953583259542925926790804058362169131721101062567084072161757158556850613589003126629288335943625835227353239228779420777075183829735033060565964497198340990191457681711972006273381600852029426480042505732976038791175365941723190939561137761147915067500934001302644947570092730510410631121938241136026914524548262047531029183007578603005500736114268512900086177419819102734670936080786880709408049475188517563383396936699006425388577265810859020768191320288121742321413664684223757832512232195144286087827718142083017087556701405737637649721698260338198824299502881114161665693663517201464044647997804424204974158
-n= 720239742676276892125180297266754203107040753393792061819109788620051632698640388878164710563582551395398417339060158866293057237682628696160289176629921331485290769277668335946098043360398735897380648863281934217401247716885835600015902679721336644611726200751169780657177537142181503044265719975692160293076414714427014863104317576606190229434103615882007838099640939570363751985038883738622768287033043747426059699658000045440922380571398371705698665874788485742224933932126886052739997477581453575568873105033061557099207861338425715849944147722082093066073450898210944979122392845654525731562948599513722685350626329020621203929679566003766926450933409172107168029480058053562850582746440505733686649603099598891890233020681944859657534362524449703843503708875743380789764830334189231182948902486001101574574542624002055351308194659501208428214278013747062791484983332159726081847473539435746845527406013789541657402799211822281010775911725885529125479685615597338584834382753602860489834851310346307067835494249861848527198787408591551265511901573927692939919503175252790601381174213220684859419625471536435635703766410175026305548524401754345447084444023478365533640647989603192253820896160603674343007718854266899300948742261
Index: RSA_基础篇/P01-P20/P04 维纳攻击脚本/出题脚本.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P04 维纳攻击脚本/出题脚本.py b/RSA_基础篇/P01-P20/P04 维纳攻击脚本/出题脚本.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P04 维纳攻击脚本/出题脚本.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-import libnum
-import random
-import gmpy2
-
-# 生成随机素数
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-m = "flag{20d6e2da95dcc1fa5f5432a436c4be18}"
-# 字符串转数字
-m = libnum.s2n(m)
-n = p * q
-phi_n = (p - 1) * (q - 1)
-
-# 计算d
-while True:
-    nbits = 1024
-    d = random.getrandbits(nbits // 4)
-    if (libnum.gcd(d, phi_n) == 1 and 36 * pow(d, 4) < n):
-        break
-# 计算e
-e = libnum.invmod(d, phi_n)
-
-c = pow(m, e, n)
-
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/题目.py b/RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-import random
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-e= libnum.s2n(flag)
-n=2**512
-m = random.randint(2, n-1) | 1
-c=pow(m,e,n)
-print("m=",m)
-print("c=",c)
-m= 159288671018830898156155351952186977642819454341811868237859009749383960869982923115380878290375192847504545108933927464025163205891819917678534983817309
-c= 12714803532028941243809606974437987862326521262004726834999494702689747253925210908627215296516631899337657950072189903034513687791841244487330214554784973
-
Index: RSA_基础篇/P01-P20/P07 N不互素/1.例题1/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P07 N不互素/1.例题1/exp.py b/RSA_基础篇/P01-P20/P07 N不互素/1.例题1/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P07 N不互素/1.例题1/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-
-n1 = 22036096414750333101406538757625812613248444424049684758772058140377463618250795867832853117902163257003301132932490853355450673043991381637053778653821758783435921283322439267628837074056789021611782010444749024512216306961829453158759193969454712080047205883631153040900193575534288719429526169135614695862857156639195562501217424283401364740789214390377624598500939079307163832197534297642842744345373413423859103414676878739674227554029537817890874031594311152843060524913028526429344172693584167398664817727426767686424415189580527939256633114120720308173788544194669684834369132677253418971615644691719536820433
-n2 = 17251653165250011947306159769694143433212298910745609670733920118632739529605426957617875166211610794383631191273183964010346725508667657137931394653419082978603166138439632713627832321960586938891805262605225424775586397813147240201440036009395991700175612039074317131837185920131565272816639771739150718839592250080325774556601865770352479323350280393818365902570673799584200153846520860657815432981116910233453207519365604533077996449249223280685559491369393277114405166293011856168173778428700718404816038991911974902005969923746846815798515831172402122367026339135245751136695128279659872423027539333024854133659
-c1 = 1408937404754902028814920445701404613476983383738408959873219805755187459225302977012340464647741276263048769176603562703588286152102079561897286480939341184453940846603761664643956274520695676061184610702912592321357240109665885587701906369214592438887065694062151546241739122722790261888290706296747328780758965559093085406877315628139811554345214347799361309288949307776501119359571116522001853935560023530705364795364624152061166945046882418058831567088890277747158775876953662285842999920594778445526224560016361787941610542255000514402493843548068271595134879195073239601085319795505131267697387692179944010772
-c2 = 12175155463891225370775786368564999885751076529394005420368968241428058465831204925081389807872272508968531564921996276054143112205083003561546962102395368677755381589762565680900651699885381615975236663522025080384481537727180649424984636506390139648492522347366656322729441290553251505232488994951243521740296115895651926783520321289129993169836271218322014443396220481361007479796234525990954874013729001502984583162486353287639655447340498584591591009224750835072707121652727119580764546240945763088815277130694950594020142961659318737857067755125666395542079926757603295535345281657293981259718286213812909191174
-e = 65537
-
-p = gmpy2.gcd(n1, n2)
-print(p)
-q = n1 // p
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c1, d, n1)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp1.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp1.py b/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp1.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp1.py	
+++ /dev/null	
@@ -1,50 +0,0 @@
-
-p=12922128058767029848676385650461975663483632970994721128398090402671357430399910236576943902580268365115559040908171487273491136108931171215963673857907721
-q=10395910293559541454979782434227114401257890224810826672485874938639616819909368963527556812339196570118998080877100587760101646884011742783881592586607483
-r=8104533688439480164488403019957173637520526666352540480766865791142556044817828133446063428255474375204188144310967625626318466189746446739697284656837499
-dp=73360412924315743410612858109886169233122608813546859531995431159702281180116580962235297605024326120716590757069707814371806343766956894408106019058184354279568525768909190843389534908163730972765221403797428735591146943727032277163147380538250142612444372315262195455266292156566943804557623319253942627829
-dq=40011003982913118920477233564329052389422276107266243287367766124357736739027781899850422097218506350119257015460291153483339485727984512959771805645640899525080850525273304988145509506962755664208407488807873672040970416096459662677968243781070751482234692575943914243633982505045357475070019527351586080273
-dr=21504040939112983125383942214187695383459556831904800061168077060846983552476434854825475457749096404504088696171780970907072305495623953811379179449789142049817703543458498244186699984858401903729236362439659600561895931051597248170420055792553353578915848063216831827095100173180270649367917678965552672673
-c=220428832901130282093087304800127910055992783874826238869471313726515822196746908777026147887315019800546695346099376727742597231512404648514329911088048902389321230640565683145565701498095660019604419213310866468276943241155853029934366950674139215056682438149221374543291202295130547776549069333898123270448986380025937093195496539532193583979030254746589985556996040224572481200667498253900563663950531345601763949337787268884688982469744380006435119997310653
-
-
-n = 3  # 同余方程个数
-a = [dp,dq,dr]  # 余数
-m=[(q-1)*(r-1),(p-1)*(r-1),(p-1)*(q-1)] # 模数
-
-
-"""扩展欧几里得"""
-def exgcd(a, b):
-    if 0 == b:
-        return 1, 0, a
-    x, y, q = exgcd(b, a % b)
-    x, y = y, (x - a // b * y)
-    return x, y, q
-"""扩展中国剩余定理"""
-def CRT():
-    if n == 1:
-        if m[0] > a[0]:
-            return a[0];
-        else:
-            return -1;
-
-    for i in range(n):
-        if m[i] <= a[i]:
-            return -1;
-        x, y, d = exgcd(m[0], m[i])
-        if (a[i] - a[0]) % d != 0:
-            return -1;
-
-        t = m[i] // d;
-        x = (a[i] - a[0]) // d * x % t
-        a[0] = x * m[0] + a[0];
-        m[0] = m[0] * m[i] // d;
-        a[0] = (a[0] % m[0] + m[0]) % m[0]
-        # print(a[0])
-    return a[0];
-
-
-
-ans = CRT()
-
-print(ans)
Index: RSA_基础篇/P01-P20/P15 m高位泄露/出题脚本.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P15 m高位泄露/出题脚本.py b/RSA_基础篇/P01-P20/P15 m高位泄露/出题脚本.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P15 m高位泄露/出题脚本.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p * q
-m1 = ((m >> 12) << 12)
-e = 3
-c = pow(m, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
-print("m1=", m1)
Index: RSA_整理/整理中/dp泄露_常规/出题.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_常规/出题.py b/RSA_整理/整理中/dp泄露_常规/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_常规/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-print("d=",d)
-dp = d % (p - 1)
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print("dp=", dp)
Index: RSA_整理/0.sage/P58. Crypto Lost_N/解析.txt
===================================================================
diff --git a/RSA_整理/0.sage/P58. Crypto Lost_N/解析.txt b/RSA_整理/0.sage/P58. Crypto Lost_N/解析.txt
deleted file mode 100644
--- a/RSA_整理/0.sage/P58. Crypto Lost_N/解析.txt	
+++ /dev/null	
@@ -1,9 +0,0 @@
-
-
-
-
-https://blog.csdn.net/luochen2436/article/details/129181271?spm=1001.2014.3001.5501
-拿到题目，d = getPrime(435)，一眼丁真就发现是共私钥指数攻击，利用5组n,e构造一个格子，解出d
-仔细看了一下题目代码以及output，output中有6组c和e并且最后一组的c与e之间缺少了n，
-我猜出题人应该是循环生成了6组数据，然后将第6组的n作为part2部分的m，但是没有修改题目代码导致做题者审计代码得出的预期输出与output不一致。
-
Index: RSA_整理/整理中/A01 基础_已知e,d,n,c/exp.py
===================================================================
diff --git a/RSA_整理/整理中/A01 基础_已知e,d,n,c/exp.py b/RSA_整理/整理中/A01 基础_已知e,d,n,c/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/A01 基础_已知e,d,n,c/exp.py	
+++ /dev/null	
@@ -1,10 +0,0 @@
-
-import libnum
-
-n= 14685532699024100754723222996385121368294636639693750794149020559314539676501066491415844320990799035552463714403031072164829458702780715523923962246149328887690893262271480633736651143634392056066729487305166335857950659680699210683976952113003674104898343893168719508462975991580551696824510044412974267585312807460664570245139015568859112921920860421973308538800641652781742897528769692264955229878206911313791989518088100099218315995549914435278654377368771668058107642713121127495780090852489015591581414806590111818355121157794129813430710822697558144598815860067978324469091074823400715400666808772858128261149
-d= 10655677501818714057545408290692306276248758047017058020876274084213258239416744966450976471246402284779991562186357882946337721435118045765127426899173581894141706933500094886492805160951008521020815528782559085235105783294876017603112074153984218299742602608478449101819428678878037976091306073545785820932796422483686522431260926680891531210950251782422010888047909274618007401655588566411972291526501884077240225819170340160706732901152519829956055255218835518533347875405883278225018714890042991619568316304958478955576005445279807142753050999269866987221510643119355301877102904394259290548609330522059178100989
-e= 65537
-c= 7937297427288435728721973474925856865675225171317301007619581716746999628275946964127516634203401830643076435690247635478297903236185011960902817030042080567027165802992734580344202744697251074454156026031417427325660809453340428989949816426637434868049018580855865080715251672252410696685286047485204432648545886024276695749435709592994477514818763551176789963387889424072650811645828675090859926233585219662579177051353763021116106877502871331756544361402971459889233069752657661921397258845893293005099736406362733668960163109452223071514272504206470939914043855546880424121530822318600645513435826636440478681928
-
-m=pow(c, d, n)
-print(libnum.n2s(m).decode())
\ No newline at end of file
Index: RSA_整理/整理中/N不互素_八进制/rsa38.txt
===================================================================
diff --git a/RSA_整理/整理中/N不互素_八进制/rsa38.txt b/RSA_整理/整理中/N不互素_八进制/rsa38.txt
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_八进制/rsa38.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-e= 65537
-n1= 76640333332630162663123751606067435314336340654460103173534423466657674524375020626274205515475640036025332334046453527002176045523313406356544627207141064266737007436752732620171567525475073130377747115360345241545410630734723724753756651027457666316761714427366775234473273724373416332117675121006167145404262026766633414550316157472176323
-n2= 124440313565503113000305130236245224122660032520451764026576620601165065563101713415477663266674267245631322714735471550234417000764056645642165031070037322521161537165526540073654737460344673101304077315130176073622527457476522713203621742470310504203143711273625273411067051223022646617226224236404164207644473450316235021766627574031513547
-c1= 35746561223300251331740725746543176021307604676022271355436612677312027341112473231206167707223243600125163327527673606771420747073156663072514253675300213137523770242670170012456726576735146623016624071313751660414571706041731612540715367514460256503435430051736012262234256065342703214571774067503205305210726131331540216432603612121112173
-c2= 6217504745466537325427463135300561172247454650745667061651070756341735431253416015546400534151223222706757013035744612573104071602076357442423232020603102603013021144417600330111442776261323657064116257010627401253032401015171774101735152126253022627567234620256300364116207041044744056267045473145251032364771520345224051003432031155345131
Index: RSA_整理/整理中/P47. p^3 + q^4/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/P47. p^3 + q^4/解析.txt b/RSA_整理/整理中/P47. p^3 + q^4/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P47. p^3 + q^4/解析.txt	
+++ /dev/null	
@@ -1,4 +0,0 @@
-由题目可知p^3的位数远高于q^4,所以a可以近似当作p^3。
-所以p =gmpy2.iroot(a,3)[0],之后再根据a = p^3 + q^4,
-可以得知q=gmpy2.iroot(a-p^3,4)[0]，进而r=n//p//q。
-接下来解出phi和d，再rsa解密就行
Index: RSA_整理/整理中/P67 求公约数+2^16/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P67 求公约数+2^16/题目.py b/RSA_整理/整理中/P67 求公约数+2^16/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P67 求公约数+2^16/题目.py	
+++ /dev/null	
@@ -1,29 +0,0 @@
-
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-while 1:
-    p = libnum.generate_prime(512)
-    q = libnum.generate_prime(512)
-    if p>q:
-        break
-assert p > q
-n = p*q
-e = 65536  #2**16
-num1 = (pow(p,e,n)-pow(q,e,n)) % n
-num2 = pow(p-q,e,n)
-c = pow(m,e,n)
-
-print("n1=",num1)
-print("n2=",num2)
-print("n=",n)
-print("c=",c)
-
-
-n1= 83758575069905304067768481601753574998130100929563488113032489538841228437614038849648582947130531285620158614235448872871127520586959431556641650448541549150788998002451811261912231543271446644060890282133258667768706029719891178262570370575285298224152119578339390800107889334951078164762184333747467380888
-n2= 9831276541826816789368451633385540087371496489313852209076031193730848235018296111252032115432949863700248359574145846899107616306788202793767305144740541785563939136198331219646159758474239920030391929508514991198073422146216586741498057527918329570942088288077450777684683107307014975767032857456318358064
-n= 140856289298906159437739029545347610108994755491239167745641832705764858521348872395929019274279252591208014041777481788324765489375807836151544773947219166392455703715770608717639845195855883468725012423798709748849187737712690267229995903190368828458681379150127037925721096918609588453047678178189307880401
-c= 53100585481275556435409181501721693813984862333551455563238323458270043603912938367431862281708352595284147129805506010649262433103290734582315903650224375708892586331205036195752388648357117325957081723405359096400361691896699396085109653734337210068638841322039054338712409255759760189138139488615812969337
Index: RSA_整理/整理中/解方程_(n + p) % (q-1)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/解方程_(n + p) % (q-1)/题目.py b/RSA_整理/整理中/解方程_(n + p) % (q-1)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_(n + p) % (q-1)/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-if p <= q:
-    p, q = q, p
-e = 0x10001
-n = p * q
-c = pow(m, e, n)
-leak = (n + p) % (q-1)
-print(f'{e = }')
-print(f'{c = }')
-print(f'{n = }')
-print(f'{leak = }')
Index: RSA_整理/整理中/扩展中国剩余定理求_c/exp1.py
===================================================================
diff --git a/RSA_整理/整理中/扩展中国剩余定理求_c/exp1.py b/RSA_整理/整理中/扩展中国剩余定理求_c/exp1.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展中国剩余定理求_c/exp1.py	
+++ /dev/null	
@@ -1,51 +0,0 @@
-
-
-p= 11820891196647569262137841192985418014377132106496147254821784946481523526822939129065042819464351666077658751406165276121125571355594004514547517855730743
-q= 10450390015864176713581330969519712299844487112687677452105216477861582967322473997670559995588440097951786576039009337782247912476227937589298529580432797
-r= 9484954066160968219229920429258150817546418633451929876581842443665029377287119340232501682142185708534413073877473741393278935479791561681402673403009771
-c1= 69574855207460025252857869494766338442370688922127811393280455950372371842144946699073877876005649281006116543528211809466226185922844601714337317797534664683681334132261584497953105754257846471069875622054326463757746293958069752489458646460121725019594141157667480846709081917530190233900184428943585065316
-c2= 66183492015178047844987766781469734325646160179923242098082430373061510938987908656007752256556018402101435698352339429316390909525615464024332856855411414576031970267795270882896721069952171988506477519737923165566896609181813523905810373359029413963666924039857159685161563252396502381297700252749204993228
-n1=p*q
-n2=r*q
-n =2   # 同余方程个数
-a = [c1,c2]  # 余数
-m=[n1,n2] # 模数
-
-"""扩展欧几里得"""
-def exgcd(a, b):
-    if 0 == b:
-        return 1, 0, a
-    x, y, q = exgcd(b, a % b)
-    x, y = y, (x - a // b * y)
-    return x, y, q
-
-
-"""扩展中国剩余定理"""
-def CRT():
-    if n == 1:
-        if m[0] > a[0]:
-            return a[0];
-        else:
-            return -1;
-
-    for i in range(n):
-        if m[i] <= a[i]:
-            return -1;
-
-        x, y, d = exgcd(m[0], m[i])
-        if (a[i] - a[0]) % d != 0:
-            return -1;
-
-        t = m[i] // d;
-        x = (a[i] - a[0]) // d * x % t
-        a[0] = x * m[0] + a[0];
-        m[0] = m[0] * m[i] // d;
-        a[0] = (a[0] % m[0] + m[0]) % m[0]
-        # print(a[0])
-    return a[0];
-
-ans = CRT()
-
-print(ans)
-
-c=1051311603595400257980451542641726560928968569258042231276292652088507209347204465348483100080899623360705698249443255030368048979130482813052608650445300611553758759647722097778171873596181791974080589234136090632966294575063306439633769753905530026312180583106024810580642209905594594119077985110929675466498207370604560182924468112540068499274911327513697378581931822685826876372554425845071592347470781982215295908151280216722253883169708944885906780090210923
\ No newline at end of file
Index: RSA_整理/整理中/维纳攻击/exp.py
===================================================================
diff --git a/RSA_整理/整理中/维纳攻击/exp.py b/RSA_整理/整理中/维纳攻击/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/维纳攻击/exp.py	
+++ /dev/null	
@@ -1,79 +0,0 @@
-
-import gmpy2
-import libnum
-
-
-def continuedFra(x, y):
-    """计算连分数
-    :param x: 分子
-    :param y: 分母
-    :return: 连分数列表
-    """
-    cf = []
-    while y:
-        cf.append(x // y)
-        x, y = y, x % y
-    return cf
-
-
-def gradualFra(cf):
-    """计算传入列表最后的渐进分数
-    :param cf: 连分数列表
-    :return: 该列表最后的渐近分数
-    """
-    numerator = 0
-    denominator = 1
-    for x in cf[::-1]:
-        # 这里的渐进分数分子分母要分开
-        numerator, denominator = denominator, x * denominator + numerator
-    return numerator, denominator
-
-
-def solve_pq(a, b, c):
-    """使用韦达定理解出pq，x^2−(p+q)∗x+pq=0
-    :param a:x^2的系数
-    :param b:x的系数
-    :param c:pq
-    :return:p，q
-    """
-    par = gmpy2.isqrt(b * b - 4 * a * c)
-    return (-b + par) // (2 * a), (-b - par) // (2 * a)
-
-
-def getGradualFra(cf):
-    """计算列表所有的渐近分数
-    :param cf: 连分数列表
-    :return: 该列表所有的渐近分数
-    """
-    gf = []
-    for i in range(1, len(cf) + 1):
-        gf.append(gradualFra(cf[:i]))
-    return gf
-
-
-def wienerAttack(e, n):
-    """
-    :param e:
-    :param n:
-    :return: 私钥d
-    """
-    cf = continuedFra(e, n)
-    gf = getGradualFra(cf)
-    for d, k in gf:
-        if k == 0: continue
-        if (e * d - 1) % k != 0:
-            continue
-        phi = (e * d - 1) // k
-        p, q = solve_pq(1, n - phi + 1, n)
-        if p * q == n:
-            return d
-
-
-n= 111749447895139230839559322489891344231100409579634157414462477755412375609827399472018112260324339290341823044943955176508350678014062725785913194741174512284287660355439786638026768307433208205692831534843081553639308631917818827370503712317601370805988083920092556408906177082007091662779066400976078908703
-e= 4824404713353982239347483470705373140087707706686656857541884256398698831685559474171266996247533820761516873532575695632452091674897804740253757226807444666425113208739256903249342294306803684078518028723783094611419967545606759331743886443757873971368284087817112095513335582516786937242736354746287900437
-c= 94596647150882401757338260921292127273369802529249057666820406423331274054309633624633515606870749126059424410586817777066639112973108706954882835882375431890860342058767504558643859117867766223734473523293930285496997197053436498595192744642935492100335444862331498717392767466750085202282045483139413182858
-
-d = wienerAttack(e, n)
-print(d)
-m = pow(c, d, n)
-print(libnum.n2s(m).decode())
Index: RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/exp.py b/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-
-e = 65537
-phi = 98229890689284912089157469320766533791995454910192245906925225670195818406213091522014617153508961926275340781138620279250871290490873820930414041953789279215193143006258942396087516751221787778485548659324564021606857623517821094138942269722883193348321303203233297445863729579811837657596605227772947768080
-c = 20962649632855841088231373617057756055795073764826640468523117901947795570191538819434503909156672490273164571512993513456958532656058586024929659925126633909116178539998046336126716552474329852733455142305774551889295732464058882055828240152313078876041502758035842268176085433166898402827107253041748761839
-p1 = 9278107621912111502897373552245845971739215588186465664496052995069919521787577753719495078780428864673954897367324663969013147023292682927178810784000630
-q1 = 1888254482465757731585051308443185269531054824465971018646930721602120686960471254468405491101133069657301849498853283496490197246867160626826664577479894
-
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-f1 = p1 * p + q1 * q - 1 - p * q
-f2 = (p - 1) * (q - 1) - phi
-pq = sympy.solve([f1, f2], [p, q])
-p = (pq[1][0])
-q = (pq[1][1])
-n = p * q
-d = gmpy2.invert(e, phi)
-m = pow(c, int(d), int(n))
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/出题.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/出题.py b/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/出题.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-from Crypto.Util.number import *
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-
-e = 65537
-p = getPrime(1024)
-q = getPrime(1024)
-n = p * q
-c = pow(m, e, n)
-hint = pow(2020 * p + 2021, q, n)
-print(f'n={n}')
-print(f'c={c}')
-print(f'hint={hint}')
Index: RSA_整理/整理中/P83 AMM算法/2.AMM_sage pq/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P83 AMM算法/2.AMM_sage pq/题目.py b/RSA_整理/整理中/P83 AMM算法/2.AMM_sage pq/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P83 AMM算法/2.AMM_sage pq/题目.py	
+++ /dev/null	
@@ -1,7 +0,0 @@
-
-
-c = 15433214846771804225704093824935372144929516863829752998270111032551363583267576397009018518790803908369965458162930857063271509296349091229352855725285388975497906340053281554202527432848881160125418406408621879995822551367228501163128699032015069585502994319524445505522625561831240862136447585120010288772692097621553249775117843166714346924868089146429002417223863834435968726551668931140147337199939823985783939085842479154589529244209712172799274024573845157268545992888944742377166586536479490962335287124809557709167220756920767331929168230518135523463578566851417486746667008938122693256033127001185017237773
-p = 0xa892eb59b175bcf896be2176598f278437fe10ef032279f06e1092143acfb3c16b31811cca5286699595c2720c652ee64f8adc92c8b16a5601dd981d6f839ce9c0513db30de88c2ec6cae1a726acbd235ea946631bde633707d766287a2f075e9aace1606bd8b4f52d4f5b87dfb81f14fbc5338004575e9430257e180a169eff
-q = 0xe3d47225b77e56129dc3fed716181845f89fa15b2eb35453ffdc0f05cdf57c0d90410911d209818e886b202bc4893ebe85a07ef670122f0e70092de1b7963c3b24a58c6a9ec9ed677db3473b1882d10d550e45c18fd57b85a70a5401a074d36760e85c7e6258f0ab08fa69cd433709910fad6e145f7b85f589e83d61d3baf6ad
-n = p * q
-e = 0x3
Index: RSA_基础篇/P41-P60/P60. 障眼法/题目解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P60. 障眼法/题目解析.txt b/RSA_基础篇/P41-P60/P60. 障眼法/题目解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P60. 障眼法/题目解析.txt	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-a=getPrime(512)
-p=sympy.nextprime(13*a)
-q=sympy.prevprime(25*a)
-number2=p*q
-
-这个里可以分解n2，因为
-
-def crypto01(number1, number2, number3):
-    number4 = 1
-    while number2 > 0:
-        if number2 % 2:
-            number4 = (number4 * number1) % number3
-        number1 = number1 ** 2 % number3
-        number2 //= 2
-    return number4
-
-这个函数其实个 pow函数
\ No newline at end of file
Index: RSA_整理/整理中/N不互素_基础题目/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_基础题目/exp.py b/RSA_整理/整理中/N不互素_基础题目/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_基础题目/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-
-n1 = 22036096414750333101406538757625812613248444424049684758772058140377463618250795867832853117902163257003301132932490853355450673043991381637053778653821758783435921283322439267628837074056789021611782010444749024512216306961829453158759193969454712080047205883631153040900193575534288719429526169135614695862857156639195562501217424283401364740789214390377624598500939079307163832197534297642842744345373413423859103414676878739674227554029537817890874031594311152843060524913028526429344172693584167398664817727426767686424415189580527939256633114120720308173788544194669684834369132677253418971615644691719536820433
-n2 = 17251653165250011947306159769694143433212298910745609670733920118632739529605426957617875166211610794383631191273183964010346725508667657137931394653419082978603166138439632713627832321960586938891805262605225424775586397813147240201440036009395991700175612039074317131837185920131565272816639771739150718839592250080325774556601865770352479323350280393818365902570673799584200153846520860657815432981116910233453207519365604533077996449249223280685559491369393277114405166293011856168173778428700718404816038991911974902005969923746846815798515831172402122367026339135245751136695128279659872423027539333024854133659
-c1 = 1408937404754902028814920445701404613476983383738408959873219805755187459225302977012340464647741276263048769176603562703588286152102079561897286480939341184453940846603761664643956274520695676061184610702912592321357240109665885587701906369214592438887065694062151546241739122722790261888290706296747328780758965559093085406877315628139811554345214347799361309288949307776501119359571116522001853935560023530705364795364624152061166945046882418058831567088890277747158775876953662285842999920594778445526224560016361787941610542255000514402493843548068271595134879195073239601085319795505131267697387692179944010772
-c2 = 12175155463891225370775786368564999885751076529394005420368968241428058465831204925081389807872272508968531564921996276054143112205083003561546962102395368677755381589762565680900651699885381615975236663522025080384481537727180649424984636506390139648492522347366656322729441290553251505232488994951243521740296115895651926783520321289129993169836271218322014443396220481361007479796234525990954874013729001502984583162486353287639655447340498584591591009224750835072707121652727119580764546240945763088815277130694950594020142961659318737857067755125666395542079926757603295535345281657293981259718286213812909191174
-e = 65537
-
-p = gmpy2.gcd(n1, n2)
-print(p)
-q = n1 // p
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c1, d, n1)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/题目.py b/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/2.sage解法/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-n=p*q
-x=pow(m,p,n)
-y=pow(m,q,n)
-print("n=",n)
-print("x=",x)
-print("y=",y)
-n= 49134891668897345591333219711303339144007670596441894829337290952093400283298630665826095289165809681961208520996265436195389904640720636719133734406693433810554096598929737422594980883724481297143537076662178576926253446582535294294231165454562659420944920445437433494540727083960515996626310138062984512331
-x= 24898114380189083075249478644617176345363769858290571489415603903447660857572376734333314388004344067870622511211551400003900882292855408080408530612898712604821849194436116203045876702326786310101264912258598823736415425063797050123512802647807994402065186878212852202204820369988512984137386942003350601013
-y= 16329839654620902472571665649919967371160409036961382290481165859731193710305989211665714814452109039568075053785039634104665516076749524765980529291699849764465433749870986860914147427598112865371747917109336808548762214669827404524571735460653099723747061723390924856171469660835909151652929700638010039801
Index: RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/解析.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/解析.txt b/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/解析.txt	
+++ /dev/null	
@@ -1,28 +0,0 @@
-c1 = pow(m, e1, n)
-c2 = pow(m, e2, n)
-gcd(e1,e2)=x
-
-扩展欧几里德算法
-e1*s1+e2*s2 = x
-
-(c1^s1*c2^s2)%n = ((m^e1%n)^s1(m^e2%n)^s2)%n
-
-(c1^s1*c2^s2)%n = ((m^e1%n)^s1*(m^e2%n)^s2)%n
-
-=> (c1^s1*c2^s2)%n = ((m^e1%n)^s1%n*(m^e2%n)^s2%n)%n #(a * b) % p = (a % p * b % p) % p
-
-=> (c1^s1*c2^s2)%n = ((m^e1)^s1%n*(m^e2)^s2%n)%n #((a % p) ^ b) % p =a ^ b % p
-
-=> (c1^s1*c2^s2)%n = ((m^e1)^s1*(m^e2)^s2)%n # (a % p * b % p) % p=(a * b) % p
-
-=>(c1^s1*c2^s2)%n = ((m^(e1*s1)*(m^(e2*s2))%n #。幂的乘方，底数不变，指数相乘。
-
-(c1^s1*c2^s2)%n = (m^(e1*s1+e2*s2))%n  # 同底数幂相乘，底数不变，指数相加。
-
- 因为e1*s1+e2*s2 = x
-
- (c1^s1*c2^s2)%n = (m^11)%n
-
- m^x= (c1^s1*c2^s2)+kn
-需要爆破下k，开x次方后，得到m
-有点类型 低加密指数攻击
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P37 m大于n/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P37 m大于n/exp.py b/RSA_基础篇/P21-P40/P37 m大于n/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P37 m大于n/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-
-n= 1938198674432811161450690669878250944830265839396906617662062291196152960227589796372087441130963
-c= 90170164274936424192415483102025065297184726282389841586708984518420677588910796600189918035116
-e=0x10001
-import libnum
-import gmpy2
-p1,s=gmpy2.iroot(n,2)
-p=gmpy2.next_prime(p1)
-q=n//p
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m1=pow(c,d,n)
-print(m1)
-for k in range(100000,1,-1):
-    m=m1+k*n
-    flag=libnum.n2s(int(m))
-    if  b"flag" in flag:
-        print(flag)
-        exit()
\ No newline at end of file
Index: RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/题目.py
===================================================================
diff --git a/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/题目.py b/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/题目.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-from Crypto.Util.number import *
-import uuid
-flag = 'flag{'+str(uuid.uuid4())+"}"
-flag=flag.encode()
-import gmpy2
-
-p = getPrime(512)
-p1 = gmpy2.next_prime(p)
-q= getPrime(512)
-q1= gmpy2.next_prime(q)
-
-n = p*q*p1*q1
-e = 0x10001
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print("c=",c)
-print("n=",n)
-c= 9949542934673249601822379710110536682375274333294212429688584989332571435120688962792756767799023906332576991820877786082142174075762351091472858450420524999000438499038246804892307015253501997557003507879115010365751701766309706931191167213901685725286428926861333201965004869326873632404052661985741631906479109023390455968199954361183959446992180809970004376995201084933073767278979855530735756096072840384641334181432769063314242300512881491103946010394543208395998872730145780806025267971492301568490427293141120807461902093932052106811061648537600125019831876736538658644780471805555396705702634885360657660235
-n= 14775235844515544576473611382698284004133861994231391972299917039113871334718108546717938305388267655285590882177982603418940337565701637106925368292676630781520319110700106306029357476649553934570683454139537943486518666101218072140043084858740684805876092240053196287287330188619164273915005792335974297620475140547828827559062269649682393716241864595363863867012095487700403514116433664086346056485373014640655316422588972338531776150881686013955605480910803097642414475309381073364181798620439167561641939844350252283317699576359402716770493658380425200603092475286870303441165147435503582004675788584686434009043
Index: RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E2.py
===================================================================
diff --git a/RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E2.py b/RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E2.py
deleted file mode 100644
--- a/RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E2.py	
+++ /dev/null	
@@ -1,13 +0,0 @@
-
-import gmpy2
-import libnum
-
-
-
-#2 crt 中国剩余定理
-ns = [15863230586500684911356384742123404120213699052018048588650392009927565369685497256344682150189923131009586323640507773706997704860898682946308031020361302334248895233255911348365179153799197341744863134926804603973507415697810440916305092395180382239729550833607847524005391137474497849077097574452115379368463540087172800902210822143687014813631366360652583216269138116785489485772437870528892032119729929607857459621078790511144060710035933887337208301078892163837203412081114510143406013892393607932596921308889058909544584619676380766485493114814753878272881866907210235681877689493671668534251778397658670518117, 14144098469438619358682652828507744381697293556670717685553585719665002440476256008471235313826051740009083510860714991201047915737216102220242621674841600987122005914542061963618272275986835928673920375768272390912778741502655909281390948606467847118377641357547931472588836726339758576038273820470879637555458446243401248151675266602656677360819563744765522495640821496694918515669243614141704744848980746101569785439728585144841655665959389460512628800782742764147773150430552859331269667626942993392101897661719871375721143240270211821269260950380944670195863016621594387236339317938305273510719419578308449465183, 27563822879593503938377821960427219022565215631856333510782568496016547757945464794632272818101891677705256471714805217606503652132995136255720639088424576003650628211271025648183600635145895528466199068640094470078526413324708028578289949241288828542143203769199399500669311878391255837977932634772778594526940501234736059441483897017015324765266787399950699732518347518591167932031031320265136158304460199654008895095274754918153773566824931440342525688741289235153882699461549523425169846266597156773535163599640189457171272058311480951820887261040891344076039474315985825984444520336790670313179493074014037981261]
-cs = [3833095607830862948079097323254872789586576953317671099752083261949616608759231291050566542764984974722790226120399722937104503590740358249900089784508490830379531632752169777949200718567033018577184658177019404903817920024468923715441355404672443007723525750768430895425376124679225715687382380114628103058312176343693900115638265002657622618744666247132114654135429040069316368839938881716554901593031901272992940200484460436193699175500376368456706998564064693820008778900344357745691652875500810447147088715289581351501876012044611990972521570253106671158207677490849249612002954497927762168699886110455354481924, 1502420121177211156091634258259634977709023894278792755694473756163084431123774101512866316989917922052023168401167212284219907272528117024670443698990238243030221117004372456475521502350404137469088570170885409265567084376069256924135270283335242133163303599239181417949980292944203204296598188175632723968779672994090788585343302473442389865459398142634104331743517384589200789331489394375604801951994831647339839112698394141328178967516636452592385248135340133712522135715943787590172334743893259621909532456281362868290556461907936774231166936915669816509378419892149164552548131776979706381641477878931403040942, 8992204063713908492214256291861339175525948946919629972908439132005643626148678347198381531633907182877152728077958345519083406637446972079387161726967295886447791613166577391233866583354793842121902234644830640050181130381996083089350911224037154798259291124104894554037604500881250119806371348673833105103600782286898276354573884788251542211434143476774391457587885772379990104835187104619922442613860682792470389490804228050671124495925536024571104944112397143299499508504917890140939438891891453283594000764399193028606955089853654071198909973555844004685149713774167524224100487937899126480545681565581673958854]
-
-e2=libnum.solve_crt(cs,ns)
-E2=libnum.nroot(e2,89)
-print(E2)
Index: RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/解析.md
===================================================================
diff --git a/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/解析.md b/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/解析.md
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/解析.md	
+++ /dev/null	
@@ -1,50 +0,0 @@
-## 题目分析
-
-### （1）光滑数
-
-光滑数（Smooth Number）指可以分解为小素数乘积的正整数。
-题目中的p由许多小素数乘积+1得出，故p-1则为许多小质数的乘积，即p-1是光滑数。
-
-### （2）Pollard’s p − 1 算法
-
-当 p 是 N 的因数，并且 p − 1是光滑数，可能可以使用 Pollard's p − 1 算法来分解 N 。
-
-首先根据费马小定理：
-
-如果 p 是一个素数，而整数 a 不是 p  的倍数，则有:
-
-```math
- a^{p-1} ≡ 1 mod p
-
-```
-
-```math
- a^{t(p-1)} ≡1^t ≡1 mod p
-
-```
-
-```math
- a^{t(p-1)} -1=k*p
-
-```
-
-如果 p − 1 是一些很小质数的乘积，那么 n!就能被 p − 1 整除。
-
-即 n!=t(p−1)。
-对于每一个n=2,3,4 ,... ，任意选择一个底数 a（事实上，可以简单地选择为 2），并计算：
-
-```math
- gcd(a^{n!}-1,N)
-```
-
-如果结果不为 1 或 N，那么就已成功分解 N。
-
-但当 n 较大时，直接计算 n !  将会很消耗资源。在遍历 n时，可以简化运算。
-
-```math
- a^{n!} { mod } N =(amodN )^{n!}modN
-```
-
-## 参考
-
-* [ ]  [https://blog.csdn.net/zippo1234/article/details/109811874](https://blog.csdn.net/zippo1234/article/details/109811874)
Index: RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/exp.py b/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P21 共模攻击变形/1.e1,e2/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import libnum
-import gmpy2
-
-e1= 319
-e2= 341
-n= 19474678913649097258390489993698634404112354172317306010023197847156694099670721761327194851970009271581549666788645497433190056135299423904183196428211720097778383008788705222994940143654464858441904620596484596346512546258221838544477940550376396677203257379949758730938581258992871705570847922776599616915733519585215572243928291618659043825329209345158300980691318185817290940425730134338749693091572842746733673342908172635417820608641805710421185052054000066207235255914663558591276027965181111243394719238943210391460931903101227440963377665461618104834863663740849922340905053750264657441352910246039293609643367940051324465147023474243224362152913517822894213761331561654655858920728085714369310139310386378474433039346461001868308134135362298325390206249247092133402040374395517273415606661403933705390825879552537393088886944922940487264224704885259420580277404667343842400220922804505835566052496110575752288394130226305637409179824473762478444360732822396393944426314881434132408204638085190098614163118051368269424038473349620971134861134137603699098720960181628570503797869982072783254713064905276853023938893875178460261697758362279989965392026805157348131834895995251415105178938979192148748647493811243573203145688897449401412372097795961539772849014562325239101253682046332206756094565291781
-c1= 16842097487578929747386013933836071311636435180786000333183479444850916208499056286293221277419396487143548868011121687411419006933297728370852363750322035680140458385936896809702003278914760352066710772774379515794440911494571101054875370632979664627428088945978102656878992542056983359586963711617334422080699715850848901481895781439634119925073029944688100348409613155880974748998758622098311059613939789339423339992132464171174123104436742936539749038386100174285273092064872962110961174532333866649632099684432465861670566720188498096950478835609006702822832535569740279550564709018652584734393583891347283516641024482147655707303660809974605932283320751419752851004868386620860461774410841309524864393100974165736049945040671353974167039407791367110609972671777553345885631486896801519491159873075020494968481046661647097363668961350255292613493490519231790196337146698217641580380569238319274538735600036562195973041732846936373910618424923755644620392149451787477945923716935327549760919227680773560668256346588136223461189956081899893679417046303238188505187585679903927787518164246954458038170693402350055866777159897918079058465076803320663064873176102836775732642340270760113509631774744076482366969652954901984726320611635556882140186758717303319295278262405745747267175536641440355265151505738959
-c2= 11882419292262439388395815852169631237359134106011110793207416772099869060262304736871190266614921889223922727440751243951466369747401979020372872126460796866664490364229918484890553550414970820526722511330604028963190564560830894577762895849951145089870332361493102336506523261215879020663433735193233792538730505795660978392622223090008019752787535539689555015412414444298098846960023750837015644522855346725774495736882904164804735576222229185641453887995254842617056884667691768874085981289380925271203339962843240701273777372488844619509988897713312382774750017391240294108840393576680678601939550735366514705783804254529195233406624997337321421836044641264988646831661593186219714359601246011436856726899017296455579882011341041715930436749266151654712590104320876653590775164982704496112329832684267637475509804745971848571244643987731101962814164824430221486667978354093400800773401904607552500150032713777036941455622982693087120359170639049551330567886289216980990770976252462925360856027498185494737491836702182511810948819989831212562989917938207204621062194173157840590954059982130144900289024500353220236075815227481710808333065928147587957726526698953469304559157057103278333800243155467404900528439556287027032253160322365280145370850141701695659907382027163725331629255756528099014003526137133
-
-_,s1,s2=gmpy2.gcdext(e1,e2)
-m1=(pow(c1,s1,n)*pow(c2,s2,n))%n
-print(m1)
-x=gmpy2.gcd(e1,e2)
-print(x)
-k=0
-while 1:
-    m11=m1+k*n
-    m,s=gmpy2.iroot(m11,x)
-    if s:
-        print(libnum.n2s(int(m)))
-        break
-    k+=1
-    print(k)
\ No newline at end of file
Index: RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/exp.py b/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理pow(m,p,n)与pow(m,q,n)/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-
-n= 49134891668897345591333219711303339144007670596441894829337290952093400283298630665826095289165809681961208520996265436195389904640720636719133734406693433810554096598929737422594980883724481297143537076662178576926253446582535294294231165454562659420944920445437433494540727083960515996626310138062984512331
-x= 24898114380189083075249478644617176345363769858290571489415603903447660857572376734333314388004344067870622511211551400003900882292855408080408530612898712604821849194436116203045876702326786310101264912258598823736415425063797050123512802647807994402065186878212852202204820369988512984137386942003350601013
-y= 16329839654620902472571665649919967371160409036961382290481165859731193710305989211665714814452109039568075053785039634104665516076749524765980529291699849764465433749870986860914147427598112865371747917109336808548762214669827404524571735460653099723747061723390924856171469660835909151652929700638010039801
-
-
-import libnum
-import gmpy2
-
-p=libnum.gcd(pow(x,n,n)-y,n)
-p=gmpy2.gcd(pow(x,n,n)-y,n)
-print(p)
-q=n//p
-print(n==p*q)
-phi=(p-1)*(q-1)
-d=libnum.invmod(p,phi)
-d=gmpy2.invert(p,phi)
-print(d)
-m=pow(x,d,n)
-flag=libnum.n2s(int())
-print(flag)
\ No newline at end of file
Index: RSA_整理/整理中/P67 求公约数+2^16/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/P67 求公约数+2^16/解析.txt b/RSA_整理/整理中/P67 求公约数+2^16/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P67 求公约数+2^16/解析.txt	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-原题为NSSCTF Round#11 --- 密码个人赛 wp
-ez_signin
-
-n2=(p-q)^e%n
-#(p-q)^2%n=(p^2+q^2)%n
-#(p-q)^3%n=(p^3-q^3)%n
-n2=(p^e+q^e)%n
-
-#n1+n2
-n1+n2=2*p^e%n
-n1+n2=kp
-p=gcd(n1+n2,n)
-
-
-后面是rabin算法
\ No newline at end of file
Index: RSA_收集篇/1.3tefanie博客/1.求公约数+2^16/解析.txt
===================================================================
diff --git a/RSA_收集篇/1.3tefanie博客/1.求公约数+2^16/解析.txt b/RSA_收集篇/1.3tefanie博客/1.求公约数+2^16/解析.txt
deleted file mode 100644
--- a/RSA_收集篇/1.3tefanie博客/1.求公约数+2^16/解析.txt	
+++ /dev/null	
@@ -1,13 +0,0 @@
-
-原题为NSSCTF Round#11 --- 密码个人赛 wp
-ez_signin
-
-
-num1 = (pow(p,e,n)-pow(q,e,n)) % n
-num2 = pow(p-q,e,n)
-
-n1+n2
-p^e-pqe+q^e+p^e-q^e+kn
-存在p的公约数
-
-后面是rabin算法
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/exp.py b/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/3.变形1/exp.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-
-
-e= 65537
-phi= 153526208973286457920479376447622546334064100044507994947932972947056601063592943200823498761273906685365632931851181655405163001559274037884326450823919640514634182433839200397012200852498394907718538509040702321554785017853186412670980153149366201235845635320919980848682144430326738538775142630420821822960
-c= 45404866893480020010799585996788902747901025575540655893265307771493992595444010006643443639614244962689890716458286889196613281948316354607540970243071548624687668875908716690311985915197944902857988253464493234021796216923039652003206533181461815990153623141243415592031190212825941414063970906141991979873
-p1= -11065332660497699825690181811194036599102527446002445107664152730915570503984416572510322521934240155183790860963748546243230674204488210677533190963726687
-q1= -1516147835082043403956384639695921948575165356837676821387726774997348251688472575043896909177257102383857065378906848506987546488480618072779943395893217
-
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-f1 = p1 * p + q1 * q - 1 +p * q
-f2 = (p - 1) * (q - 1) - phi
-pq = sympy.solve([f1, f2], [p, q])
-p = (pq[1][0])
-q = (pq[1][1])
-n = p * q
-d = gmpy2.invert(e, phi)
-m = pow(c, int(d), int(n))
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/中国剩余定理_dpdq/出题.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_dpdq/出题.py b/RSA_整理/整理中/中国剩余定理_dpdq/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_dpdq/出题.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(256)
-q = libnum.generate_prime(256)
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-print("d=", d)
-dp = d % (p - 1)
-dq = d % (q - 1)
-c = pow(m, e, n)
-
-print("p=", p)
-print("q=", q)
-print("c=", c)
-print("dp=", dp)
-print("dq=", dq)
Index: RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/exp.py b/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/2.已知e,d/exp.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-
-
-p1= 97656077071270197914785321263555295398683131376741279762023269752748032446917564784973530125497364995807144029368514414686812526434051342203148587548869714362392149049199571504107521002327725946079985444111124295505554135534791115828253787424842366876671199369039838469527700802048214832651973914615014793434
-q1= 39346433326508892813150536257919182675225716975877498778468626666265319210911093864684217868389854790505495572529483241732413112619372606685748980784688553398278315703981192828280813023954306657912647634729098972136705540024619937335024692325575092594446158807029214788285050359047781519982931005193436553164
-d= 13982206046522221689006948762375515892286671914597370002120896052266280914021885507889789598565474633660266121772385535949954654478591294089438758529565129571215458972099907852294228150256147359389834287744392536374255187239416806275744570662248893522074706262730636918053134499811014564470545819778015584753659205965073426501902382941707278051440033966771995946005135307665514929445057737703258338176975384665564222178081103000139437728386604903444661523794053627011660691133434801451813006697587015285256584456452850523012639216643290392821724776006584995172392016576699118057963479401425915020921720042294733838337
-e= 65537
-c= 13235028416286929520160810669079534965765212020283157183506000327481359053022089166886460096491962822206497841520395685863417454564782563002357235184688540460362871929729166716636143577909568477095287025119038866855396071566223268818065261766734924398179202129826294778702597618099032226876112654250403885134458713788086798004345808257538019652522209856828455756694071035571007463724635674562294436700546760823969026149755043139120494280665479551005965472492371422616161244117935709924215027494208339801474837499105640735072011664365891939864038690374913413240430803230704628673411107455299647523018041707726365601893
-phi=16033591784555690839033601641933863819862675274128076669740291933394723758788009352788583792713912217703542497595829207543956085361202366334328595985304274508481724780489075813896396106581346750635700757907059309496772854950127016253035273087412614339939285140337656629662098889174735118835844089284571097739371559723771996652001268037000802800553357819154820449211550823391567258031927998247803081416301018071582489307196620368843405837158330864310134068534625079672858460155583646814590373389203531298114865193213718937686858488611970228064763729093357377320357215677266414126622909951204685623007887150263682313184
-
-import sympy
-import gmpy2
-import libnum
-
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-for k in range(e,1,-1):
-    if (e*d-1)%k==0:
-        phi=(e*d-1)//k
-        print(phi)
-        print(k)
-        try:
-            f1 = (p - 1) * (q - 1) - phi
-            f2 = q1 * q + p1 * p - p * q - 1
-            c1 = sympy.solve([f1, f2], [p, q])
-            p = int(c1[1][0])
-            print(p)
-            q = int(c1[1][1])
-            print(q)
-            break
-        except:
-            continue
-
-
-n=p*q
-m=pow(c,d,n)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/P43 l=xp - yq/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P43 l=xp - yq/题目.py b/RSA_整理/整理中/P43 l=xp - yq/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P43 l=xp - yq/题目.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-import libnum
-import uuid
-flag="flag{"+str(uuid.uuid4())+"}"
-m=libnum.s2n(flag)
-p = libnum.generate_prime(2048)
-q = libnum.generate_prime(2048)
-x = libnum.generate_prime(4096)
-y = libnum.generate_prime(4096)
-
-n = p * q
-e = 0x10001
-c = pow(m, e, n)
-
-print("c=",c)
-print(x * p - y * q)
-print("x=",x)
-print("y=",y)
-
-# c = 819167649963114752409071690942828965596762225702125422224651455091514510699221689012200925546275830031560636434571675297352911785548562558995259185529739372065415320407815802186750343466069603564453133335339468465023669871194636196892019998935207213206263690388438074192184316296023645401077877114715985230518850300854162564541697624876005006316693763495665196932392860282743136069254457238426514217654211308356576587743413266816116398061386744037936492351734676350831535904555786373417782943462487966342446324586920268533217659394595673776791727030156809145044771214337720082482665839942679556775596805037563432378445332344070307192086425710019138340320155999228758718645401601922806183309005000232793295108264248107221425831137940764747440899967198929744597645010447079132413064685696595497031622178756728371427223009071172365660399862426808614310781649262366953422451061715753988547005171624561572800209843727720479076455447302266315465616082052292906817024385349625367335127791370192543189766366250792588949920001870810018187835769296432354197933863536721500934207233900135841304460719234606155627533870809427764337881255478336303687175976104216650172450886939797274047649899113069365776930432541285901134533586020261232876898556
-# x * p - y * q = 1699980137266557324344914328325272464132636282755221827458872463192020874135524827987217608051368206672934330683211276768709877840468972596490803759885813728690444018491934963720438572841678828429913822054802155884199440293180952789752415462639050713771680511777055884579458058757377759627744674844108633533334457344901084171274088270351873241352667334795523258220147308594499138453672732641220818083962784902673365318410315424514270533343700860737463941309778962170226910616237946542757166553717492195935533892236503442774023121626490914033401612167978954941330133300881931925497717512695171706212382578903001110920592500175461456995288709439779857319205707173662845644405055427904509419863606240680925061916382420684482076378518205523197463067938227019763990108007075242817656584738069628913136354101292332085988235385095314890393764303221439993179548360648981274242121283353602916815145403803542637335824051819986555363523349256992995614272850197795324686379321786728586563648175181401083465608646485432113720677594958984638724107125334720354094296357390072599568691394140689362397548059953034709737955082932844672007207996936767062822977154868592390902978952191044067944696085651546627109166427150923047360912876244376114967514367037960727491317506149228522989115013325839758536585180101058382614514947428328314724097308211883678572797106209083583109261376984483242047015474025283180602280795727273381785266819469972756514932048700356409177010293248246465560904863373454995512681663614120751469186425087937476277098506766986185341057569253541467185884718825148546913924405454412786581778526929471207590180161807679236125962298541766845327682689402342086818440002212258092785616843818868009803516765308135874826622684994974230341120600336001281979511703254112012642242186568042544945546342209510451281619322586082384591244651070733725666379203036
-# x = 632789818728437249014397968661921775581544184224274756276433610798113468993672164321438530616013253289782663689077268876186151437864544302469108580709641566485290311420121506047579208345815027532791974738974313200169956832221919603190470863795222438259219096469376978228578380264663345353405438455186474301297012193183679157205629903265170130103917934683090733281473604073360246791105302237248347327779245961650717330972723138979527847182834557342036244971153338500301679961477335495638826895006083228659413981010440339548216034046748372206443701123739501069837327986187240490120446390477989503341189926203433991663521331801532805472205226609164816353391564959573141240378777470418994251339128482692796773797189201818245228107080728132313948392278762055786817726909473749863670490856099352687396397382321897116397931192027599070027627694680087783451302597521080702011592065963594511723809150300184064231573197933953378151145481864603829132945843828406023019349658403181028564910247213010151333549565330384930314823393041100958566895783471423052411323469971356896800670127810656782436426988914502569025478559937511734711601790440407326688723474002610311556839284338719325762246957198057778260962250609427063416142879689421634421458709
-# y = 643036772350048228226994649092616650645954632907587039823201793924675328231324332666556623349121829177212510871016658056913708287862858528109879661403451187304726709132260743678530717837451671681355571221280002404299107695652155670051078882192093123123561845252965958271768933274773257692931042446530995042732001095255062905223134293710172411977911384445547906762517497734345024155549903618728650384451421173225517825102299209880684634460331223065873651202939210708252359077003909032324005805452514172406303829425073706650894226101275953935372059009590759610077924785340813184927561117202564837188711962251575479458375013998344858887909613413912370566496257586437903234141740497499987400831528329286044181171784190933054960738806780037696966451373943646987424395266465375230570034361116196796918297724925148528750740437152338021273617526482564999975699692816362539898387887578959664017588135024295202965648259490954273611159737721618049049630608155576688331546213838011267525827596272825121479187503405108808503874817959024671313813455057255041638822640703012661546718752651979237589873357378433672292216062102553378571263015343101391160579720162709138758489316499316122410388218239186892007182433862338617140046642758913862484601497
-
-c= 551564125794527360292754537135683993412073939931842743252825546160841743341364252094742222814487857418305824437323878030495005807897236944650041419697803230240542069789239142234335059646047531620567332859284127151534412455911539133365768350696428945111875792760777095508652587766083396019852298185115051969441074068938824047201192080418628602596174474774855697186208035938593534975409169684395515882685578329880719955607549130328622864194613235437820462747929915267018301395643953492066705285425220173592312775458072380593362944099308614354606781832206279986843372454066078671851476691251733787462566344010699659948657470584132290099499667486463668654484126327809783796272798211413970548059315276716638396549002556403458342714471679783144761718633856405196153659252506389046652272680738572647805669805470798408389216761414662117425919867711976198236441013393105065105046883566185424874718959523366577696635290319923431499347239353902164293776533287417684647248865650788292642479872919920916018023539192669345883686464939028997808635504006023546082570114536162143744176286568521085625879207069673824739439940521280693601490469000165917705323629474544240448431724304411942107541454761715945905363697306927908085601405210241096339584435

-x= 1039921692531141453171855686573982160456036531996302869318512030808823452344564509029392768187937381358132835421353947391146152688775743299708763697482129863204164544696991625661601981428710402320295175770372423624167211973430139460361562768548290676701957053891210369700921221423149214485954906023526821279926557801581767708726392811383905896345230572315244721504057592760336332644624486050382007494446830316569572753507641996242913084915745145936195274474180406298475140237243181920308808061641459145199545975335386794052129180701729606572759157857974396497582462091051829175373289263597496839879241578243224907672832014803113635737984868263391212145914279985388384337152091881584412700291574912680627163539990219142463561790982466626815425779747862078596997632279168340914860868052097864543118762539022747121013597275757154401931133822198696036282672601198523849805269896168866902811154489835853026712709866710314531080297228565754738514945802684651397895233790841923066629484585104088163724416585649040197355115406759433403488645168693798651073547129833154915060629892670375098565171693004803737662953673589099229638713143579081504330789724161639576214795886269552237155791077509102229464684521355609590852748304069726247236704799
-y= 736014288116387998482981292225897575913033744746622859814245522394148828934504502068128536122008262895931175914404165778736109397740668050279940330934493758991133283289795093940740201033496246207192437425621387835239430286481129433660072250177825347297475025162943732731630653122272527575067247416479924583882613330362098881474738197380789249965288557232114834891782358102994942270211315653831351383961417227758531583740666226727725750344616718977607143032420115705902434150306308160817617737050537061661099447512128104666493631155591951137144970943417226364185059458456339980873416546822860516520652871647188557889586426143677544650638309834553711532895702474423578962267524516754014832022202939700966864046238418056495746842655952853211515370515521909876239291145362684660555361066717458585544421496216796451185392132170217148402925014208212261927403253177814728752653680327831399487079417648836955867684206159459353721174409472322370933025321740556907124801250532865024242284602753929833669163493860061693895261466397155211732075466641386919838121634892150813507406963394856780887481463616941192441478968072733703153183623234052142371034221826202653301438259138303438892825467473471320095956240609806088237187069554283831919431149
Index: RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/出题.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/出题.py b/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/出题.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-pinv = gmpy2.invert(p, q)
-qinv = gmpy2.invert(q, p)
-c = pow(m, e, n)
-
-print("e=", e)
-print("phi=", phi)
-print("c=", c)
-print("pinv=", pinv)
-print("qinv=", qinv)
Index: RSA_基础篇/P21-P40/P24  q=inverse(e, p)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/exp.py b/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-n= 151913753330829779363367789673597253978048533620182497747132604072824540323836504426239804081241567027736270622449855295828160124814438423488754623643933533204599629980943193643551097211543531050709295786991507076525522113596966181359611779370941657496310723772521162794885147507996772774824707716432570452403
-c= 81337035006499494768796081417947319039576994033747417935302379695580101083380316241731843797604372408639889020709527188720865744673275465620672796534287478878369491626837235522013863942055110385349674739290041899890532139474221925394370465243005480529009377659505930236007519685951328899152586367092905739547
-e=65537
-import gmpy2
-import libnum
-for k in range(e,1,-1):
-    tmp=1+4*e*n*k
-    r,s=gmpy2.iroot(tmp,2)
-    if s:
-        p=(r-1)//(2*k)
-        break
-q=n//p
-print(q)
-print(gmpy2.is_prime(q))
-assert n==p*q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_整理/整理中/中国剩余定理_dpdq/exp.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_dpdq/exp.py b/RSA_整理/整理中/中国剩余定理_dpdq/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_dpdq/exp.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-import gmpy2
-import libnum
-
-p = 112454994630978850005784651276022327545786198205744597431888680937657203192943
-q = 111081771780978300442208201256251933100607227308819156491182881723714968913833
-c = 7847140580627012782899798457736961376953768684667159008470556786390887805253326211691923724846808704462396746105331991924048819814322540306282164012066426
-dp = 99016059099144522019375365089687785694029213535292918424815544402513220169503
-dq = 79504900574184798493105575420403885224379864982754477219462523963780735261625
-
-
-def decrypt(dp, dq, p, q, c):
-    InvQ = gmpy2.invert(q, p)
-    mp = pow(c, dp, p)
-    mq = pow(c, dq, q)
-    m = (((mp - mq) * InvQ) % p) * q + mq
-    print(mp - mq)
-    print(libnum.n2s(int(m)).decode())
-
-mp = pow(c, dp, p)
-mq = pow(c, dq, q)
-m=libnum.solve_crt([mp,mq],[p,q])
-print(libnum.n2s(m))
-
-
-decrypt(dp, dq, p, q, c)
-#
-# m=pow(c,dp,p)
-# m=pow(c,dq,q)
-# #前提就是 m<p,m<q
-# print(libnum.n2s(m))
Index: RSA_整理/整理中/P52 告诉ed，未知n/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P52 告诉ed，未知n/exp.py b/RSA_整理/整理中/P52 告诉ed，未知n/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P52 告诉ed，未知n/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-import gmpy2
-import sympy
-
-c= 3225860218334182860387837673801790669092953966825262735660978105775559361149717605978627949816764080472251162874971640906567221834551967731731527691385155892598969512719294232496341802411725506833653531075151274821218547277230412049775261753531311817637176997267551144528406781213129089030360220959983564778
-e= 65537
-d= 46506309055853350611774553203687420148184040288906036948889942558288500276548522484482085590126743675560032966703700845198298685374346191810128678942569533700081113017086308697593639654130486347370486181330902422271300690831647287666586307311328683493847959704279577807806729490428101364954009643609848871573
-
-ed1=e*d-1
-for k in range(65537,1,-1):
-    if ed1%k==0:
-        phi=ed1//k
-        p1,s1=gmpy2.iroot(phi,2)
-        p=gmpy2.next_prime(p1)
-        if phi%(p-1)==0:
-            q=sympy.prevprime(p)
-            break
-n=p*q
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	
+++ /dev/null	
@@ -1,3 +0,0 @@
-# 默认忽略的文件
-/shelf/
-/workspace.xml
Index: RSA_整理/整理中/e和phi不互素_lcm_phi/exp.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_lcm_phi/exp.py b/RSA_整理/整理中/e和phi不互素_lcm_phi/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_lcm_phi/exp.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-import gmpy2
-import libnum
-
-n= 121769936784982302455460882778727803049384633262560695513781994654895190859753979310564561712445845918288140931499625808990896367059857863794677794634764954265917223929188027566735170858722793015537480829986990608756383815655534511937235703892950567493911917178761554143379884176240162037489989420552078127671
-e= 54722
-c= 68207327189131286430765764525947832439888346002213816928140706886898558628392596589715994944626609815778649728495478844245774029669442060829925589118748033844002399193350339069964179052517763638951854264605935062729791334189169468172816314672207667470048850163934061677572210757247460567864055270415151846298
-h= 12176993678498230245546088277872780304938463326256069551378199465489519085975397931056456171244584591828814093149962580899089636705985786379467779463476493219517172984909297814745438140651274778256117288586982848108213932163133817644505376344716130049020474232954521634539644016004694898461955741388897934560
-
-
-cc1=gmpy2.gcd(e,h)
-d=gmpy2.invert(e//cc1,h)
-m=pow(c,d,n)
-flag,s=gmpy2.iroot(m,cc1)
-print(libnum.n2s(int(flag)))
-
-
-# for h2 in range(4,8):
-#     try:
-#         phi = h * h2
-#         print(h2)
-#         cc1 = gmpy2.gcd(e, phi)
-#         print(cc1)
-#         d = gmpy2.invert(e // cc1, phi)
-#         print(d)
-#         m = pow(c, d, n)
-#         flag, s = gmpy2.iroot(m, cc1)
-#         print(flag)
-#         print(libnum.n2s(int(flag)))
-#     except:
-#         continue
Index: RSA_整理/整理中/P66 gcd(n,ad-bc)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P66 gcd(n,ad-bc)/题目.py b/RSA_整理/整理中/P66 gcd(n,ad-bc)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P66 gcd(n,ad-bc)/题目.py	
+++ /dev/null	
@@ -1,28 +0,0 @@
-from Crypto.Util.number import *
-import random
-from secret import flag,a0,a1,b0,b1
-
-p = getPrime(512)
-q = getPrime(512)
-e = getPrime(128)
-n = p*q
-assert pow(a0,2) + e * pow(b0,2) == n
-assert pow(a1,2) + e * pow(b1,2) == n
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-
-print("c=",c)
-print("n=",n)
-print("a0=",a0)
-print("a1=",a1)
-print("b0=",b0)
-print("b1=",b1)
-
-
-c= 34007465638566836660852768374211870538357285529060206826620688555044780516477877596651414637089490522614456532732711803500304737160162560168303462221485961593760966240770414498297915175227814336224871400766371471776600674705757656616409870237891336752248110367865552469248343708419900511716030176178698949179
-n= 70043427687738872803871163276488213173780425282753969243938124727004843810522473265066937344440899712569316720945145873584064860810161865485251816597432836666987134938760506657782143983431621481190009008491725207321741725979791393566155990005404328775785526238494554357279069151540867533082875900530405903003
-a0= 8369195163678456889416121467476480674288621867182572824570660596055739410903686466334448920102666056798356927389728982948229326705483052970212882852055482
-a1= 8369195163678456889416121462308686152524805984209312455308229689034789710117101859597220211456125364647704791637845189120538925088375209397006380815921158
-b0= 25500181489306553053743739056022091355379036380919737553326529889338409847082228856006303427136881468093863020843230477979
-b1= 31448594528370020763962343185054872105044827103889010592635556324009793301024988530934510929565983517651356856506719032859
-
Index: RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py
===================================================================
diff --git a/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py b/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-
-
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = libnum.generate_prime(16)
-print(e)
-e1 = 2023
-n = p*q
-h1=pow((p+q),e1,n)
-h2=pow((p-q),e1,n)
-c=pow(m,e,n)
-print(n)
-print(h1)
-print(h2)
-print(c)
\ No newline at end of file
Index: RSA_整理/整理中/P48. 障眼法/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P48. 障眼法/题目.py b/RSA_整理/整理中/P48. 障眼法/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P48. 障眼法/题目.py	
+++ /dev/null	
@@ -1,46 +0,0 @@
-from Crypto.Util.number import *
-import sympy
-from flag import flag
-
-
-a=getPrime(512)
-p=sympy.nextprime(13*a)
-q=sympy.prevprime(25*a)
-number2=p*q
-
-def crypto01(number1, number2, number3):
-    number4 = 1
-    while number2 > 0:
-        if number2 % 2: 
-            number4 = (number4 * number1) % number3
-        number1 = number1 ** 2 % number3
-        number2 //= 2
-    return number4
-def crypto02(number1, number2):
-    number3 = number1
-    number4 = number2
-    giao = 1
-    giaogiao = 0
-    while number4 > 0:
-        number7 = number3 // number4
-        giao, giaogiao = giaogiao, giao - giaogiao*number7
-        number3, number4 = number4, number3 - number4*number7
-    while giao<0:
-        giao = giao + number2
-    return giao
-def crypto03(number1, number2, number3):
-    number4 = crypto01(number3, number1, number2)
-    return number4
-def crypto05(number1,number2):
-    return pow(number1,0xe18e,number2)
-
-number1 = 6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683
-number2 = 20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947
-
-number3 = int.from_bytes(flag[0:19].encode("utf-8"), "big")
-number4 = int.from_bytes(flag[19:39].encode("utf-8"), "big")
-
-print(crypto03(number1, number2, number3))
-print(crypto05(number4,number2))
-#6624758244437183700228793390575387439910775985543869953485120951825790403986028668723069396276896827302706342862776605008038149721097476152863529945095435498809442643082504012461883786296234960634593997098236558840899107452647003306820097771301898479134315680273315445282673421302058215601162967617943836306076
-#204384474875628990804496315735508023717499220909413449050868658084284187670628949761107184746708810539920536825856744947995442111688188562682921193868294477052992835394998910706435735040133361347697720913541458302074252626700854595868437809272878960638744881154520946183933043843588964174947340240510756356766
Index: RSA_整理/整理中/威尔逊定理_题1/exp.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_题1/exp.py b/RSA_整理/整理中/威尔逊定理_题1/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_题1/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-import libnum
-import gmpy2
-c= 110529037403457010976226680228015853681747082298049971277864723725003290263121993249901746108064910538219056566054434964752554464076788576969420195833066780032521421693370829430794829520809208371861674386624296250550029664837604012247019944404589941948639334516981017574704294281416080581914051559281376725552
-n= 118816369182219711551736875622148948376274930097622029542291351942110204065005093752267272235864774888160522170555189015695148555668006209122716634896476014952586332120668094812890443697140874554631953248467119041951362983074748376348829077644413780641030688747863975973112631445365138922148115802917498155841
-e=65537
-p1=gmpy2.iroot(n,2)[0]
-q=gmpy2.next_prime(p1)
-p=n//q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-#根据威尔逊定理
-
-m=m*libnum.invmod(-1,p)%p
-print(m)
-print(libnum.n2s(int(m)))
-
-
-
-
-
-
Index: RSA_整理/整理中/P88 光滑数p-1/解析.md
===================================================================
diff --git a/RSA_整理/整理中/P88 光滑数p-1/解析.md b/RSA_整理/整理中/P88 光滑数p-1/解析.md
deleted file mode 100644
--- a/RSA_整理/整理中/P88 光滑数p-1/解析.md	
+++ /dev/null	
@@ -1,50 +0,0 @@
-## 题目分析
-
-### （1）光滑数
-
-光滑数（Smooth Number）指可以分解为小素数乘积的正整数。
-题目中的p由许多小素数乘积+1得出，故p-1则为许多小质数的乘积，即p-1是光滑数。
-
-### （2）Pollard’s p − 1 算法
-
-当 p 是 N 的因数，并且 p − 1是光滑数，可能可以使用 Pollard's p − 1 算法来分解 N 。
-
-首先根据费马小定理：
-
-如果 p 是一个素数，而整数 a 不是 p  的倍数，则有:
-
-```math
- a^{p-1} ≡ 1 mod p
-
-```
-
-```math
- a^{t(p-1)} ≡1^t ≡1 mod p
-
-```
-
-```math
- a^{t(p-1)} -1=k*p
-
-```
-
-如果 p − 1 是一些很小质数的乘积，那么 n!就能被 p − 1 整除。
-
-即 n!=t(p−1)。
-对于每一个n=2,3,4 ,... ，任意选择一个底数 a（事实上，可以简单地选择为 2），并计算：
-
-```math
- gcd(a^{n!}-1,N)
-```
-
-如果结果不为 1 或 N，那么就已成功分解 N。
-
-但当 n 较大时，直接计算 n !  将会很消耗资源。在遍历 n时，可以简化运算。
-
-```math
- a^{n!} { mod } N =(amodN )^{n!}modN
-```
-
-## 参考
-
-* [ ]  [https://blog.csdn.net/zippo1234/article/details/109811874](https://blog.csdn.net/zippo1234/article/details/109811874)
Index: RSA_整理/整理中/N分解_N分解3个素数/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N分解3个素数/exp2.py b/RSA_整理/整理中/N分解_N分解3个素数/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N分解3个素数/exp2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-
-p = 12213843677002747766848780813863444765635042481765413051856941866086491788109497010943473273572566841660085356963998380859972440509623320585264570870882377
-q = 10902490082251495426199569292732505400137675709524837939357515262329540011464655744129250363907196869656418112808846020897118146863902562367003327272321449
-r = 8245419815086573989912567235897662412607561235885604814025447500079491044202192595152864571279969681042912188605024753854047024662013720379103778526236839
-z = 10917615097508699827805276639030692194611453656058695332553958067645900726083779376328239937088149850336439698089338637703951122165530113430740915375254019
-
-n = 11987223678888371522590014163574474585984194442215707213681942674682481521159615601278963653710214413966851484769697316184020225580354584969280759516304518930586023758786499707314773352093733555751516210440026493115763715594030219348717378054713330562469489929071833023251985410432681379225722515249114768069799538178471227684886585818611193385720863927599686403372685979041786980765941581357531078866173940675302211156740624961660458364870744891267336542629860728676639340370300143607766541999848139604816244471035977632825191833661785202909345705598016303539579822007932773115520022154167375759849411486420750385893
-e = 65537
-c = 5395740155304669350813446148984001089577243830507792794817942379567952891169689187159605803584012696669416468262913205072505580096612689488031607303556309165510626352159994870224831746393515302036056276128780176510345937509694407306122459125905753373646070294254525528004397615098037040212875934172270348504386498501381675335673389883548268757941289932688918632949813634383348968682753785403890857910581199432899158400152800186245499719012819119582095532181336705889412130586102740186044306846473639210373743145249675886413163898094394917296889841622782268580482112735272818555859742460277831777444758731534129950815
-
-nn = [p, q, r, z]
-phi = 1
-for i in nn:
-    phi *= (i - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/dp泄露_e很大/解题.txt
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_e很大/解题.txt b/RSA_整理/整理中/dp泄露_e很大/解题.txt
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_e很大/解题.txt	
+++ /dev/null	
@@ -1,18 +0,0 @@
-解析2：
-dp=d mod p-1
-#两边同时乘上e
-dp*e=de mod p-1
-因为de%phi=1
-de=kphi+1
-de=k(p-1)*(q-1)+1
-dpe=k(p-1)(q-1)+1+(p-1)*k
-dpe=1+(p-1)k
-dp*e%(p-1)=1
-
-模数p dp和e构成一对密钥。
-a^e*dp%p=a
-a^e*dp-a=kp
-a^e*dp%n-a%n=kp%n
-a^e*dp%n-a=kp+kn
-a^e*dp%n-a=kp+kpq
-a^e*dp%n-a=kp
\ No newline at end of file
Index: RSA_整理/整理中/A02 基础_已知p,q,e,c/题目.py
===================================================================
diff --git a/RSA_整理/整理中/A02 基础_已知p,q,e,c/题目.py b/RSA_整理/整理中/A02 基础_已知p,q,e,c/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/A02 基础_已知p,q,e,c/题目.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-#生成随机素数
-p=libnum.generate_prime(1024)
-q=libnum.generate_prime(1024)
-e=65537
-n=p*q
-phi_n=(p-1)*(q-1)
-#求逆元
-d=libnum.invmod(e,phi_n)
-c=pow(m,e,n)
-
-print("p=",p)
-print("q=",q)
-print ("e=",e)
-print ("c=",c)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/exp.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/2.dasctf例题/exp.py	
+++ /dev/null	
@@ -1,46 +0,0 @@
-
-
-#p和q采用rabin算法求出后，求出私钥d 解出flag
-
-c2 =  8943014059616554864780402232625215323717650137702921347505099596041241060991211014413068279308600979202066026580321911322396296877730441259506201930904989
-p1 =  9332664074116371272320347910722305705338764655969305966836353509444565128652866496870138156351793824473079367512299950127043084761943406224989567423866071
-c3 =  70057129621004770704688083264954773868924488489858841648741006057913061247128697063230635204818097097989773079555422507429472690950271096686354023051578709918278343598395904697714639469429943421928621364157106993940737884253250276769074919155850720804529008723376094183112401317966966358905432385347745890161
-p2 =  8345774537268501775456149547604093811537369706242159709058405913660493926215699313366059497170577713800176152866821540944395025269529309431564563983026047
-q2 =  10391251387900816431089217882564594263543706933015218000664649428273018708690965953263846227725465978045419390050088292820030415626410428034269853834640767
-
-import libnum
-import gmpy2
-
-p = pow(c2, (p1 + 1) // 4, p1)
-print(p)
-print(c2==pow(p,2,p1))
-
-e=2
-n=p2*q2
-inv_p = gmpy2.invert(p2, q2)
-inv_q = gmpy2.invert(q2, p2)
-mp = pow(c3, (p2 + 1) // 4, p2)
-mq = pow(c3, (q2 + 1) // 4, q2)
-a = (inv_p * p2 * mq + inv_q * q2 * mp) % n
-b = n - int(a)
-c = (inv_p * p2 * mq - inv_q * q2 * mp) % n
-d = n - int(c)
-# 因为rabin 加密有四种结果，全部列出。
-aa = [a, b, c, d]
-for i in aa:
-    if gmpy2.is_prime(i):
-        q=i
-        print(q)
-        print(c3==pow(q, 2, p2*q2))
-        break
-
-c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-e=65537
-n=p*q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-print(d)
-print(c)
-m=pow(c,d,n)
-print(m)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/exp.py b/RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/exp.py	
+++ /dev/null	
@@ -1,54 +0,0 @@
-import libnum
-import gmpy2
-import random
-import uuid
-
-n1 = 15229908966215673498264833619915862067189414881076960436877368615098175680441463135574405877266084016930270486805823866233100564302504890309012014811833355036803313503898478169492755564750400014950957968738560644049839456859498610733352635085343594112468877475531058156406714101260523668718601047825031099622949295499360227422532501547624931966301078524006797464247562465148669456759919516529290118434601009165995947159321449572614699448476100967664566619009059134422233825969331748148860489619925702309297146477957965828540943526221853964005609999026637516521464246318660977046648835810455829429341968774818398723853
-n2 = 16647671303452992814874916736670768507126337287566806803856358971599504932626835696964451452343832014324551312290172667506710009528951994807498255871494566471000537304568754858163291490985871966879235032991671329249773447655311105094011323544857528388925766738036851981411914648354588379859727189184060795755469840504119808662263041034859662007459121199866617211978706354395021326856422186021481792874584360726451742152401574782594951342548837410441200290733338032526353513084793937984997949578170760791903999736291842181621963250574851421507831701064063912449849413172670241330884387514421259190912380383298164284999
-n3 = 29741021686246020663676841105136775419357440781390260185592393569401376370805978457667540637964200363607306500686262920691759678594031678300413142185183670884962159744553489320946009596478586998527067077134149278862373300775784094204755592034106781470475619885674201222026771053219023490292688620343351009379638231445481201297167271847129926702267108223608485623131033339305214837391614096507988954783053070796974148251216158278106592716506313630837162027599129553042520944246264174701211107075008419327392352704491698073652799599537256566759453566984344533606287599484285948531866987190797600263099518976935518240853
-
-c1 = 6959258084092071065454299562288093923928417805928999659456406888937711509968856448163724527178151995480998144115831503011062045998734828883932412902319165009103141785130495087527312884494217049521337026706981996133432121798284172867545561634801496799668796585567711427864913170983434124205704168783854067763295351235413293017461040137295238173652253470527795039349714605669787423743618096196647453389748359636276835096715488576301332996050701277261859215493749088704184934893541297337697890057228935005941328617003209076420546007716706353983380827300196405400201116416777230463275285732458512616567135941354467426685
-c2 = 6980329295285525362547267847848318865994479894934736155773709405141249106739972526023147681931864449293251687818166317241310314795104094837920560848283265330877221117715222738878585798211133044997504018312371879793223144496711763354586556889478112149480922447037459440851037495694217691645394427027614927170296896917587773256575272276914565557013085090885698797535297051218113044222599072597256695709554731560694742808401895251490618749646636594613484000904930914249322765325562362771885023000308531495515513151456771016399566960453308004677247446640121091968613983880226467225115682271606727631686032091291561140665
-c3 = 20233993944978872042376344612943348102384153122558951915884274540138133554880115520330270710436883503022447682261018630693003219118284031617386534453929979962484430097693138337783002193192655501743050154775785535891890220923675994415232467097451208945510241779558595207425558347996942813211797652323984401196168255438306008115570489036147326159800446645923532611587932910081212717758849963264411492688567511495848103724155361462459108323999586803944933759202774033308915621722956400626498734688034239662478280986247839989724798426875779835896165243527034531628504097837684091017613599431520636356624353558008613223963
-
-
-def GCRT(m, a):
-    assert (len(m) == len(a))
-    curm, cura = m[0], a[0]
-    for m, a in zip(m[1:], a[1:]):
-        d = gmpy2.gcd(curm, m)
-        c = a - cura
-        assert (c % d == 0)
-        K = c // d * gmpy2.invert(curm // d, m // d)
-        cura += curm * K
-        curm = curm * m // d
-    return cura % curm
-
-
-n = [n1, n2, n3]
-c = [c1, c2, c3]
-mm = libnum.solve_crt(c, n)
-print(mm)
-for e in range(10, 20):
-    m, t = gmpy2.iroot(mm, e)
-    if t:
-        print(m)
-        print(libnum.n2s(int(m)))
-
-import libnum
-
-e = 13
-n1 = 16655230929893303490818415854457831426545038662809855283873228642358207995734291242944120042612699642460820594813654718158395826755230956722936107927889550129166619245152453353908373751380196656611349200623414836128383308653618062999595622747482867683840133843768870236300348203389275090871132570173650238774275209757683812077533989960172822335488251744796657926473009279723460304257252876756936524918018903158795894385111046938638194925881670388700872760201130485273663156422785999102754192840209476417602399017445296045070405343876349687582470436774316410697773759057621576657298096301937899052773787116133124199739
-n2 = 17197151926745749646602149115445210421300330711044282276861045275221683290586877554048509794473112203880585601275129330843554946888863132721219683639579200702355880529569042889789589005950061966309684759066705732225014741164779016525568884409690021988879475589545329149547046975086877521757237117008484775731784935960191717287332176327498377273179740487245459081737196777751408106728622513560888261855065717079007065635401835089216224111969668029246916986663313301660909538148574652809266532053889578734157117390082522831069594417637550812101652367765364077901612478983024721669687150628356918237152414368862535409859
-n3 = 18719461901666732419189610536735130974364055134601694187780706398369536769336080321122034942831217438281120989017698755904233940669427542442488330152862658754609065361849067002424120904308655036927580582916373684567047102601602588472175947665724244201887952599804681827419266055359412641159981152796138695901074514583606207162167385730873921563442166111892785482387108299191119048884993267729877797586421940344366636285656854837470348603688925980178978612114344024951042846249621559376348599687263736342957456838732355009637030035658212442442824658869094581324944034490700706979663405137522294780606800571433058912041
-
-
-c1 = 3530761236149189046680124371485374220252032991305088864647979778627799354583229731576585900490173357726425570018182390597284149666834264690795437972634538596441103368165128688664787322126097802985602065455316693754513332761284857157982201975554297034291092099307950246864758375115838291339394148547902128382917596947095456178572561422004708150053706114994560773293625641699691472764190426577272488084620105693964419578988589192873196530900413833531923536786853211065167782657153004342018675666293830194703777994380600060782651326623229047839109994778831432598543154184891096335217588164509636922274833553782288823349
-c2 = 7557835478962501903223351987016911891266554255050134264644805724502475848487138948948076311894495847429608136390014902405718084026208891531815323418707377349405409096779206918831458396991602033494429461919844309109113047361743133772636443322195238900874786548606687215969337920658068807801603115402783849082788527952834594443136756890747461628705174983562847145588532659589787532039981477468881131005056101092222499397893730056830156407331988257383965698358904379729558105489119604343081747549319382873235286788453435066434264212954607441597606413293491628299838317713381567250093086011058119721189087729804152444980
-c3 = 8471234074077377509408346140986116360421840978074779990698043926601850838824365885362094731657766299393262223086536737448516669969503891677808275285733096884405583100485903641986516527279324847718603091709062689898441711907846902050004165404073776422495381050861998133576074526490209080137421773440295749900582039873013319584167081936219517593826232230971430937112005615502869367413205660317010303160932970748420125111225082886082306332340892549579826854620461821084886193470846195356695313518639669516456574134135244251956477677377976434266541164893562226872334598362396368708087248848222008201970781942468960022694
-
-# def phase5(n1, c1, n2, c2, n3, c3):
-#     r = CRT([c1, c2, c3], [n1, n2, n3])
-#     m = int(r) ^ (1 / 13)
-#     print(libnum.n2s(int(m))
-# phase5(n1, c1, n2, c2, n3, c3)
Index: RSA_整理/整理中/解方程_q=inverse(e, p)/推理.txt
===================================================================
diff --git a/RSA_整理/整理中/解方程_q=inverse(e, p)/推理.txt b/RSA_整理/整理中/解方程_q=inverse(e, p)/推理.txt
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_q=inverse(e, p)/推理.txt	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-eq=1%p
-eq=1+kp
-#两边同时乘以p
-eqp=p+kp^2
-
-eqp=p+kpp
-#两边同时乘以4k
-4ken=4kp+4kkpp
-#两边同时加1
-4ken+1=4kp+4kkpp+1
-4ken+1=4kkpp+4kp++1
-4ken+1=(2kp+1)^2
-
-
-eq=1+kp
-eq-1-kp=0
Index: RSA_整理/整理中/P83 AMM算法/1.单个P/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P83 AMM算法/1.单个P/exp.py b/RSA_整理/整理中/P83 AMM算法/1.单个P/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P83 AMM算法/1.单个P/exp.py	
+++ /dev/null	
@@ -1,82 +0,0 @@
-import random
-import math
-import libnum
-import time
-from Crypto.Util.number import bytes_to_long,long_to_bytes
-#设置模数
-def GF(a):
-    global p
-    p = a
-#乘法取模
-def g(a,b):
-    global p
-    return pow(a,b,p)
-
-
-def AMM(x,e,p):
-    GF(p)
-    y = random.randint(1, p-1)
-    while g(y, (p-1)//e) == 1:
-        y = random.randint(1, p-1)
-        print(y)
-    #p-1 = e^t*s
-    t = 1
-    s = 0
-    while p % e == 0:
-        t += 1
-        print(t)
-    s = p // (e**t)
-    # s|ralpha-1
-    k = 1
-    while((s * k + 1) % e != 0):
-        k += 1
-    alpha = (s * k + 1) // e
-    #计算a = y^s b = x^s h =1
-    #h为e次非剩余部分的积
-    a = g(y, (e ** (t - 1) ) * s)
-    b = g(x, e * alpha - 1)
-    c = g(y, s)
-    h = 1
-    #
-    for i in range(1, t-1):
-        d = g(b,e**(t-1-i))
-        if d == 1:
-            j = 0
-        else:
-            j = -math.log(d,a)
-        b = b * (g(g(c, e), j))
-        h = h * g(c, j)
-        c = g(c, e)
-    #return (g(x, alpha * h)) % p
-    root = (g(x, alpha * h)) % p
-    roots = set()
-    for i in range(e):
-        mp2 = root * g(a,i) %p
-        #assert(g(mp2, e) == x)
-        roots.add(mp2)
-    return roots
-def check(m):
-    if 'DAS' in m:
-        return True
-    else:
-        return False
-e = 997
-
-p = 169192804045017094881483391290948160084538928031716323749363864952453968973507689162051165395748104110078160856791051809212190939432475142974911541618441458487669050818296365973889691415623806933502603345031427784795571665740530721508383685794846991682950112717404480456329219127191697671498037366841158723543
-q = 107516396467746261711633898678341416690878446946218041251896502835689317784482747676107795221812916591321630759086326505565275611515776242892889358779953138176525964380991025435521861396436904104071935067377647496422254521013295763929078451759522826104921925202219553793049032407587608850233803508977340633609
-c = 7296955328866123806615327249732627185102404227332181196296735121223965109231156544280256472492779759505533523060928048594910557437933201943976173955148680274140829916070075759044441331615135242760488256932238858269529909634447825461421412145996149026770528870738269768868586920051310346790350630656242240675615378779267818783700730455951708072880647986805110335263926177449091704517836266354071222826319675028232152825498040408774211261689801412297908590166114832939080331783731498956480608994534272354837899909567113733994622681549792329747132730450648055557829163328285671440063040320192447007187073122676185153708
-
-c = 15433214846771804225704093824935372144929516863829752998270111032551363583267576397009018518790803908369965458162930857063271509296349091229352855725285388975497906340053281554202527432848881160125418406408621879995822551367228501163128699032015069585502994319524445505522625561831240862136447585120010288772692097621553249775117843166714346924868089146429002417223863834435968726551668931140147337199939823985783939085842479154589529244209712172799274024573845157268545992888944742377166586536479490962335287124809557709167220756920767331929168230518135523463578566851417486746667008938122693256033127001185017237773
-p = 0xa892eb59b175bcf896be2176598f278437fe10ef032279f06e1092143acfb3c16b31811cca5286699595c2720c652ee64f8adc92c8b16a5601dd981d6f839ce9c0513db30de88c2ec6cae1a726acbd235ea946631bde633707d766287a2f075e9aace1606bd8b4f52d4f5b87dfb81f14fbc5338004575e9430257e180a169eff
-q = 0xe3d47225b77e56129dc3fed716181845f89fa15b2eb35453ffdc0f05cdf57c0d90410911d209818e886b202bc4893ebe85a07ef670122f0e70092de1b7963c3b24a58c6a9ec9ed677db3473b1882d10d550e45c18fd57b85a70a5401a074d36760e85c7e6258f0ab08fa69cd433709910fad6e145f7b85f589e83d61d3baf6ad
-n = p * q
-e = 0x3
-print((p-1)%e)
-print((q-1)%e)
-
-mps = AMM(c,e,p)
-# print(mps)
-for mpp in mps:
-        solution = str(long_to_bytes(mpp))
-        if check(solution):
-            print(solution)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P47.little fermat/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P47.little fermat/题目.py b/RSA_基础篇/P41-P60/P47.little fermat/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P47.little fermat/题目.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-from Crypto.Util.number import *
-from random import *
-from libnum import *
-import gmpy2
-from secret import x
-
-flag = b'?????????'
-m = bytes_to_long(flag)
-def obfuscate(p, k):
-    nbit = p.bit_length()
-    while True:
-        l1 = [getRandomRange(-1, 1) for _ in '_' * k]
-        l2 = [getRandomRange(100, nbit) for _ in '_' * k]
-        l3 = [getRandomRange(10, nbit//4) for _ in '_' * k]
-        l4 = [getRandomRange(2, 6) for _ in '_' *k]
-        A = sum([l1[_] * 2 ** ((l2[_]+l3[_])//l4[_]) for _ in range(0, k)])
-        q = p + A
-        if isPrime(q) * A != 0:
-            return q
-
-p = getPrime(512)
-q = obfuscate(p, 5)
-e = 65537
-n = p*q
-print(f'n = {n}')
-
-assert 114514 ** x % p == 1
-m = m ^ (x**2)
-c = pow(m, e, n)
-print(f'c = {c}')
-
-'''
-n = 141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393
-c = 81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883
-'''
Index: RSA_整理/整理中/密钥_公钥分解/出題.py
===================================================================
diff --git a/RSA_整理/整理中/密钥_公钥分解/出題.py b/RSA_整理/整理中/密钥_公钥分解/出題.py
deleted file mode 100644
--- a/RSA_整理/整理中/密钥_公钥分解/出題.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-from Crypto.PublicKey import RSA
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = libnum.s2n(flag)
-c = pow(m, e, n)
-#
-c1 = libnum.n2s(int(c))
-
-with open("flag1.pem", "wb") as f:
-    f.write(c1)
-# 生成公钥
-rsa_components = (int(n), int(e))
-keypair = RSA.construct(rsa_components)
-with open('pubckey1.pem', 'wb') as f:
-    f.write(keypair.exportKey())
Index: RSA_基础篇/P41-P60/P44. 共私钥指数攻击/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P44. 共私钥指数攻击/题目.py b/RSA_基础篇/P41-P60/P44. 共私钥指数攻击/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P44. 共私钥指数攻击/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-
-#2020 RCTF RSA
-e0=0x1589b1732d8ce5aedf1e34a63a14bac68dcc11ee18b94e293efe58c2b77d055db463503a039472eff881b504b90e6bec1c90da3efb02c6b94770ada0a921eb5e9d19a4ca1d26b47cbaee855b72da5a79a9acb675e48c46140063e53ce1a9b74c826a1173f720ad01681bb06ad6e993d953c25f854b01107f90b7ed1db62df4f1
-n0=0x4c9a771c771a499f13436e8b1e237db8bd03085297501421b08c4aad841fe078bbe3a916f24555b64b322a81d59c6bbecc9d61821406d61d59932ddebef621180f4df2b7cb4198de92609fec4cfabf4ae25abf3a1817550d1a32ce91c65974c21dea804a536d1b659458344535ed756dd9bbc683642405d1f09dbc17815ec031
-c0=0x40b12da27be9bd9f40b2462fba93786d1a0cf22aa1adc22597854f5be0856fe53031ec6cfb30f43397c6d42f4b935914a6ea448a531517f05200abd13d5777e718cc88c16bdd432a2536c1e7f6c31e78f223a3b17935c565030b497ffe2a91177b32634bb0affcb81ddce96c031548eb312faf3038386154202a9d7dcfd75061
-
-e1=0x382abe54e39f9f447fa8d0e5a7d7c9487dc25e3d82045dcadc119e4bb357436cf1f87a000e8b28ec0427cc64578dc7e17bf81935cf9d6ce9f0da262c192e63fe83ec83b50083f5f9843fcad6bd86da5e69cfbaaa4583e473ae3ac3acdc472b194cf0f37c085b6599418d12ed97d54f339a75f353958c9836097a6379ceb742fd
-n1=0xf092a041b286be8d44ec5ecfaf0504e5ed9353fa56746c6a4dab91dc684bcedf5260970c8b9f66bc470fbb4bc3d326108c2cf0502e01e38aa18faa0c626658272d507e9ececb66c927efbd6aa51c2ce6f3c47207faf94b7e385a29e85fe6d79d27eed0f4bd87a22f2a849f4e21221634e4c24bd69e62d6e110cda2e60b2a17bf
-c1=0x5f4a7a1c54bd14d1390b6f13a0a366a98f93cb68347a70684d9ce513ba1fb2e3dd72d2e5c73e432658400bc4da175a2bca6861550199337d67a40814461eaa34774a8e7179e1a33b5769946f2d387021e14e814e58bba87d0b9fa8443b8e66c7876c83e8b49d67d92613953afc7b4ce80149e189413f6d44f40460836668ecfd
-
-e2=0x2be3fbd6f7db6a8a1f04533cd3ed3f0399d43261dc5abbca04e388724f6f7ec5342f027381cc4a72b4f470ff47a01caa0e70e169c31e46c773f8b23e34683b51746a97f665f8718ca1c2a27581fbb061aa7d03e26de76af4f64788dcf44691a7f397c1fba842184a8571792f239993302b0b33e65359c1d4c4e72c4b36e55775
-n2=0x7ffdd5a578d58184af984353fed4d55b79fa92113a9f1176af691b8938340b1a7cbdf7501da790c5e899be4d77d9415f8fec271fb07b2249e147136b0823022833a9c8d58f3b6f3bea52f55cc603abb32463583aa1f29a1a9639f09b5e370cda35e1e885db83059a6bf530067bc2f3dd752216495e0d478479dec2b7e0f8dfa3
-c2=0x28e4ac6fc608d2bb8889f6ea73c07828796cff301c708d1763a139cf57640e254d93c2cdcaf79a0e33db68ebc93f72013065ac554512ab4374fe5edc023c9291bf3615d7932ab471cb4b574913c16c8452b76ad88c3c4b483e686294369577f07cbdc497e6082e1b9313529e112b54b8f5b5b86996ad76898c3315aeebb5036c
Index: RSA_整理/整理中/Coppersmith_m高位泄露/出题脚本.py
===================================================================
diff --git a/RSA_整理/整理中/Coppersmith_m高位泄露/出题脚本.py b/RSA_整理/整理中/Coppersmith_m高位泄露/出题脚本.py
deleted file mode 100644
--- a/RSA_整理/整理中/Coppersmith_m高位泄露/出题脚本.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p * q
-m1 = ((m >> 12) << 12)
-e = 3
-c = pow(m, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
-print("m1=", m1)
Index: RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/test.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/test.py b/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/test.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/test.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-n=p*q
-print(p)
-print(q)
-l1=pow(p,q,n)
-l2=pow(q,p,n)
-print(l1==p)
-print(l2==q)
-
-aa=pow(pow(p,n,n),1//p,n)
-print(aa)
\ No newline at end of file
Index: RSA_整理/整理中/e和phi不互素_基础/exp3.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_基础/exp3.py b/RSA_整理/整理中/e和phi不互素_基础/exp3.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_基础/exp3.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-import libnum
-
-# 当e约去公约数后与phi互素
-def decrypt(p, q, e, c):
-    n = p * q
-    phi = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi)
-    d = gmpy2.invert(e // t, phi)
-    print(d)
-    m = pow(c, d, n)
-    msg = gmpy2.iroot(m, t)
-    if msg[1]:
-        print(long_to_bytes(msg[0]))
-
-
-p = 171854505164939390402295426493389586289972154851849140728417624619463988154808053805729538974688869671559032639921300088271234681410193379381085714252211392886408792711387524667824537369266846649573070209815436507363007636943912350208275895292853801665488228125846058987049326903498661007035974420392738723323
-q = 145951936627745243523384785325963094339728144811023266133546816860787405503371056873662508073284279180417626507724315776654624382665743082805910036891739754019932290977071276850239245644056698685966997752654383650764557358649666141576105936215709831181842086893228254304235678475375978464394818353375373451573
-e = 830
-c = 4413268199893347044741276120215584703428167052744516280494996526431559720190092261631829389527634625276020346166956540800884139234489942113764564139232948414263452549927818365096023041932432723988241639527832673120924732407691135173154085803338322715604275530735968992726708155724384432557207264839248502158712330572704509492520346044648676055223193900826626346707083590815897507927683083455678855000344499804465073698745769989966769567497677402668725931090596642504740789789740965769347050166069295727209131555338513809368814890255851742010120871635378654904140016065148709710206173069000137023824698858539843753921
-
-decrypt(p, q, e, c)
Index: RSA_基础篇/P01-P20/P07 N不互素/3.例题3/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P07 N不互素/3.例题3/exp.py b/RSA_基础篇/P01-P20/P07 N不互素/3.例题3/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P07 N不互素/3.例题3/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-import libnum
-n1 = 103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061
-n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073
-e = 65537
-c2 = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264
-
-p=libnum.gcd(n2,n1)
-q2=n2//p
-phi2=(p-1)*(q2-1)
-d2=libnum.invmod(e,phi2)
-c1=pow(c2,d2,n2)
-
-q1=n1//p
-phi1=(p-1)*(q1-1)
-d1=libnum.invmod(e,phi1)
-m=pow(c1,d1,n1)
-print(libnum.n2s(m))
-
-
Index: RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/题目解析.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/题目解析.txt b/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/题目解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P27  h=pow(ap+b,q,n)/题目解析.txt	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-(p+a)^q%n=h
-#两边同时p次方
-(p+a)^q*p%n=h^p%n
-(p+a)^n=h^p+kn
-#两边模上p
-(p+a)^n%p=h^p%p
-#根据费马小定理
-(p+a)^n%p=h%p
-#展开
-a^n%p=h%p
-a^n-h=kp
-#求公约数p
-p=gcd(a^n-h,n)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P48.方程+中国剩余/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P48.方程+中国剩余/题目.py b/RSA_基础篇/P41-P60/P48.方程+中国剩余/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P48.方程+中国剩余/题目.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-from Crypto.Util.number import getPrime
-from flag import flag, e
-
-p = getPrime(1024)
-q = getPrime(1024)
-n = p * q
-assert e <= 500000
-c = pow(libnum.s2n(flag), e, n)
-leak1 = c % q
-leak2 = c % p
-leak3 = p + q
-print("n =", n)
-print("leak1 =", leak1)
-print("leak2 =", leak2)
-print("leak3 =", leak3)
-n = 21256406304024147327122699985764737895162788854942201173538004689536569610046157311527715126074775927977409773971656249943602454790380966869525211733301201659688694473703188427037879868522859419364680904585572399937639393418586498509580133474303442722716959873727260844993296681950092753897902540593927952622713860163782763263944291810729056735965535138964485886748344167499818148134252327820007439830749462775149754781930983094046362696040641091039506998835624218220892441813224657845627120344960554424765109502415773475619490661527184126374299883610442465428985757004551740482644952396990065188807827114495184096249
-leak1 = 8842431959638543756327530752221031675897458993985909403335303147413741167900365489182674478419510549838159493192002672500346433589707076289344572454304647803237654059883974235710442126617587691632375039292283285577033977676131772115877520248352227419433136507412485140428972344000541898060766721412300525883
-leak2 = 127414092867622693231378230621806169422569654246682818498761930473755998913688181327473434110121174292309611256339271412324673262030535400937563769685033472683498585742711576446343086462569783541192470920638935990937187809422965809986860709074542257475025562691683977493260026623616012846939417988284096473040
-leak3 = 293130152177150437492580785085598394773458388719469800871702200331766258900690595210759869625006484354799804558552583572062231998451041105464048317708732987121458633718573774164071597186461239762511364549980544029915308083867329707804739776241438307060614946195675715671343671137725809499387682363101164970886
Index: RSA_整理/0.sage/P58. Crypto Lost_N/题目.py
===================================================================
diff --git a/RSA_整理/0.sage/P58. Crypto Lost_N/题目.py b/RSA_整理/0.sage/P58. Crypto Lost_N/题目.py
deleted file mode 100644
--- a/RSA_整理/0.sage/P58. Crypto Lost_N/题目.py	
+++ /dev/null	
@@ -1,67 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-# part1
-flag = b'SangFor{}'
-d = getPrime(435)
-count = 5
-while count > 0:
-    p = getPrime(512)
-    q = getPrime(512)
-    n = p * q
-    phi = (p-1) * (q-1)
-    e = gmpy2.invert(d, phi)
-    print('c =', pow(bytes_to_long(flag), e, n))
-    print('n =', n)
-    print('e =', e)
-    count -= 1
-
-# part2
-p = getPrime(1024)
-q = getPrime(1024)
-n = p * q
-e = 0x10001
-s = pow(900*p - 218*q, n-p-q, n)
-
-c = pow(last_n, e, n)
-print('n =', n)
-print('c =', c)
-print('s =', s)
-
-
-c = 13007070082982086015048648249698272815655157209727275797297990841215796701955079738986996208838342773211678208282162295881823413924960399315068498509939876883297864092435101096694113071462267388158595518905101264654742860199638059278239359756219217345342001728599121265614144789005805619626458575126846199823
-n = 145575036089862184772968012014750816659166028840828357885024516131565102712346345625910708214596157522939248398359985832422106056149116726640753670919394145037581595172384392223713667048639158944450925280598688178812170253438103664700756173806183649477673497327790421063029596049211220930285435947389700047717
-e = 6104905725583061487097813130111812725712623687061285535333592835899028572315489283518324105546236465450024687400996793197533588656449965379858202658832799573292015786259804984314040621630959455897094519928941186899832366216111359619637121411868069759469878142871432060850651758192209783752650530390826992241
-c = 59089700172263364510471541430195724136973801897202789650586019199451669728729101831161257990233999290546484165767660146638244043033774379664984894178111808280076960669616271416462197675878517863817855762681885790347812435849975072020273928469523961698304409181769820692602979823921421820511589311465948726144
-n = 171055961405321566289532118753767563629109197214150143506779656820887080836894368955104877312070939117885512468517951216152955714212079279910802095156350517032659766690101321767892798466184405283403136505441356956934759143173462058806620784497304916652269667097971495139608875846338091109621496242787157524093
-e = 30639328953696065722075015079387560065304228779854040351182305267894609577068955234152835797506237100956072519388029280776532681675227753068574540049244778077615881093270476533536257809592871380358708151151683035275615961208943826349952952069226829397420921321531951316523368786223865432179572145636266109841
-c = 24257648301491609274972482189063774024772127961295257418254600487615473027418329077996964279110710299066082437371516700591657843057597234861450272363240630164504734590903528165056021531272324846249133757036680429476939369309982196345252669711604534774523215422683385359295249160897422071732828044179085194829
-n = 99735998821682404719682435155046621256882035421263371444758755082217342389922499214602126376005623406797486880520535486455942687180959663032781490782870080236095770591995437146834606144553095293546973559144743704707021952152013362323293717685161426469215016058837362232410103330238322051089471439573994907641
-e = 81580834845272005549352820344384188734735397414102222005750919291263464191246301214086773744759605577533897859454210564034313392997143493147211816886655474145064723790935089304983994174659126346174766206623180477360887938029897557683160392738708450965784921553806400996559956745732829531154835363767773681061
-c = 105310270039347542993580213074911114373638987155564864341577443142664062749969114572669295115218200093381519732560445712425129105002834596010587656544575627162469582470245756143405705971157024449801127133755773536097173259762599166367688198314997549663330392481942723997656023552049910279885657664434799986156
-n = 118810172988175650374012494943583618875926370822995080847518376655089884052560062524542984436965153851285471302754389325839857100631601002627184437173686224779115595776898914116490948408328080895524604124937295381872443370706017215743101755848741173976351916104362193751372512936063892260855907424754174906407
-e = 57970672598245590037421993575987847127437841761387257183798066822318596392918179916711068560675528926294272336883938499809087281773070750919594701600347605662910664129043903749270935721912605279738208730075557097647316659218872977257614306133047318781156168440924237849014715453590776000659069078250493480521
-c = 50430341205487530895874157969557709374947862873979946417751686643857339147558892228311050765271667685452170747716439387141655285820549605442067496018168606163031122498272292974227360674531814593351170403519198099247839499352696883293133549658442172721339510734646474794377043195182186423251146266787514560008
-n = 80837118813383038376595037732171926303253457956240963765871280771175535050976501573174357090322706934194338649978803681581485022992041019276854467388155755920855237665754031077890133388056350355753218650482718197635332681450734918373003830855184694566883308495322647552169761087814135330222306083205629967447
-e = 51172856769626923894369204019063376718507295306271724506808987836327051371415876890252665691760404489737902233106400428873399230724307065583727090788789453353097657968301923726049631007431604461521879288667433292135840271678776989737261214286587609316530839676362375173635542358540766454865624476392874630929
-c = 24533435736573623334539431528997922833496063510219641412038735658846891237553927656156039267456590702682308774830590768888594750053426705504840854071081487058180327084899496154314864910274839867793265086899109787190447838634454294468362549369144295591261617705578124672391399319219038350878856530074063011081
-
-?
-?
-?
-?
-?
-
-e = 71905546659735491498365580186225996341462093571074706903142472266442052559638067842283521897292088493599089076218507596455101425837547743511983105386966540811629138324774640350969049873787070380161376295760563611617178869788237730560614549740931199083194226891873779907795120035746039593933256380499568775673
-
-
-
-
-
-
-
-n = 20955464633057600258987829727550073699845816289000240676927869818926752810905511184835302717855745473943671910742784074561535017974853574714483642916831791020944940633062963043482236587316552330558006573820423830770910893877191630012247591380869307656539553888318621170921800017818132160253923739647771452839191101104391894609403591447166963426444018303147924843072923713248135717578047687411974516038299879758561542241544862102935741869647633013298181782208467117482306148238724598730801037692668154263059348953587766571379262442743822007387408949824805991797355089583176028081305319076896384126383926193964322235633
-c = 14815997295683082265558346455845370590765145583224067337292601455640475216349267044144296003388877395546880235511728120803143112914764263292087421926972160283428440959367872665892349776616002018624301524264223581314248857537034849571849747613963209414193510408342387107662655487869098045345428379025731617851483935711671021438908270746316921057871871545763798735895118697635903815383424855759281301248295597297869474539060531099443223045844791615425429748703429968627505406271675074549912664863784774239200764403372298995457799473112713379340870305136776932539188516395526955161359417473843082895317392495109895085666
-s = 14728527428626630951705148488338433865446345521255631461200851513782412494843597938863837697938230856843797646287742397249258609197032095158567448934855031190354034543862057663422053672290704598313096289223478302733688501373756860855445632789922930577582465209872782549135254792729915747104521949095814028476908208917363509089190935273004331739978623136706041729628143765893264698948654175039064609891374587695812144855411176143224066975193255513405865992328257766815240718115442741846443490733767716842367336385132648983241895710001620533668392060358573295789752856876282590472528110546264872047138094995909454134250
-
-
-
Index: RSA_基础篇/P41-P60/P58. Crypto Lost_N/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P58. Crypto Lost_N/解析.txt b/RSA_基础篇/P41-P60/P58. Crypto Lost_N/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P58. Crypto Lost_N/解析.txt	
+++ /dev/null	
@@ -1,9 +0,0 @@
-
-
-
-
-https://blog.csdn.net/luochen2436/article/details/129181271?spm=1001.2014.3001.5501
-拿到题目，d = getPrime(435)，一眼丁真就发现是共私钥指数攻击，利用5组n,e构造一个格子，解出d
-仔细看了一下题目代码以及output，output中有6组c和e并且最后一组的c与e之间缺少了n，
-我猜出题人应该是循环生成了6组数据，然后将第6组的n作为part2部分的m，但是没有修改题目代码导致做题者审计代码得出的预期输出与output不一致。
-
Index: RSA_基础篇/P61-P80/P61.求公约数+2^16/解析.txt
===================================================================
diff --git a/RSA_基础篇/P61-P80/P61.求公约数+2^16/解析.txt b/RSA_基础篇/P61-P80/P61.求公约数+2^16/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P61.求公约数+2^16/解析.txt	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-原题为NSSCTF Round#11 --- 密码个人赛 wp
-ez_signin
-
-n2=(p-q)^e%n
-#(p-q)^2%n=(p^2+q^2)%n
-#(p-q)^3%n=(p^3-q^3)%n
-n2=(p^e+q^e)%n
-
-#n1+n2
-n1+n2=2*p^e%n
-n1+n2=kp
-p=gcd(n1+n2,n)
-
-
-后面是rabin算法
\ No newline at end of file
Index: RSA_整理/整理中/P89 P xor Q/test.py
===================================================================
diff --git a/RSA_整理/整理中/P89 P xor Q/test.py b/RSA_整理/整理中/P89 P xor Q/test.py
deleted file mode 100644
--- a/RSA_整理/整理中/P89 P xor Q/test.py	
+++ /dev/null	
@@ -1,4 +0,0 @@
-pre_sol = [(0, 0)]
-for i ,j in pre_sol:
-    print(i)
-    print(j)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/出题.py b/RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/出题.py	
+++ /dev/null	
@@ -1,26 +0,0 @@
-import gmpy2
-import libnum
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-while 1:
-    e = random.randint(100, 1000)
-    p = libnum.generate_prime(1024)
-    q = libnum.generate_prime(1024)
-    phi_n = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi_n)
-    if t == e:
-        continue
-    t1 = e // t
-    if gmpy2.invert(t1, phi_n) and t > 1:
-        break
-n = p * q
-c = pow(m, e, n)
-print("p=", p)
-print("q=", q)
-print("e=", e)
-print("c=", c)
Index: RSA_基础篇/P61-P80/P63.ab与共模/exp.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P63.ab与共模/exp.py b/RSA_基础篇/P61-P80/P63.ab与共模/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P63.ab与共模/exp.py	
+++ /dev/null	
@@ -1,39 +0,0 @@
-
-
-n = 16125407552864408038451978971181995868587415471360339980312161114604643561448189461178314426572196867330062460236485889607095216773610462673103525772850249723607127265156082437903554965291175082962639383670937777311212896542972880424526079735786844389686957083365598937203322023931600269428448046149266341128554306213612397973685363189571686506630309830089220474201802073858959449101463678487317186076440791650250365012789827421324921778250883488990582944368562892797416344251060566529139850257746842799863322714616986446835293581697909698285176760388107157669554377276259762618665488257388491160075176338147719827037
-a = 13322099359978468117372945784425510444699489610016328757147661948295406516253823721585011191447575070678806499049706999293540250271665120018677590850034030368730195727460200565297326051740643004879691301619699301106930837198015487978219038035197723076156409255613823021037443587984496717728543374662454371480847535762439189824812004916125039891869564141181736162482872749048932562058201189900746478873842107591299649081305019213582364534953875369121945643746097376620917802772688252466567153568522092062992030417712736678853318751806058050273319844033309624611135341470435429322414596904369077559157148448414839032363
-b = 10275112473052097822163214291710245927601932098450526023436146936515575568966157279003404407528918111137316033319928861357294023493650299285411997308906967017629349471597059845459569991332848036825641333607579647087347485564553165670865364947248868251173085509024531668592291055640081009491476771331141299698791088908862211221687025549332282038419404819610705192095183951267650322294156121830068680857085069554177406709624092077033969271498007410828074096659664006111360389535517799171965089132885207983699725930677229877112464611768708080016125996142926911506613455696889598916644316886658721740850065556243938007810
-hint1 = 5646585199324712910174870876537963922935541552960135665854448183261083672983331653471842641925332927782315514511532766879190801929980994592200158530247219526312018092215417868738295218479822713259089033062819804918266548266840411490391265219709570414166619339434539050638762944531192598576491596621743816843125895668542438923918478344982739955475060988594676093550481119457143084943131533380243144975602778461714997734422024740849870491507544447233405634629786945527801001275734833662623467945946282795996306293408310273736674209426457392716416888243874745568105752845915237400340094943662551705685040442624941385833
-hint2 = 14585520416190000580445268935877639341764643969476248446269709488912338827970488844346831212422329420900792189527752187774994153342996351962929221182898317644166070626979324794061661833397604017568609862262727324814815424928736663001245135821828306087205636823484794573005890510152188674905462762148100329985991698959636488617249906898501964648111982813010371107696317126789702686935854736324220969771123819040020121221332632913284083499130218851636149172445983987305390603339306926120007456352189098000654123268951023801063278397184055390984864816637614344524008267690049801207931569396692120561972519603849989128993
-hint3 = 62093942844955894809744369157790919272709918861758380679821577778048849347738275395666159786314235217854818169109692941511405178089534902688354311428283671061156522101189015915319595816373429513381246644721630263218045931797340921607548704947248385584064891710829013112219974267785184786002337877737639709838592212626216662132226423917011307673560256826430488539866716857680736031883178590790995624532262186067634107387809349232152735759985335934241188954392212538014367792568155050961352578224455757803682195904635225691590570030418963654743371040135500179324783700281415394891744127799547005015135086532660545095391079521112740890332419993624820181300060863161311031709022851421455500566323115875683812425673042153124072114571960643827025713430499560735327945430769108097870643289355930786864376038045754477540741831426313486186208377194724677735876320331562117490978784291302590568890413248378029250309728695855535870140308467228980587481032478718831718081368010375598581706830265936563271354286383793280590954702836704366205681837777194310753890918642427863999918174783991318434802104950572826848043286819209577713010622615357988184856985035869968426847979577245836140860190327001050885833097619703928776547085778778592553120373
-
-
-# c2=hint3//n
-#
-# hint1*1024 = (a * c1*1024  + 1023 * x*1024) % n
-# hint2*1023=  (b * c1*1023  + 1024 * x*1023) % n
-# #h1-h2
-# h1*1024-h2*1023 =(a*c1*1024-b*c1*1023)%n
-# (h1*1024-h2*1023)*(a*1024-a*1023)^-1 =c1%n
-
-c2=hint3//n
-import libnum
-import gmpy2
-
-tmp1=libnum.invmod(a*1024-b*1023,n)
-tmp2=hint1*1024-hint2*1023
-c1=pow(tmp2*tmp1,1,n)
-
-
-#e1 = randint(1, 65538)
-e2 = 9647291
-
-for e1 in range(65538,1,-1):
-    s1, s2, s = libnum.xgcd(e1, e2)
-    m = (pow(c1, s1, n) * pow(c2, s2, n) % n)
-    flag=libnum.n2s(int(m))
-    if b"flag" in flag:
-        print(flag)
-        break
-
-
Index: RSA_整理/整理中/N分解_N是p的r次方/出题.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N是p的r次方/出题.py b/RSA_整理/整理中/N分解_N是p的r次方/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N是p的r次方/出题.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-n = p ** 5
-e = 65537
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/题目.txt
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/题目.txt b/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/题目.txt
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理 [RoarCTF2019]babyRSA（威尔逊）/题目.txt	
+++ /dev/null	
@@ -1,25 +0,0 @@
-import sympy
-import random
-
-def myGetPrime():
-    A= getPrime(513)
-    print(A)
-    B=A-random.randint(1e3,1e5)
-    print(B)
-    return sympy.nextPrime((B!)%A)
-
-p=myGetPrime()
-#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407
-#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596
-
-q=myGetPrime()
-#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927
-#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026
-
-r=myGetPrime()
-
-n=p*q*r
-#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733
-c=pow(flag,e,n)
-#e=0x1001
-#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428
Index: RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/题目.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/题目.py b/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/题目.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-n=p*q
-p1=libnum.invmod(p,q)
-q1=libnum.invmod(q,p)
-phi=(p-1)*(q-1)
-print(phi)
-d=libnum.invmod(e,phi)
-
-c=pow(m,e,n)
-print("p1=",p1)
-print("q1=",q1)
-print("d=",d)
-print("e=",e)
-print("c=",c)
\ No newline at end of file
Index: RSA_整理/0.sage/P52.next_prime(p+2^420)/题目.py
===================================================================
diff --git a/RSA_整理/0.sage/P52.next_prime(p+2^420)/题目.py b/RSA_整理/0.sage/P52.next_prime(p+2^420)/题目.py
deleted file mode 100644
--- a/RSA_整理/0.sage/P52.next_prime(p+2^420)/题目.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-
-from Crypto.Util.number import *
-from gmpy2 import *
-from random import *
-from flag import flag
-
-m = bytes_to_long(flag)
-
-while True:
-    try:
-        p = getPrime(512)
-        q = next_prime(p+2**420)
-        n = p*q
-        phi = (p-1)*(q-1)
-        d = randint(0,n**0.32)
-        e = inverse(d,phi)
-        c = pow(m,e,n)
-        break
-    except:
-        continue
-
-print("e = %d"%e)
-print("n = %d"%n)
-print("c = %d"%c)
-
-'''
-e = 101684733522589049376051051576215902510166244234370429058800153902445053536138419222096346715560283781778705047246555278271919928248836576236044123786248907522717751222608113597458768397652361813688176017155353220911686089871315647328303370846954697334521948003485878793121446614220897034652783771882675756065
-n = 106490064297459077911162044548396107234298314288687868971249318200714506925762583340058042587392504450330878677254698499363515259785914237880057943786202091010532603853142050802310895234445611880617572636397946757345480447391544962796834842717321639098108976593541239044249391398321435940436125823407760564233
-c = 92367575354201067679929326801477992215675304496512806779109227230237905402825022908214026985431756172011616861246881703226244396008088878308925377019775353026444957454196182919500667632574210469783704454438904889268692709062013797002819384105191802781841741128273810101308641357704215204494382259638905571144
-'''
Index: RSA_整理/整理中/低加密指数_e=2_rabin/rabin3.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=2_rabin/rabin3.py b/RSA_整理/整理中/低加密指数_e=2_rabin/rabin3.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=2_rabin/rabin3.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-c = 69544098122008365404362084363106703100129828060729951875286300108187409752434091431958070449710849545293894427509731332109603391232669996343824626329922214945852346904863792615793077092573477272770896080330100575733798947163067912513775789041009052964547466568583353539184274864951400026558080635235037201971
-p=9163780868330371783046823560204742650207381649001998649144074078237594022997541853040616995577439077419293518952061614558930717648995958968548958385492411
-q=8370013716894660543940240406654509658721347047444446140469279948687027451068359349254746794140352451890594825470508554608349473296351748298082449565302119
-n=p*q
-e=65537
-phi=(p-1)*(q-1)
-import libnum
-d=libnum.invmod(e,phi)
-print(d)
-m=pow(c,d,n)
-print(m)
-print(libnum.n2s(m))
-
Index: RSA_整理/整理中/P80 h=p+q/rsa30.py
===================================================================
diff --git a/RSA_整理/整理中/P80 h=p+q/rsa30.py b/RSA_整理/整理中/P80 h=p+q/rsa30.py
deleted file mode 100644
--- a/RSA_整理/整理中/P80 h=p+q/rsa30.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 65537
-n = p * q
-c = pow(m, e, n)
-print("n=", n)
-print("c=", c)
-print("p+q:",p+q)
-#n= 96062491922080597831076518829216179918322824065648971872102662775708777389887258150456155926941199903319698900582336453690573807802679073691482797405893634581015816005853579232347512891669641228487952407080600046410083092215377365583621813092025715603671457491536970441472196963166133282824110392206475350597
-#c= 95857187009859870259610943591376704955772085571949125404184273414950492142547967617438560419529667029365675923587785478389531642998532642316223736947740729506296730470892468184491112789008312202904669826080520947868869318569542681551593258308795840060344552496526770905550765856978520074236388622120131381301
-#p+q: 20195887423550203161018939851084462918495401395674541827243191714303569974797909610430557278214309022383954568418589711220111848670523732316137094883861338
Index: RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/原理.md
===================================================================
diff --git a/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/原理.md b/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/原理.md
deleted file mode 100644
--- a/RSA_整理/整理中/费马分解法(平方差遍历法)_pqp1q1/原理.md	
+++ /dev/null	
@@ -1,11 +0,0 @@
-![image.png](assetsmage.png)
-
-p=a-b
-
-q=a+b
-
-n=p*q=a^2-b^2
-
-b^2=a^2-n
-
-核心总结就是：令a是n的"中间值",然后让a以步长为1自增遍历，直到pow(a,2)-n的结果可以正好开方为止。那个结果开方就是b
Index: RSA_基础篇/P61-P80/P61.求公约数+2^16/exp.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P61.求公约数+2^16/exp.py b/RSA_基础篇/P61-P80/P61.求公约数+2^16/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P61.求公约数+2^16/exp.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-
-from Crypto.Util.number import *
-import gmpy2
-
-
-n1= 83758575069905304067768481601753574998130100929563488113032489538841228437614038849648582947130531285620158614235448872871127520586959431556641650448541549150788998002451811261912231543271446644060890282133258667768706029719891178262570370575285298224152119578339390800107889334951078164762184333747467380888
-n2= 9831276541826816789368451633385540087371496489313852209076031193730848235018296111252032115432949863700248359574145846899107616306788202793767305144740541785563939136198331219646159758474239920030391929508514991198073422146216586741498057527918329570942088288077450777684683107307014975767032857456318358064
-n= 140856289298906159437739029545347610108994755491239167745641832705764858521348872395929019274279252591208014041777481788324765489375807836151544773947219166392455703715770608717639845195855883468725012423798709748849187737712690267229995903190368828458681379150127037925721096918609588453047678178189307880401
-c= 53100585481275556435409181501721693813984862333551455563238323458270043603912938367431862281708352595284147129805506010649262433103290734582315903650224375708892586331205036195752388648357117325957081723405359096400361691896699396085109653734337210068638841322039054338712409255759760189138139488615812969337
-
-
-p = gmpy2.gcd(n1+n2,n)
-q = n//p
-print(n==p*q)
-x0=gmpy2.invert(p,q)
-x1=gmpy2.invert(q,p)
-cs = [c]
-for i in range(16):
-    ps = []
-    for c2 in cs:
-        r = pow(c2, (p + 1) // 4, p)
-        s = pow(c2, (q + 1) // 4, q)
-        x = (r * x1 * q + s * x0 * p) % n
-        y = (r * x1 * q - s * x0 * p) % n
-        if x not in ps:
-            ps.append(x)
-        if n - x not in ps:
-            ps.append(n - x)
-        if y not in ps:
-            ps.append(y)
-        if n - y not in ps:
-            ps.append(n - y)
-    cs = ps
-
-for m in ps:
-    print(m)
-    flag = long_to_bytes(m)
-    if b"flag" in flag:
-        print(flag)
-        break
-
Index: RSA_整理/整理中/中国剩余定理_e=65537/rsa10.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_e=65537/rsa10.py b/RSA_整理/整理中/中国剩余定理_e=65537/rsa10.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_e=65537/rsa10.py	
+++ /dev/null	
@@ -1,32 +0,0 @@
-import uuid
-import libnum
-import gmpy2
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-e = 65537
-m = libnum.s2n(flag.encode())
-p1 = libnum.generate_prime(128)
-q1 = libnum.generate_prime(128)
-p2 = libnum.generate_prime(128)
-q2 = libnum.generate_prime(128)
-print("p1=", p1)
-print("q1=", q1)
-print("p2=", p2)
-print("q2=", q2)
-n1 = p1 * q1
-n2 = p2 * q2
-print("n1=", n1)
-print("n2=", n2)
-c1 = pow(m, e, n1)
-c2 = pow(m, e, n2)
-print("c1=", c1)
-print("c2=", c2)
-p1= 251223716969679284158034841648497945449
-q1= 312034879071048933569057506006677671543
-p2= 211337891216364704869900032967411360087
-q2= 297188134283417063106785912026186242733
-n1= 78390562144413299279009467011698556344448786147101545377210676133018753657807
-n2= 62807113593983181355469795214442769014099701199525162295780030497899849997771
-c1= 6211708410907396487178694692964828961624573302527469677177853845246758507683
-c2= 42421016332044012951488859938433606804129539757256957220125138277657724418334
Index: RSA_基础篇/P21-P40/P21 共模攻击变形/2.e1e2/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P21 共模攻击变形/2.e1e2/exp.py b/RSA_基础篇/P21-P40/P21 共模攻击变形/2.e1e2/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P21 共模攻击变形/2.e1e2/exp.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-import libnum
-import gmpy2
-
-e1e2= 83317
-n= 19361442710572745971265661179912428614335978862294499554478708154961900725571203060796104846289397242207304532314240136962004100859120350866177200389723065658762704195258332314791286248842309297348039111045266185355903400590470820183877252896166548216731371364979378507526744861441605219478410567943584909399458417880788827318597539692741384869777249157338164956516233081381729474311604082892186490173033244693551617094635430697205804969501877592642316320873084247185093376277647579480643486369145925195734181193015900482737320548696928588870712293186252013457131251209473809656777543374500592007808404407059561585875569527546497652518580045435210514546460508584320606314122520882426004609258608147903667923350952560862343978526661419457923377730038903725129920335146125419046956321000719022303404018007514471776998828154744785228693422230685108494515083105086516002742258455143048441346760686508352771381755359768486489070279892078844716848637514485979868052449468414483027672075237348001190373461535494802211938683204976566773050049547807712425194913096401165728862378611187510228222428679755307056276133497536735863204478321549958435946853973687386589497836951783399492540878952618631792625025126620608024559471293131768988077589502325651357976822933654550846615039529755326862460868499406888969184042128071
-c1= 8461455935702774839606732696628583481106108739457157757237961493721249315707058365854463354773540401038228236301572933195823206925383589280380438344346918293151928169930134045632956081184945062566817678757614816611860006425866597730747864519352309046720733870943424680296477704991108084039103348714387678260925701357278152801810444616098214964231942511332731906589339642434586792884729500618636404879133808745489823990051381479316035290316511507860259556699539853817794899071305575419968794233519130191693519669424965740754005557268523536259961342893331243822271702601491251166024629032785331163334845458532041066873062181204642511730061193181806412423310871852101503714865811232852678040552266896756835104015126426669170036333066668010437674021104622132437422087899276215087590613842963706972249810831528040008304175911799215946803926073839260039708714727246670180210772138254229999545871929350538204078637835690649108982156556159082202035891312400182426109033284706424624286874595070797624804888642649414098331802113837492380725023537502746076689560748513729573164798419260068335949704460969862627638288475890309143274515210188524564546972793051029662396980537597835874860939675476734819945549433268818379519178647303476509820821756282974287073312744339124424284365074314353072957540119217061097316369179812
-c2= 6204846642785521340470513546335239064256758077473460303136152226321426573866713276868303467627807818878464124001025948893472833684203082226317608116339642653526005250588488719287359040352790572959995584093188339849695217956472022875459556871491299322868787108334073007332501731796096022506406756118808831646084743403979543281704069120640233328839980099290857269846287187888156728145277024309531510105331797866833685076835273931526615042292719970926967658919153638762985362453791732734631621502983351581711188066449777097203043897589205329057225446193852593056040301734809364853181753118739604843784216536562612033307359103893806510482236157475021740603255590914121641809865052126419196638531405221094438510231726208366630512008162663744010330103156199459170979721924714894281792427651932643530734043790246173905509400532261288534889712214483873969552991657537356198890952147322594953541508366871552561029095676172024539741525694906063413062943730465813047155464168544196529490081901356676689826701155342513241655234549380041635792150618405682571311160853526719882812618473055821608217492122688669131559593093840370537049894579011917334477512297137182557102626033423909278319394496823138854073015927815382203590762482110896381565689852266596980436613904791614372199019839459027972129220041158226866818118745059
-
-def gm_def(c1,c2,e1,e2,n):
-    _, s1, s2 = gmpy2.gcdext(e1, e2)
-    m1 = (pow(c1, s1, n) * pow(c2, s2, n)) % n
-    k = 0
-    while k < 1000:
-        m11 = m1 + k * n
-        m, s = gmpy2.iroot(m11, x)
-        if s:
-            print(libnum.n2s(int(m)))
-            break
-        k += 1
-    return m1
-
-for e1 in range(2,e1e2):
-    if e1e2%e1==0:
-        e2=e1e2//e1
-        x=gmpy2.gcd(e1,e2)
-        gm_def(c1, c2, e1, e2, n)
-
Index: RSA_整理/整理中/P52 告诉ed，未知n/rsa37.py
===================================================================
diff --git a/RSA_整理/整理中/P52 告诉ed，未知n/rsa37.py b/RSA_整理/整理中/P52 告诉ed，未知n/rsa37.py
deleted file mode 100644
--- a/RSA_整理/整理中/P52 告诉ed，未知n/rsa37.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-from Crypto.Util.number import *
-import uuid
-import gmpy2
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m=libnum.s2n(flag)
-e = 65537
-p = getPrime(512)
-q = gmpy2.next_prime(p)
-n=p*q
-phi=(p-1)*(q-1)
-d=gmpy2.invert(e,phi)
-c=pow(m,e,n)
-print("c=",c)
-print("e=",e)
-print("d=",d)
-c= 35017095079265838979734409416685141495410012751608421171984571206906907112637156478970636762948745062984603962185272983251479813367054508240145465939059405315210753494552412701642616337156914318259643364976440231342251176780836484538401507518406607672852280282429279213480081726239103353793034991628250368074
-e= 65537
-d= 101594869720546931320854078122074713525440214937312570093875805795442939419150687426541696295674878779299548914655788437314309125616957909033562280929717866606065779817497302315467363623403872305239280119140790162548715397120510561988704976218698155764361497527906154413313848193338028881708170081388311050841
Index: RSA_基础篇/P41-P60/P60. 障眼法/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P60. 障眼法/exp.py b/RSA_基础篇/P41-P60/P60. 障眼法/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P60. 障眼法/exp.py	
+++ /dev/null	
@@ -1,49 +0,0 @@
-
-n1 = 6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683
-n2 = 20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947
-
-c1=6624758244437183700228793390575387439910775985543869953485120951825790403986028668723069396276896827302706342862776605008038149721097476152863529945095435498809442643082504012461883786296234960634593997098236558840899107452647003306820097771301898479134315680273315445282673421302058215601162967617943836306076
-c2=204384474875628990804496315735508023717499220909413449050868658084284187670628949761107184746708810539920536825856744947995442111688188562682921193868294477052992835394998910706435735040133361347697720913541458302074252626700854595868437809272878960638744881154520946183933043843588964174947340240510756356766
-
-import gmpy2
-import libnum
-import sympy
-
-n22=n2//(13*25)
-# print(n22)
-a,s=gmpy2.iroot(n22,2)
-# print(a)
-# print(gmpy2.bit_length(a))
-for i in range(10000):
-    #print(i)
-    a=sympy.prevprime(a)
-    if gmpy2.is_prime(a):
-        p = sympy.nextprime(13 * a)
-        q = sympy.prevprime(25 * a)
-        if n2==p*q:
-            print(p)
-            print(q)
-            break
-p=102397419546952293033860597727650152144175130286102358700580521651161981691864932442389800376284315897109792547767071136122457986326994452907466660551539601
-q=196918114513369794295885764860865677200336789011735305193424080098388426330509485466134231492854453648288062591859752184850880742936527794052820501060652747
-phi=(p-1)*(q-1)
-e=0xe18e
-
-def decrypt(p, q, e, c):
-    n = p * q
-    phi = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi)
-    d = gmpy2.invert(e // t, phi)
-    m = pow(c, d, n)
-    m,s = gmpy2.iroot(m, t)
-    return m
-m2=decrypt(p, q, e, c2)
-print(m2)
-flag2=(libnum.n2s(int(m2)))
-
-phi = (p - 1) * (q - 1)
-d1 = gmpy2.invert(n1, phi)
-m1=pow(c1,d1,n2)
-print(m1)
-flag1=(libnum.n2s(int(m1)))
-print(flag1+flag2)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P07 N不互素/2.例题2/exp2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P07 N不互素/2.例题2/exp2.py b/RSA_基础篇/P01-P20/P07 N不互素/2.例题2/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P07 N不互素/2.例题2/exp2.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-
-n1 = 18278456416897540360396258822757262982555755869670901090552498586949101988114819983049973792228149331753714211829150091366507963407709639602249698787433863615316934241223748268055507819756435927605756487582004688515855293842338007617018726192787272178786187989919650031295017445246608913808150370396832979736966944101019341527689214911779109999636349425823878126859829147994819384548777027669606291738366823809278767708461221830670665255418591083090040274616328116968600117656658246421927767060728182402210035045881818025673807969254883542917548511100917885959250620704515582518997559286168715792883861074220598943791
-n2 = 14718281935692942246514344466960823739043788561815140598178699003630478731051901387468570752239748871701513260441416821474763710775757545770047001681689286764572928181308278425603577448081174829594272045737613383467853857541067932138008740271004046748970111915370497637083205151943216917589213000669827068183128735055853090146367442283033992973854093411154488547740107755082193303785575614939069343199774715111804373406251308943619862703275132627574605543897680349862262913772613627719842043981943797101165701793459771726617487555152346999588560213302046402911610106668235901710477454671759962352749028587857389680857
-c1 = 14897512957877985291073451370997229971431611442234246383959378368138383843838602186764200234176467559404370286570662411222496252433014380640842874696486877004925614788148596161632851280090237300707166430170067495353446298066772402105814072501891920041154576728250668160351771877215919279860070607769304225631648712101695757447443748349446067746844910191804121935748134960309518439864721866967284850597357412411606643356342075119302860193616589493080428754805797969067310700610860435816047860794169521102300081676745004651672196010599021308459569165202732261338157558377669701207385936984772269758652310839805490426436
-c2 = 8964679463182022749797829546680381147968492022695080270157954224365732346700186653596903802305955380468152204793914476872234000593338240036398422292867781937160592148807729413972520261014124973472761268000048797126209010105345911203497254239189500567762324829782091374108165308434410235044784878269559848498007708005049415987165881413527082350625816180534142506509426576438823347406737583570228393620002029592018404347050644682030278682484606748950839477932988072925403147456191170453590581297805161865533569937880834249663768378358974835993063581854638638010548705670806550267429609766941078881760115520503213998478
-e = 65537
-
-p = gmpy2.gcd(n1, n2)
-print(p)
-q1 = n1 // p
-phi = (p - 1) * (q1 - 1)
-d = gmpy2.invert(e, phi)
-m1 = pow(c1, d, n1)
-print(libnum.n2s(int(m1)))
-
-p = gmpy2.gcd(n1, n2)
-print(p)
-q1 = n2 // p
-phi = (p - 1) * (q1 - 1)
-d = gmpy2.invert(e, phi)
-m1 = pow(c2, d, n2)
-print(libnum.n2s(int(m1)))
Index: RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/exp.py b/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P41 光滑数/1.光滑数p-1/exp.py	
+++ /dev/null	
@@ -1,31 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-import time
-
-def Pollards_p_1(N):
-    a = 2
-    n = 2
-    while True:
-        a = pow(a, n, N)
-        res = gmpy2.gcd(a - 1, N)
-        if res != 1 and res != N:
-            print('n =', n)
-            print('p =', res)
-            return res
-        n += 1
-
-
-t1=time.time()
-print(t1)
-e = 0x10001
-n= 74186574773094914200793316482026737888029459954999794709543067320974116632360492502173041497419087333648379365916337386550501241512964933930920296213690546163903568060144802072907352410289817238773935298058120931756211949834537184580004146147011906046925415102068575128637685130857734165699709372402386494273872659178012812526452750326989859184669742220784770554396100994762970689631211088819152161793291234247565544015273517360237216604449262594676097450253587397009568654574908264827845608948630311193568589876380198206712600988473836479191942204078557360048382752212611123994666378998631100625416354771446453086403887608196718848828625043329354162548697948577052390304018564048925705585294154706019905390513046572500156873454890769579711221993930461212240313285542036999394273974709021139378172951930880526726041086399628443532394752602706140809701992841699198694380383517720343104199384350206567999623946695141110150446707486501918242049206119419186532290441052193142213376394976152405430947027759650651324035945611520584745465738065561870522118727442644801612767924448608030907993546440313565267711970419923753819799134348966623813216535312453229146158725554129427490029779887349549098126474452019254802523030667862456482358940609
-c= 13798798797311476147972744890014796424563856033617455941174937051525031166167343556982289358877693303965831886573992503232015737346347020221617100959059102457815822751424439757088461317263736496066346047076722459059162032717547275063048254795157994106940784171252770377103146318795308076599248001282926520785876739891975082930962806865650282063600060574004255805020507563922671004042462400063066768800905559120349363170738586133483692175136730576859224176745569188789673254081647929259892325047427578860871500105880072951421944745281483929404453324499215859258361264558778834432647664456023208734349987929389782132823526018790602652352521007729672944487319519583975460558935365007888702783469129419895548188840781686738671955620339978985745783851389680095270702793801729975192698356855018330129058658904949279585905797213388910664491314145663759413554946874511881302855712885467994028085520244731561853588964212910529043604693061801895639656170650487890961433161392259934391542460134390584337120430272745712085212448898617269092305139925012285770050309750988761863061415329411345368532763833992063446541356805869749812491756359730516697166371876947390246841987901107310535600052879474086698163101234177250689444309194098222304511589220
-
-p = Pollards_p_1(n)
-q = n // p
-assert p * q == n
-d = gmpy2.invert(e, (p - 1) * (q - 1))
-m = pow(c, d, n)
-print(long_to_bytes(m))
-t2=time.time()
-print(t2-t1)
\ No newline at end of file
Index: RSA_整理/整理中/扩展中国剩余定理求_d/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/扩展中国剩余定理求_d/exp2.py b/RSA_整理/整理中/扩展中国剩余定理求_d/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展中国剩余定理求_d/exp2.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-import libnum
-p=12922128058767029848676385650461975663483632970994721128398090402671357430399910236576943902580268365115559040908171487273491136108931171215963673857907721
-q=10395910293559541454979782434227114401257890224810826672485874938639616819909368963527556812339196570118998080877100587760101646884011742783881592586607483
-r=8104533688439480164488403019957173637520526666352540480766865791142556044817828133446063428255474375204188144310967625626318466189746446739697284656837499
-dp=73360412924315743410612858109886169233122608813546859531995431159702281180116580962235297605024326120716590757069707814371806343766956894408106019058184354279568525768909190843389534908163730972765221403797428735591146943727032277163147380538250142612444372315262195455266292156566943804557623319253942627829
-dq=40011003982913118920477233564329052389422276107266243287367766124357736739027781899850422097218506350119257015460291153483339485727984512959771805645640899525080850525273304988145509506962755664208407488807873672040970416096459662677968243781070751482234692575943914243633982505045357475070019527351586080273
-dr=21504040939112983125383942214187695383459556831904800061168077060846983552476434854825475457749096404504088696171780970907072305495623953811379179449789142049817703543458498244186699984858401903729236362439659600561895931051597248170420055792553353578915848063216831827095100173180270649367917678965552672673
-c=220428832901130282093087304800127910055992783874826238869471313726515822196746908777026147887315019800546695346099376727742597231512404648514329911088048902389321230640565683145565701498095660019604419213310866468276943241155853029934366950674139215056682438149221374543291202295130547776549069333898123270448986380025937093195496539532193583979030254746589985556996040224572481200667498253900563663950531345601763949337787268884688982469744380006435119997310653
-
-d=180171082464374053908724148860532892402211297680533542388398535453834172907613878404996937264910840683839492218577406084732161035594853616635682742116386285685614450931033973858666956799894677000293641816748133955996766539487948804565611537261710022099179895552234767207025739864114095299424717709389711203691962958870048027041933529979254347064603957575629597368213177818898674074934676565163091712467379167824560246364784943493509690650643108047919019285042353
-
-m=pow(c,d,p*q*r)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/exp2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/exp2.py b/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/exp2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-
-
-n= 18150086749964030204952772593650655354407282168407543480518017821905322058792108409169209539752974177937328703466169798097779231540410352308736251888449285307132274903811942187361234788236374036493935354342502760429195828731474432692281516115002087485890105917067613983079156790015275611914738187418424730456416770000646598861170179898016595068557049151791620868027603590052357726580431487083778514163249201637184318559165989454489485258667170883129099757366657203826319909509544670881866298317938263281638296241860739828567999093491297970389142395080780768892194380031018324855383292685388767246393785705551231780899
-e= 278817530653170259039233683650169866189
-c= 10813189255953686674328168562592345253502176950586624384555229875947895107088800774325110599057171743065073092283651992594106863499561887773348061509184951920329015539552207920010924284253109754443530283215130327152416667309504455641730629770856098336299767661535526880065006664806270833698497579073641076473649621250873969544362062393319711114090739414415757921473984666129110213417578310035188480139392986280529932137364474426391469019554935239234968517869914506321750458197587849623935306068749435995413807906558975073047215241796461878288003366415184144140612947217041288538376514085070670565572628317388808356563
-dp= 25015362092988139281045705051525732988903355826221062953430054346210238749256645995431509510448988062597830708438496723137288693056422683942336451600173722142331077900759633024803467824277121463213906905346623305038031660927650043841899168305106293747254814365869018331032172781810238397508103692878400636333
-
-import libnum
-
-p=libnum.gcd(pow(6,dp*e,n)-6,n)
-print(p)
-q=n//p
-print(n==p*q)
-m=pow(c,dp,p)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-flag=libnum.n2s(m)
-print(flag)
\ No newline at end of file
Index: RSA_整理/整理中/密钥_泄露私钥/题目.py
===================================================================
diff --git a/RSA_整理/整理中/密钥_泄露私钥/题目.py b/RSA_整理/整理中/密钥_泄露私钥/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/密钥_泄露私钥/题目.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-from Crypto.PublicKey import RSA
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = libnum.s2n(flag)
-c = pow(m, e, n)
-#
-c1 = libnum.n2s(int(c))
-
-with open("flag.pem", "wb") as f:
-    f.write(c1)
-# 生成公钥
-rsa_components = (int(n), int(e), int(d))
-keypair = RSA.construct(rsa_components)
-with open('pubckey.pem', 'wb') as f:
-    f.write(keypair.exportKey())
Index: RSA_基础篇/P01-P20/P10 N是p的r次方/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P10 N是p的r次方/exp.py b/RSA_基础篇/P01-P20/P10 N是p的r次方/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P10 N是p的r次方/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-import gmpy2
-import libnum
-
-n = 109671394618534156590716540772306636060550711465455829526382945168271125218007503161807386153286648328529071790130095763349089936429151343426469415497138306284842512691195220650548494501337831207724397925027651025644976364368511262187227825083865690186591571250267479440100917127211656877566179258870510690665025580200477574123634259670039152125607834855408269848826938902407472374892693266119859709658788565014195766992713646832624001067898323913639712284673673557898135411273837250194079399384826384835709060797351332323930309379071015140548478132323474993964925055399350661600068568602468295748573856804293659942047543032878436316918991716636681116631322082919386178460096115355963882313682994343822128626370850455024905542367255179074441679461101331332093019368492643
-e = 65537
-c = 83166081100602571613112201467626632459949037182633475449066025299006894059443612622701975752551708249083077180755342065457682925338233793688583913228361068561515321097016501900442865692643652803949920987493441500744743553498018003210308290969303190355756775977367324120441564693220728163622472865572357639056734898022442794130514936425334924283145153496702507951466618177405870656868713199816223765264228006032228439676574053839549440372521050502986043855511540855864034336902304414848547480112182226920285820386643015671106933140105835060319823245206934565859078021518312305243997612804935774414840491355098017977514736057368000596388974956265042651277403519473262257945986199408278855335170546242641727930526697102351648388874227840119205560199015181257296591985205818
-p = 10186351850605898834333098258639828910824016865517013383611935945131883947448223014077315468253377357594775340263769153442019216205089695821439736926082483
-# n=p**5
-phi = (p - 1) * p ** 4
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/N不互素_两次加密/出题.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_两次加密/出题.py b/RSA_整理/整理中/N不互素_两次加密/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_两次加密/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-p1=libnum.generate_prime(512)
-p2=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-n1 = p1*q
-n2 = p2*q
-e = 65537
-m = libnum.s2n(flag)
-c = pow(m, e, n1)
-c = pow(c, e, n2)
-print("n1=",n1)
-print("n2=",n2)
-print("c = %d" % c)
-n1= 112195810916540080322147439926227396143212393897802748315680472594558799029534779775271008383395518877821731665835634678401568947090873486395149732298263354390016098054044806873918905132987476054844987306027761534181303517220621441518324585179823673969558995936609127852864523298992887582577499388515853491497
-n2= 88790778909576415179886515155102706867392114102025869119607085747213169987518671350564945859497428869691105671005065514502569621779087935963985402699443777504557102322233961859704858649565850173575303253987936764681800925819067778299779802828174121237253793292384258971774320773014257476125209237140654413403
-c = 19647439887967754316157422330583606402127105210372646776764535749031369881820582266218364147451110571815245627056959200592243347187192275957037050544596379425308334804317654052804631325074606329044062003909217973554395506825664531754330672646733161604197903412638795574568160569255819918812228129649469350313
Index: RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/test.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/test.py b/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/test.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/test.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-n=p*q
-print(p)
-print(q)
-l1=pow(p,q,n)
-l2=pow(q,p,n)
-print(l1==p)
-print(l2==q)
-
-aa=pow(pow(p,n,n),1//p,n)
-print(aa)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/题目.py b/RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P02 密钥/1.泄露私钥/题目.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-from Crypto.PublicKey import RSA
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = libnum.s2n(flag)
-c = pow(m, e, n)
-#
-c1 = libnum.n2s(int(c))
-
-with open("flag.pem", "wb") as f:
-    f.write(c1)
-# 生成公钥
-rsa_components = (int(n), int(e), int(d))
-keypair = RSA.construct(rsa_components)
-with open('pubckey.pem', 'wb') as f:
-    f.write(keypair.exportKey())
Index: RSA_基础篇/P01-P20/P13  NC不互素/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P13  NC不互素/出题.py b/RSA_基础篇/P01-P20/P13  NC不互素/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P13  NC不互素/出题.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-print(p)
-print(q)
-n = p * q
-e = 65537
-c = pow(m*p, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
Index: RSA_基础篇/P01-P20/P16 p高位攻击/出题脚本.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P16 p高位攻击/出题脚本.py b/RSA_基础篇/P01-P20/P16 p高位攻击/出题脚本.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P16 p高位攻击/出题脚本.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n = p * q
-e = 65537
-p1 = ((p >> 256) << 256)
-c = pow(m, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
-print("p1=", p1)
Index: RSA_基础篇/P21-P40/P24  q=inverse(e, p)/出题.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/出题.py b/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/出题.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-e = 65537
-
-
-while 1:
-    p = libnum.generate_prime(512)
-    q = libnum.invmod(e, p)
-    if gmpy2.is_prime(q):
-        break
-n=p*q
-c=pow(m,e,n)
-print("n=",n)
-print("c=",c)
\ No newline at end of file
Index: RSA_整理/整理中/N分解_N分解3个素数/出题2.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N分解3个素数/出题2.py b/RSA_整理/整理中/N分解_N分解3个素数/出题2.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N分解3个素数/出题2.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-r = libnum.generate_prime(512)
-z = libnum.generate_prime(512)
-n = p * q * r * z
-e = 65537
-c = pow(m, e, n)
-print("p=", p)
-print("q=", q)
-print("r=", r)
-print("z=", z)
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_整理/整理中/P90 _P xor Q/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P90 _P xor Q/题目.py b/RSA_整理/整理中/P90 _P xor Q/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P90 _P xor Q/题目.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-from Crypto.Util.number import bytes_to_long, getPrime
-from secrets import flag
-
-p,q = getPrime(512),getPrime(512)
-n = p * q
-_p = int(bin(p)[2:][::-1],2)#先二进制转换，丢弃前两位，倒序，二进制输出
-e = 65537
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print(n)
-print(e)
-print(c)
-print(_p^q)
-'''
-127003138248767878216087746092048765422017641585502083524432000355338408532541607865197910579606631797065299031898223525594806324068716151137783179018112665582625201123056770957620662712083897966775244206284988606422553807186125185230229622748491730778439493335081760134674989431869363324785659619359492375443
-65537
-28606725830066334603624115469720836321272317195642525617463167689108174235290116089778712864587832608893147665928536755331808728420928314539950719845140223156504618276048603869925007708152189255298965799947640133200085111741254836861931603704948557525706684578721413729858589789350780583640229671796472384358
-3713689996494536207275880780575695141387196713829050036258614350034484757813937841042992412600156055738200137589955494058780961235985782374795104819263776
-'''
Index: RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/exp.py b/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/exp.py	
+++ /dev/null	
@@ -1,13 +0,0 @@
-import libnum
-import gmpy2
-
-n = 27020725261160598541077357737650775795182555998856810737571508044949928734067444441660366270392732456051807439301564552672200975582350577967001486740668193835704559129378410828266554536148151615878808327988333060924165410762016082268322936465413880236634083213834739549234631742766416876749808978934944262651307600621868854944164060642189749365967978497831698002669974744487926082412272998646851047638183126945784060957075393737537570645086672473571281053798891685646561828588448040073373363454584468753860529849749093081434144360661566815886630699933232263079413562069476421802192735693386029862725050469209845710383
-c = 10188807385387617708190575473905502994151677148079820873886980571555051900701810208218351138721306416600688313703084580808183634201231599134123549448962443376514560489130860694363901933597676373555599555647232128717993571185822894818704143675318690577221330618533739592165564396729937983659337232822442555504262694675199751730664450120569727835850996566436129543730932040989365233424791093843941154003052950306359994891955336607690065213304872738280674213630736611351982705373394299097653653497017756036211550125607093109216729483090391729134062236908282557149575812220142872855836932590459512028618076264332235518829
-hint = 15179972145975733285419381814235528011288991423484121653543845156913121513320504879647666067298415751234264897435338898933073713420024176276221164394369781676781604128149168834126855517212300158864797800121336042194751965268493010327202598446572764475343894613152062609436699715193914479572113800212525965140106015838636914979735618606768207651697548364440806425770871133439416876157686985836939255598747973339866125864303982956813846287509191028829738926404992619459242904729015823730553526572575372668559669124599614613391797015393641171177282129497503752370800088634017972208535899870704612274473042064675033593148
-e = 65537
-p = gmpy2.gcd(pow(2021, n, n) - hint, n)
-q = n // p
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/dp泄露_e很大/出题2.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_e很大/出题2.py b/RSA_整理/整理中/dp泄露_e很大/出题2.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_e很大/出题2.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = libnum.generate_prime(128)
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-
-dp = d % (p - 1)
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print("dp=", dp)
\ No newline at end of file
Index: RSA_整理/整理中/m大于n/题目1.py
===================================================================
diff --git a/RSA_整理/整理中/m大于n/题目1.py b/RSA_整理/整理中/m大于n/题目1.py
deleted file mode 100644
--- a/RSA_整理/整理中/m大于n/题目1.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2 as gp
-import uuid
-flag="flag{"+str(uuid.uuid4())+"}"
-print(len(flag))
-e=0x10001
-m=bytes_to_long(flag.encode())
-p=getPrime(160)
-q=gp.next_prime(p)
-phi=(p-1)*(q-1)
-d=gp.invert(e,phi)
-n=p*q
-c=pow(m,e,n)
-print("q=",q)
-print("p=",p)
-print("m=",m)
-print('n=',n)
-print('c=',c)
-print('d=',d)
-
Index: RSA_整理/P00 基础环境/1.基础配置.md
===================================================================
diff --git a/RSA_整理/P00 基础环境/1.基础配置.md b/RSA_整理/P00 基础环境/1.基础配置.md
deleted file mode 100644
--- a/RSA_整理/P00 基础环境/1.基础配置.md	
+++ /dev/null	
@@ -1,94 +0,0 @@
-# python及pycharm配置
-
-## 1.python安装及pycharm配置
-
-### python3 官网下载地址
-
-* [ ]  [https://www.python.org/](https://www.python.org/)
-* [ ]  [https://www.python.org/downloads/](https://www.python.org/downloads/)
-* [ ]  [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
-
-### python编译器 pycharm Community下载地址
-
-社区版已经足够了，没有必要使用专业版，专业版加载慢，影响性能
-
-* [ ]  [https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows](https://www.jetbrains.com/zh-cn/pycharm/download/#section=windows)
-
-### pycharm 汉化插件
-
-   打开pycharm左上角的file(文件) > 选择settings(设置) >打开plugins(插件) > 搜索chinese(中文插件),下载好后重启pycharm
-
-### pycharm 设置虚拟环境
-
-设置虚拟环境的好处是：
-
-* 1.方便移植和重装系统以后，安装模块
-* 2.避免安装较多模块，发生冲突
-
-### pycharm 安装库及设置国内镜像
-
-* [ ]  清华：[https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)
-* [ ]  阿里云：[http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/)
-* [ ]  中国科技大学 [https://pypi.mirrors.ustc.edu.cn/simple/](https://pypi.mirrors.ustc.edu.cn/simple/)
-* [ ]  华中理工大学：[http://pypi.hustunique.com/](http://pypi.hustunique.com/)
-* [ ]  山东理工大学：[http://pypi.sdutlinux.org/](http://pypi.sdutlinux.org/)
-* [ ]  豆瓣：[http://pypi.douban.com/simple/](http://pypi.douban.com/simple/)
-
-```python
-## 配置中科大镜像
-pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple
-# 配置阿里源
-pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
-# 配置腾讯源
-pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple
-# 配置豆瓣源
-pip config set global.index-url http://pypi.douban.com/simple/
-## 你只需配置其中一个即可
-```
-### 设置字体放大或缩小
-
-文章来源：
-
-https://blog.csdn.net/ailc28397/article/details/102278026
-
-## 2.安装RSA必备库
-
-### pip 更新到最新版本
-
-```
-pip install --upgrade pip -i https://pypi.mirrors.ustc.edu.cn/simple/
-```
-
-### 安装 libnum 库
-
-```
-pip install libnum -i https://pypi.mirrors.ustc.edu.cn/simple/
-```
-
-### 安装 pycryptodome库
-
-```
-pip install pycryptodome -i https://pypi.mirrors.ustc.edu.cn/simple/
-```
-### 安装 sympy
-
-
-### Python扩展程序包的非官方Windows二进制文件 下载
-
-```
-https://www.lfd.uci.edu/~gohlke/pythonlibs/
-```
-
-### pip 安装 whl文件，一定注意版本
-
-```
-pip install gmpy2‑2.0.8‑cp39‑cp39‑win_amd64.whl
-```
-
-## 3.sage安装
-###  windows版 sage下载
-```
-https://mirrors.tuna.tsinghua.edu.cn/sagemath/win/index.html
-```
-我安装9.3有问题，不能正常运行。所以安装9.2
-安装成功后，桌面上会出现3个图片，我运行的是SageMath 9.2 Notebook，网页界面比较好操作
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P56.Math_Rsa/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P56.Math_Rsa/解析.txt b/RSA_基础篇/P41-P60/P56.Math_Rsa/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P56.Math_Rsa/解析.txt	
+++ /dev/null	
@@ -1,12 +0,0 @@
-
-由于r是一个大素数，p^2 mod r 是易计算的，所以我们利用第一个同余式构建一个在模r下的一元多项式环，然后求解p。
-可能会存在多个符合条件的p，我们简单判断一下其bit长度是否是1024以及是否是素数即可找到想要的p。
-R.<x> = Zmod(r)[]
-f = x^2-a
-f = f.monic()
-res = f.roots()
-for i in res:
-    p = int(i[0])
-    if p.bit_length()==1024 and isPrime(p) ==1:
-            print(p)
-            break
Index: RSA_整理/整理中/Coppersmith_p高位攻击/出题脚本.py
===================================================================
diff --git a/RSA_整理/整理中/Coppersmith_p高位攻击/出题脚本.py b/RSA_整理/整理中/Coppersmith_p高位攻击/出题脚本.py
deleted file mode 100644
--- a/RSA_整理/整理中/Coppersmith_p高位攻击/出题脚本.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n = p * q
-e = 65537
-p1 = ((p >> 256) << 256)
-c = pow(m, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
-print("p1=", p1)
Index: RSA_基础篇/P01-P20/P20 AMM算法/3.AMM_sage  单个/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P20 AMM算法/3.AMM_sage  单个/题目.py b/RSA_基础篇/P01-P20/P20 AMM算法/3.AMM_sage  单个/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P20 AMM算法/3.AMM_sage  单个/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-from Crypto.Util.number import *
-from secret import flag
-m=bytes_to_long(flag)
-p=getPrime(512)
-q=getPrime(512)
-print('p=',p)
-print('q=',q)
-n=p*q
-e=65537
-c=pow(m,e,n)
-print('c=',c)
-#p= 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073
-#q= 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379
-#c= 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595
Index: RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/题目.py b/RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P40 e和phi不互素，剩余定理/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-
-
-c1 == pow(flag, e1, p * q1)
-c2 == pow(flag, e2, p * q2)
-e1 = 15218928658178
-e2 = 381791429275130
-q1 = 127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871
-p = 109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453
-q2 = 114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513
-c1 = 262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124
-c2 = 7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596
-
-
Index: RSA_基础篇/P41-P60/P45  威尔逊定理入门/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P45  威尔逊定理入门/exp.py b/RSA_基础篇/P41-P60/P45  威尔逊定理入门/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P45  威尔逊定理入门/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-import libnum
-import gmpy2
-c= 110529037403457010976226680228015853681747082298049971277864723725003290263121993249901746108064910538219056566054434964752554464076788576969420195833066780032521421693370829430794829520809208371861674386624296250550029664837604012247019944404589941948639334516981017574704294281416080581914051559281376725552
-n= 118816369182219711551736875622148948376274930097622029542291351942110204065005093752267272235864774888160522170555189015695148555668006209122716634896476014952586332120668094812890443697140874554631953248467119041951362983074748376348829077644413780641030688747863975973112631445365138922148115802917498155841
-e=65537
-p1=gmpy2.iroot(n,2)[0]
-q=gmpy2.next_prime(p1)
-p=n//q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-#根据威尔逊定理
-
-m=m*libnum.invmod(-1,p)%p
-print(m)
-print(libnum.n2s(int(m)))
-
-
-
-
-
-
Index: RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp.py b/RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P69 pow(ap+bq,c,n)/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-h1 = 37966971846056703705540796411260144819517870958488488328808184981253365215027608155639472838244608638202984142280394068799538151215106667936482785929980813408328076994184574626910153277820309692618691056905826892339000296141296852277423683218785564685326966544977877656305047531573407973602402957997739931010
-h2 = 19711839860372062540917385722782613106805943201150249274098621091449521064382761522952000794229528436515815787944909266183671269865531628074450127453989259046356372655676541081358703102967678828500875967089819285149587857561006913822274957860649024775534832152785948345273653928252334599947082428568635461043
-n = 96717029265171353941978347874338147167574541246317372404089194465913641956126718478770242738678855758147208721694856873588267707006532622417995882806729668147371024564266961980443758314606343696116412920151456079755302228862043010952263361765382037428083417194453071707419376934711110021810142998309747614357
-c = 81764375759034934606813345812567988721308856197151463531778630113949307268038327385813896030142559187012037029849102345210037214022285535886872084627119255967486501235755823124205790946557555127143469384906952909040843958887678016277348088102903378346991540117854816960760415431971234311776510844736213139562
-e = 65537
-h11 = pow(h1, 9191, n) * pow(2021, 9191 * 1919, n)
-h22 = pow(h2, 1919, n) * pow(2022, 9191 * 1919, n)
-q = gmpy2.gcd(h11 - h22, n)
-p = n // q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/P89 P xor Q/題目.py
===================================================================
diff --git a/RSA_整理/整理中/P89 P xor Q/題目.py b/RSA_整理/整理中/P89 P xor Q/題目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P89 P xor Q/題目.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-from Crypto.Util.number import bytes_to_long, getPrime
-from secrets import flag
-
-p,q = getPrime(512),getPrime(512)
-n = p * q
-e = 65537
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print(n)
-print(e)
-print(c)
-print(p^q)
-'''
-129760065142536809806311204132351918751028992005460856468227287921282870916288856718621153143496403712311222567870977852134806106569337746575721004212669688720934096637000255747173695182744851724877533272723548422615077582025310964380370466630967534492769138475503800139599085157646896457701207621103799125719
-65537
-26506766042158812153297659888261605602209965867219470797339092764667310960930283597295284822004032161597620439172538662557297590428638492713429290901250304462610596251465067375290997078433094559619684696433561726225388148663591424284892872454430710006263385391764878130290791647310468786580792375046884367243
-2535073000605892935644131126185024717717589486004324795337079143504448380472644470690389542009724270615702616436360436628913170173803134221956364909472182
-'''
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/解析.txt b/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P50.威尔逊定理 2022赣育杯/解析.txt	
+++ /dev/null	
@@ -1,26 +0,0 @@
-
-1.pq接近，直接分解N
-求出m
-2.阶乘，用到威尔逊定理
-(p-1)!%p=-1
-
-m = N * flag % a
-m=flag*(p-1)!%a
-m=flag*(p-1)!+ka
-#两边同时模p
-m%p=flag*(p-1)!%p
-m%p=flag*(-1)!%p
-m*(-1^-1)%p=flag%p
-flag%p=m1=m*(-1^-1)%p
-
-接着构造一个m2%q,因为p<q,需要继续阶乘上去
-for i in rang(p,q):
-    m=m*i%a
-形成一个 m=flag*(q-1)!%a
-同理 构成
-flag%q=m2=m*(-1^-1)%q
-
-然后使用中国剩余定理
-crt（[m1,m2],[p,q]）
-计算flag
-
Index: RSA_收集篇/99.不会做/测试/exp1.py
===================================================================
diff --git a/RSA_收集篇/99.不会做/测试/exp1.py b/RSA_收集篇/99.不会做/测试/exp1.py
deleted file mode 100644
--- a/RSA_收集篇/99.不会做/测试/exp1.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-
-
-
-
-n= 28576274811010794362153160897556935178530640825011441539841241257190782139295561904323347128956873569754645071205043238985141474388531008367238218822591
-c= 49502875285578675438052554215266678403659290915102322948363030271494959804587081871467110614683972929037615883922743651431683465100061968204901334627149795829429950385848753728500177164800064208215503246868631076011505268371936586645321659884527055007299822625570713613996139223348709621258028349513737798120
-
-import gmpy2
-import libnum
-
-p=libnum.generate_prime(512)
-q=gmpy2.next_prime(p)
-n=p*q
-print(p)
-print(q)
-print("n=",n)
-print('n=', n>>520)
-print('n=', n>>520<<520)
-
-n1=n>>520<<520
-p1,s=gmpy2.iroot(n1,2)
-p=gmpy2.next_prime(p1)
-print(p)
-
-
-n= 28576274811010794362153160897556935178530640825011441539841241257190782139295561904323347128956873569754645071205043238985141474388531008367238218822591
-c= 49502875285578675438052554215266678403659290915102322948363030271494959804587081871467110614683972929037615883922743651431683465100061968204901334627149795829429950385848753728500177164800064208215503246868631076011505268371936586645321659884527055007299822625570713613996139223348709621258028349513737798120
-n1=n<<520
-p1,s=gmpy2.iroot(n1,2)
-p=gmpy2.next_prime(p1)
-phi=p-1
-e = 0x10001
-d=libnum.invmod(e,phi)
-m=pow(c,d,p)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/exp1.py
===================================================================
diff --git a/RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/exp1.py b/RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/exp1.py
deleted file mode 100644
--- a/RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/exp1.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import libnum
-import gmpy2
-
-c=24436141157662456619317073548813426598477834422175811049243682973250524906751334952902797057062715785980454787092697177247606977130754174697767522487157579588337131199502009362321049892132665140424739274133222897216651794288049201558435668947881095995288825893587828539407549384310758764068305446140864343597177619859009600797646453854879331233090970643614887104520115112064911596498984973050372162330828956604256964975908281121247839067644296676349557455855654792100823188513051906546701945710855541062661151180075201492684721381213941762470264922891694697992079417055616150187217436296334105609572396483250863293279515566848826369030532284796644404466442391267508464806323576907327206729607618931489216706528449549015325329459768045092680382442882935289389440482782651336303646333439931046214887693225753074890633417200933799524720460358243921048608457108475159640676137000551475598092159318972724321324213158446649802375161458416568168974581783118089386571916713199435937515652275986880342575246531504481268138290876339687338774250033353281904729256165299003187868901840095236714472716924834279185036184456169860349018538128714831180703720398713197565791422918417793924204269164984550383138628032212365091160070440333367986911710
-n=13118229290795027043788157356546634447946602043646470520814093964675897006997702023360856481779023283799837755875046500042003185996042029288836306309786959129256179776454729226451642690471043401620911788835531163058018641370975155586340472438567784034575278381277565997471136578958584750697476701178373449826026189143605814758703463718404786238438185871085090517262999077836105604330166536574183237988062513357707852801595482902884217612834031645367392554386279709505173433904067856167585362591280232397253204612769014337713070861725359118936484461002086169880059379159333564960111463374595522019923948945834304984263
-hint=26878815471796139868643559028927872281141357193677644322906244951379421523269675418187188780930641193621555161691985030406448117426041282346980753237291495307035275731197924700724553577896483141184752235012601238904176876086654060435822312621351168237666170025024364639085098214031843983205939912718303119020563144661034105634134800468506317662556271774499068067453492978357543480549758505982772253822807993624782799789677958176875120022019879329251097412136047587850313631411037737586658421129074560328519670066365613946107221783618063325812998313419463130310613965142046953031054951132063109985815800078853850445870017244006894159014298998422522721020787008787836813504316877075864900605645811882912138689058867779754430833222823764898881713764338450244916218426838772729709037817419456888102971703630931482546294912833289646152827771658883500442186972232414705464812112490747099254899264182106467946587639400892530256496128776042673319312863000033647824020107235630209854015942572962155934540077959841043863087060749239559649392224078378186600149802741226081161051724521965848296337205373706417030395086732812071462589582750813371261683390293431785791284101376957889913918421821475801603879367079930575226066107826152621815473274
-
-p=gmpy2.gcd((c-hint)//n,n)
-print("p=",p)
-q=n//p
-print("q=",q)
-phi=(p-1)*(q-1)
-d=gmpy2.invert(n,phi)
-m=pow(c%n,d,n)
-print(libnum.n2s(int(m)))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P38 ppq与ppp/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P38 ppq与ppp/题目.py b/RSA_基础篇/P21-P40/P38 ppq与ppp/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P38 ppq与ppp/题目.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-from gmpy2 import *
-from Crypto.Util.number import getPrime, long_to_bytes, bytes_to_long
-
-flag = b"flag{xxxxxx}"
-m = bytes_to_long(flag)
-p = getPrime(1024)
-q = getPrime(1024)
-e = 65537
-n = p*p*q
-t = p*p*p
-c = powmod(m, e, n)
-print(c)
-print(n)
-print(t)
-
-# 695811613220508521533410410135903763704380792345313822348335925535019364085287973391006658091756337941388790850576390425798691514904654108730064898721482454942897809486946732327567166790987988769649339266791907850313832700513155194190805272799105846921535231183458026312210254181900390502309417588847104213793231394168583827484833346266655392107254900891316034825295594615584454126662183967495486871019315836843964142146438253642093949267821928660254775556448682535996878217802620757735862588509198138308229216540912203307177130148261480033848867147610177292359480179993393430101548639801133574244188591918478576785400355882470444135385837723688465703459098247158590332167802098779963168624783522306380012451430590453130321881597629274617390265737278952430391455292129197120724233266227673065462001473529262207830010588159156853973215615518415224386700532070174251781750417203041543631328597659473610199473825400069638203715
-# 1103142672269025650462929198164640404493425942265040323371207998377200145961695641048087337404972402560194267711668479433180851107371884950953570911657090487495216386781924343363213345312692741516666557796484628501590914827387171553761258413087800091632213720047678961681727564158606220008125433169164157150198004730103285226539823741065685538894369776994256049396334124080247371292445543852118777801692107831636409684364527162627188519199064013189168290873007156380530155343171815296016451575866508168728518236121071519646489851701773457562537221387306293985011019040423572239157745630631563892081210964602524396761067561161422635793249097955070576281428534742447903449072401000345617064665752070967341863838984791405144869303448662169933201623421080650216122814985967041163663854812030159367202820911939914186148267664571396203542821594364250609009816872825447917845472311564561269905225280796615586133341770795940714518373
-# 1352157133681616199949626085859887520183044653936717410198546937928330648087119395184417755928058157424764679366526294873446661771336360719004981235527982326342186212780230888122434477779310176780131887691097470115061291877918798366484343129280364265571974776435297187299058517674913907506344826320352532394679559865918025267583173757096064690288877037701829014463065076789753953054738098985305066307636180043889030783678919407771611169741555877144593927382649961986384716532446388338376466150688150609936293316903617335385558920141250240529204636396228961938978325120385146208552506658553610353813640686759609897131817533377973931149277140553678119548578402674858651748611808600372129132750796909828079961432457264127651812438564831345298563698676305419952826466259729378236885089128224289161328570151277873778313473830713469181909893871432564345696475759124658962121070495959528237764331872929513704863754771030741820729657
Index: RSA_基础篇/P41-P60/P58. Crypto Lost_N/exp1.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P58. Crypto Lost_N/exp1.py b/RSA_基础篇/P41-P60/P58. Crypto Lost_N/exp1.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P58. Crypto Lost_N/exp1.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-from Crypto.Util.number import *
-import gmpy2
-from sympy import  *
-
-n = 20955464633057600258987829727550073699845816289000240676927869818926752810905511184835302717855745473943671910742784074561535017974853574714483642916831791020944940633062963043482236587316552330558006573820423830770910893877191630012247591380869307656539553888318621170921800017818132160253923739647771452839191101104391894609403591447166963426444018303147924843072923713248135717578047687411974516038299879758561542241544862102935741869647633013298181782208467117482306148238724598730801037692668154263059348953587766571379262442743822007387408949824805991797355089583176028081305319076896384126383926193964322235633
-c = 14815997295683082265558346455845370590765145583224067337292601455640475216349267044144296003388877395546880235511728120803143112914764263292087421926972160283428440959367872665892349776616002018624301524264223581314248857537034849571849747613963209414193510408342387107662655487869098045345428379025731617851483935711671021438908270746316921057871871545763798735895118697635903815383424855759281301248295597297869474539060531099443223045844791615425429748703429968627505406271675074549912664863784774239200764403372298995457799473112713379340870305136776932539188516395526955161359417473843082895317392495109895085666
-s = 14728527428626630951705148488338433865446345521255631461200851513782412494843597938863837697938230856843797646287742397249258609197032095158567448934855031190354034543862057663422053672290704598313096289223478302733688501373756860855445632789922930577582465209872782549135254792729915747104521949095814028476908208917363509089190935273004331739978623136706041729628143765893264698948654175039064609891374587695812144855411176143224066975193255513405865992328257766815240718115442741846443490733767716842367336385132648983241895710001620533668392060358573295789752856876282590472528110546264872047138094995909454134250
-e = 65537
-m1 = gmpy2.invert(s,n)
-p,q = symbols('p q')
-eq = [p*q-n,900*p - 218*q-m1]
-result = nonlinsolve(eq,[p,q])
-result = list(result)
-p,q = int(result[1][0]),int(result[1][1])
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-lost_n = pow(c,d,n)
-print(lost_n)
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/题目.py b/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-n=p*q
-x=pow(m,p,n)
-y=pow(m,q,n)
-print("n=",n)
-print("x=",x)
-print("y=",y)
-n= 49134891668897345591333219711303339144007670596441894829337290952093400283298630665826095289165809681961208520996265436195389904640720636719133734406693433810554096598929737422594980883724481297143537076662178576926253446582535294294231165454562659420944920445437433494540727083960515996626310138062984512331
-x= 24898114380189083075249478644617176345363769858290571489415603903447660857572376734333314388004344067870622511211551400003900882292855408080408530612898712604821849194436116203045876702326786310101264912258598823736415425063797050123512802647807994402065186878212852202204820369988512984137386942003350601013
-y= 16329839654620902472571665649919967371160409036961382290481165859731193710305989211665714814452109039568075053785039634104665516076749524765980529291699849764465433749870986860914147427598112865371747917109336808548762214669827404524571735460653099723747061723390924856171469660835909151652929700638010039801
Index: RSA_基础篇/P41-P60/P43. l=xp - yq/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P43. l=xp - yq/题目.py b/RSA_基础篇/P41-P60/P43. l=xp - yq/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P43. l=xp - yq/题目.py	
+++ /dev/null	
@@ -1,27 +0,0 @@
-import libnum
-import uuid
-flag="flag{"+str(uuid.uuid4())+"}"
-m=libnum.s2n(flag)
-p = libnum.generate_prime(2048)
-q = libnum.generate_prime(2048)
-x = libnum.generate_prime(4096)
-y = libnum.generate_prime(4096)
-
-n = p * q
-e = 0x10001
-c = pow(m, e, n)
-
-print("c=",c)
-print(x * p - y * q)
-print("x=",x)
-print("y=",y)
-
-# c = 819167649963114752409071690942828965596762225702125422224651455091514510699221689012200925546275830031560636434571675297352911785548562558995259185529739372065415320407815802186750343466069603564453133335339468465023669871194636196892019998935207213206263690388438074192184316296023645401077877114715985230518850300854162564541697624876005006316693763495665196932392860282743136069254457238426514217654211308356576587743413266816116398061386744037936492351734676350831535904555786373417782943462487966342446324586920268533217659394595673776791727030156809145044771214337720082482665839942679556775596805037563432378445332344070307192086425710019138340320155999228758718645401601922806183309005000232793295108264248107221425831137940764747440899967198929744597645010447079132413064685696595497031622178756728371427223009071172365660399862426808614310781649262366953422451061715753988547005171624561572800209843727720479076455447302266315465616082052292906817024385349625367335127791370192543189766366250792588949920001870810018187835769296432354197933863536721500934207233900135841304460719234606155627533870809427764337881255478336303687175976104216650172450886939797274047649899113069365776930432541285901134533586020261232876898556
-# x * p - y * q = 1699980137266557324344914328325272464132636282755221827458872463192020874135524827987217608051368206672934330683211276768709877840468972596490803759885813728690444018491934963720438572841678828429913822054802155884199440293180952789752415462639050713771680511777055884579458058757377759627744674844108633533334457344901084171274088270351873241352667334795523258220147308594499138453672732641220818083962784902673365318410315424514270533343700860737463941309778962170226910616237946542757166553717492195935533892236503442774023121626490914033401612167978954941330133300881931925497717512695171706212382578903001110920592500175461456995288709439779857319205707173662845644405055427904509419863606240680925061916382420684482076378518205523197463067938227019763990108007075242817656584738069628913136354101292332085988235385095314890393764303221439993179548360648981274242121283353602916815145403803542637335824051819986555363523349256992995614272850197795324686379321786728586563648175181401083465608646485432113720677594958984638724107125334720354094296357390072599568691394140689362397548059953034709737955082932844672007207996936767062822977154868592390902978952191044067944696085651546627109166427150923047360912876244376114967514367037960727491317506149228522989115013325839758536585180101058382614514947428328314724097308211883678572797106209083583109261376984483242047015474025283180602280795727273381785266819469972756514932048700356409177010293248246465560904863373454995512681663614120751469186425087937476277098506766986185341057569253541467185884718825148546913924405454412786581778526929471207590180161807679236125962298541766845327682689402342086818440002212258092785616843818868009803516765308135874826622684994974230341120600336001281979511703254112012642242186568042544945546342209510451281619322586082384591244651070733725666379203036
-# x = 632789818728437249014397968661921775581544184224274756276433610798113468993672164321438530616013253289782663689077268876186151437864544302469108580709641566485290311420121506047579208345815027532791974738974313200169956832221919603190470863795222438259219096469376978228578380264663345353405438455186474301297012193183679157205629903265170130103917934683090733281473604073360246791105302237248347327779245961650717330972723138979527847182834557342036244971153338500301679961477335495638826895006083228659413981010440339548216034046748372206443701123739501069837327986187240490120446390477989503341189926203433991663521331801532805472205226609164816353391564959573141240378777470418994251339128482692796773797189201818245228107080728132313948392278762055786817726909473749863670490856099352687396397382321897116397931192027599070027627694680087783451302597521080702011592065963594511723809150300184064231573197933953378151145481864603829132945843828406023019349658403181028564910247213010151333549565330384930314823393041100958566895783471423052411323469971356896800670127810656782436426988914502569025478559937511734711601790440407326688723474002610311556839284338719325762246957198057778260962250609427063416142879689421634421458709
-# y = 643036772350048228226994649092616650645954632907587039823201793924675328231324332666556623349121829177212510871016658056913708287862858528109879661403451187304726709132260743678530717837451671681355571221280002404299107695652155670051078882192093123123561845252965958271768933274773257692931042446530995042732001095255062905223134293710172411977911384445547906762517497734345024155549903618728650384451421173225517825102299209880684634460331223065873651202939210708252359077003909032324005805452514172406303829425073706650894226101275953935372059009590759610077924785340813184927561117202564837188711962251575479458375013998344858887909613413912370566496257586437903234141740497499987400831528329286044181171784190933054960738806780037696966451373943646987424395266465375230570034361116196796918297724925148528750740437152338021273617526482564999975699692816362539898387887578959664017588135024295202965648259490954273611159737721618049049630608155576688331546213838011267525827596272825121479187503405108808503874817959024671313813455057255041638822640703012661546718752651979237589873357378433672292216062102553378571263015343101391160579720162709138758489316499316122410388218239186892007182433862338617140046642758913862484601497
-
-c= 551564125794527360292754537135683993412073939931842743252825546160841743341364252094742222814487857418305824437323878030495005807897236944650041419697803230240542069789239142234335059646047531620567332859284127151534412455911539133365768350696428945111875792760777095508652587766083396019852298185115051969441074068938824047201192080418628602596174474774855697186208035938593534975409169684395515882685578329880719955607549130328622864194613235437820462747929915267018301395643953492066705285425220173592312775458072380593362944099308614354606781832206279986843372454066078671851476691251733787462566344010699659948657470584132290099499667486463668654484126327809783796272798211413970548059315276716638396549002556403458342714471679783144761718633856405196153659252506389046652272680738572647805669805470798408389216761414662117425919867711976198236441013393105065105046883566185424874718959523366577696635290319923431499347239353902164293776533287417684647248865650788292642479872919920916018023539192669345883686464939028997808635504006023546082570114536162143744176286568521085625879207069673824739439940521280693601490469000165917705323629474544240448431724304411942107541454761715945905363697306927908085601405210241096339584435

-x= 1039921692531141453171855686573982160456036531996302869318512030808823452344564509029392768187937381358132835421353947391146152688775743299708763697482129863204164544696991625661601981428710402320295175770372423624167211973430139460361562768548290676701957053891210369700921221423149214485954906023526821279926557801581767708726392811383905896345230572315244721504057592760336332644624486050382007494446830316569572753507641996242913084915745145936195274474180406298475140237243181920308808061641459145199545975335386794052129180701729606572759157857974396497582462091051829175373289263597496839879241578243224907672832014803113635737984868263391212145914279985388384337152091881584412700291574912680627163539990219142463561790982466626815425779747862078596997632279168340914860868052097864543118762539022747121013597275757154401931133822198696036282672601198523849805269896168866902811154489835853026712709866710314531080297228565754738514945802684651397895233790841923066629484585104088163724416585649040197355115406759433403488645168693798651073547129833154915060629892670375098565171693004803737662953673589099229638713143579081504330789724161639576214795886269552237155791077509102229464684521355609590852748304069726247236704799
-y= 736014288116387998482981292225897575913033744746622859814245522394148828934504502068128536122008262895931175914404165778736109397740668050279940330934493758991133283289795093940740201033496246207192437425621387835239430286481129433660072250177825347297475025162943732731630653122272527575067247416479924583882613330362098881474738197380789249965288557232114834891782358102994942270211315653831351383961417227758531583740666226727725750344616718977607143032420115705902434150306308160817617737050537061661099447512128104666493631155591951137144970943417226364185059458456339980873416546822860516520652871647188557889586426143677544650638309834553711532895702474423578962267524516754014832022202939700966864046238418056495746842655952853211515370515521909876239291145362684660555361066717458585544421496216796451185392132170217148402925014208212261927403253177814728752653680327831399487079417648836955867684206159459353721174409472322370933025321740556907124801250532865024242284602753929833669163493860061693895261466397155211732075466641386919838121634892150813507406963394856780887481463616941192441478968072733703153183623234052142371034221826202653301438259138303438892825467473471320095956240609806088237187069554283831919431149
Index: RSA_基础篇/P21-P40/P32 l=d+p+q/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P32 l=d+p+q/题目.py b/RSA_基础篇/P21-P40/P32 l=d+p+q/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P32 l=d+p+q/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-
-e = 0x10001
-n = p * q
-c = pow(m, e, n)
-d=libnum.invmod(e,(p-1)*(q-1))
-leak = d+p+q
-print(f'{e = }')
-print(f'{c = }')
-print(f'{n = }')
-print(f'{leak = }')
Index: RSA_整理/整理中/N分解_PQ接近/出题脚本.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_PQ接近/出题脚本.py b/RSA_整理/整理中/N分解_PQ接近/出题脚本.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_PQ接近/出题脚本.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print(flag)
\ No newline at end of file
Index: RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt
===================================================================
diff --git a/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt b/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt	
+++ /dev/null	
@@ -1,21 +0,0 @@
-from Crypto.Util.number import *
-flag = ***********
-m=bytes_to_long(flag)
-p = getPrime(1024)
-q = getPrime(1024)
-e = ***********
-e1 = 2023
-n = p*q
-h1=pow((p+q),e1,n)
-h2=pow((p-q),e1,n)
-c=pow(m,e,n)
-print(n)
-print(h1)
-print(h2)
-print(c)
-
-30183656394805107357196370521008780218925570049861387216169054600381560517999947182495011076202126709273160644370262874124968897163730207965220921744326193258358200657778320099962189812662073746049174190737733696870138306766952659451198803418491107784028230018858597385184003464461324726173514428396625540948387202029576333925489299994380848535683878295861054849479745468667103738387433149825519903102622708548565692424513329009043335422465827135431803716962258640474502935517125459339414944346181909028036411407296618452373689029356418425024260765592536962977787010290927682883045452686496078325690903591609011622649
-7931354967841361677225525366492283823894590697656669456900404637225452955459348179528014507555386203547449783236442156583903338871101372231379416298673332475841552351685699019468753684327399291889812282583934998862651749254999550865157778659585029993856246293740166651157267243002539956928571725540194386430135556941941158115392325448899508409029275561616503138231793202722531305888967930689408754797831414396346372778070017194895510733987493231643773783381517911590791997520439013140032231243105419628779624880308940011265642047838378068375393042924607140918207395722101771037631402904373527746525020704973321077960
-25062305644512626278872554723682407404832559793666087363222623557675770421081399157255725073992481546436446297869801169592204892169276487493822396167281356628851048304904314012479222859204326040757182928968731733798383263988650657055905914856184098798472993044182269108543644164055399204428716761331393401597324716686296821274763372210790827746803211415514983448406120655928961667116170309904869353511506605306453153870397660846835063923643054746025854226394115291053816754538318359343733736423501470671478388599730283824290134464908259553611786880318768864343694812103186674192588648465811660170572517267553070038503
-10566050200491898237861779349951184912833923661795629392708549602522205458471596364817182905986707189288385851923975592583132325630526948547284585859263336194822093938912144662726671172596366107238257782270698285219710310820716655379358362338786357841955558739297544011078781470192343051678062312416475601556385198608232848554523600840313604027144055153075238544724194720089578983488275239449599014873939408460792984830861989839765653149206345119917698514546823183643061389802526139765069463102068988065342441036929752116505115330236182894409200589686944842338651901005676000551266948519276949174935413951432934098553
-
Index: RSA_基础篇/P41-P60/P43. l=xp - yq/题目解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P43. l=xp - yq/题目解析.txt b/RSA_基础篇/P41-P60/P43. l=xp - yq/题目解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P43. l=xp - yq/题目解析.txt	
+++ /dev/null	
@@ -1,7 +0,0 @@
-
-设：c1=x * p - y * q
-两边同时模y
-
-c1%y=x * p%y
-c1*x^-1%y=p%y
-p=c1*x^-1%y
Index: RSA_基础篇/P21-P40/P24  q=inverse(e, p)/推理.txt
===================================================================
diff --git a/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/推理.txt b/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/推理.txt
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P24  q=inverse(e, p)/推理.txt	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-eq=1%p
-eq=1+kp
-eqp=p+kp*p
-
-设a*a=k
-eqp=p+a*a*p*p
-eqp=a*a*p*p+p
-#两边同时乘上4*a*a
-4aaeqp=4aaaapp+4aap
-#两边同时加1
-4aaeqp+1=4aaaapp+4aap+1
-4aaeqp+1=(2aap)^2+2*2aap*1+1
-4aaeqp+1=(2aap+1)^2
-#因为a可能不是整数
-4ken+1=(2kp+1)^2
Index: RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E1.py
===================================================================
diff --git a/RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E1.py b/RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E1.py
deleted file mode 100644
--- a/RSA_整理/整理中/P84.攻防世界simpleRSA/exp_E1.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-import  gmpy2
-import libnum
-
-n = 1605247600724752598798254639224215706171506359654961357324428027985787942008103766562745464838961569081446916113769517713344420113584254259000172572811154232107339480903672251992191997458469905064423618888336088652352540882576826988355783159237971043770132628344798937353150930071309347972804118952814447576207066147031238749098842662046825743988208813903138796789940911515825517078554074496474819128789835309636804325132602557092847746454786387067599510769382078521691609970320528531270474091713477040343897269903489441410062592732302402854035415438078656688806905350495825334584533345448091335565792091890185673190424063
-c = 751639057610677013264061431434189083017589908118307247217007533938435229431015858783222167911772848893015518607229280589985711010766459396989232072512314594917029375221335361209036112742388866873824163350886610514973038316512032459352053158417705406031466332440378871927174731975794579894912999936641163063898365134788537389162378185448090279397717831977803284480743612393591614284972981435749362255654561121758163485884075260156288337176713756471879489767416836868661153693157792733142765671887792303181376620864506386820826866340907593080654521498766421056474652652337037121881207188033108746890998208582406826010121861
-
-for i in range(2**16,2**15,-1):
-    if gmpy2.is_prime(i):
-        q=gmpy2.next_prime(i*gmpy2.iroot(n//i,2)[0]+38219)
-        if n%q==0:
-            break
-p=n//q
-phi=(p-1)*(q-1)
-d=libnum.invmod(65537,phi)
-E1=pow(c,d,n)
-print(E1)
\ No newline at end of file
Index: RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/出题.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/出题.py b/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 h=pow(ap+b,q,n)/出题.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-from Crypto.Util.number import *
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-
-e = 65537
-p = getPrime(1024)
-q = getPrime(1024)
-n = p * q
-c = pow(m, e, n)
-hint = pow(2020 * p + 2021, q, n)
-print(f'n={n}')
-print(f'c={c}')
-print(f'hint={hint}')
Index: RSA_整理/整理中/N分解_N是p的r次方/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N是p的r次方/exp.py b/RSA_整理/整理中/N分解_N是p的r次方/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N是p的r次方/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-import gmpy2
-import libnum
-
-n = 109671394618534156590716540772306636060550711465455829526382945168271125218007503161807386153286648328529071790130095763349089936429151343426469415497138306284842512691195220650548494501337831207724397925027651025644976364368511262187227825083865690186591571250267479440100917127211656877566179258870510690665025580200477574123634259670039152125607834855408269848826938902407472374892693266119859709658788565014195766992713646832624001067898323913639712284673673557898135411273837250194079399384826384835709060797351332323930309379071015140548478132323474993964925055399350661600068568602468295748573856804293659942047543032878436316918991716636681116631322082919386178460096115355963882313682994343822128626370850455024905542367255179074441679461101331332093019368492643
-e = 65537
-c = 83166081100602571613112201467626632459949037182633475449066025299006894059443612622701975752551708249083077180755342065457682925338233793688583913228361068561515321097016501900442865692643652803949920987493441500744743553498018003210308290969303190355756775977367324120441564693220728163622472865572357639056734898022442794130514936425334924283145153496702507951466618177405870656868713199816223765264228006032228439676574053839549440372521050502986043855511540855864034336902304414848547480112182226920285820386643015671106933140105835060319823245206934565859078021518312305243997612804935774414840491355098017977514736057368000596388974956265042651277403519473262257945986199408278855335170546242641727930526697102351648388874227840119205560199015181257296591985205818
-p = 10186351850605898834333098258639828910824016865517013383611935945131883947448223014077315468253377357594775340263769153442019216205089695821439736926082483
-# n=p**5
-phi = (p - 1) * p ** 4
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp2.py b/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理 pow(g,a1(p-1),n)/exp2.py	
+++ /dev/null	
@@ -1,11 +0,0 @@
-
-import libnum
-
-
-n = 9858036118742475059433629759400140149605427966433887001108914046633590983713890376353399251885596714047941627222518567515364827340623251995233155278723954926352575221234142199002389819918370754455018819109203109519495493316781422680537687252828642561153832774006286448224016306003631037545643746379044035822029246823483754854602215035869280453855199171915302879406862793807947285344105991067005185493038370882005106069286893165426035453262949739088328689761676541415552066845538243916687080015277379248062286846119847500455125785281216888979581104100416760176854106890525904804003871967844912776926419778292365918733
-k1 = 4961356980843219227031667558158760111429474781353239042846946454889308337426649950562701556812878479419482114480334396560017050901408543482904510839046375272618911899662922000275482705215097956326853000314956770940510205507508883917322367747195211326932972446951696070952604655668087834669239815290687449340666091764203568518066586476150861542456340936303824392273004883320273039066213750777751436497551151274574369325153858390731248298056433816285354182588883715211738843801326831297181947562239993323202961410530072969013398669658073337273085171642258091164822631807295793886169033827781164115751086585872189121242
-c1 = 4115578106197062017294044310891024039554438131787269391154862526142866937938155870549829472424386226484625850457327387070755337288822640509004443484397234720914851433620556887385729540499953724033259937785600491548446806766462413179765702810698096381537513314758346885921106310631278002150697458246447235914052771405341899822588463120295331632180131956205362147784798497203957828308109092025630961803808101730731656980785388965672073473370194469269645377465298620585379296063436880502566076330461976785816470877632107769103280243111778113065038163250625042092690628478547757779278811188187028242267396799577953511519
-
-p=libnum.gcd(k1-1,n)
-flag=c1%p
-print(libnum.n2s(flag))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/题目.py b/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P31 (n + p) % (q-1)/题目.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-if p <= q:
-    p, q = q, p
-e = 0x10001
-n = p * q
-c = pow(m, e, n)
-leak = (n + p) % (q-1)
-print(f'{e = }')
-print(f'{c = }')
-print(f'{n = }')
-print(f'{leak = }')
Index: RSA_整理/整理中/dp泄露_常规/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_常规/解析.txt b/RSA_整理/整理中/dp泄露_常规/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_常规/解析.txt	
+++ /dev/null	
@@ -1,28 +0,0 @@
-
-
-已知公钥n,e以及dp
-其中,dp = d mod (p-1)
-已知：
-c = m^e mod n
-m = c^d mod n
-ϕ(n)=(p−1)*(q−1)
-d∗e ≡ 1 mod ϕ(n)
-dp = d mod (p−1)
-由上式可以得到
-dp*e≡d*e mod (p−1)
-因此可以得到
-式1：d∗e=k∗(p−1)+dp∗e
-式2：d∗e≡1 mod ϕ(n)
-式1带入式2
-=> k∗(p−1)+dp∗e ≡1 mod ϕ(n)
-=> k∗(p−1)+dp∗e ≡1 mod (p−1)∗(q−1)
-=> k1∗(p−1)+dp∗e = k2*(p−1)∗(q−1)+1
-=> dp*e =  k2*(p−1)∗(q−1)+1-k1∗(p−1)+dp∗e
-=> dp*e = (p-1)*[k2*(p-1)-k1]+1
-因dp<p−1（dp是d//（p-1）的余数，dp<p−1）
-所以e > k2∗(q−1)−k1
-假设 x=k2∗(q−1)−k1
-x的范围为 (0,e)
-x∗(p−1)+1=dp∗e
-求出p-1方法，遍历(0,e)的范围，其中肯定有一个p可以被n整除，那么求出p和q
-
Index: RSA_整理/整理中/dp泄露_未知N/题目.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_未知N/题目.py b/RSA_整理/整理中/dp泄露_未知N/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_未知N/题目.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-dp = d % (p - 1)
-c = pow(m, e, n)
-print("e=", e)
-print("c=", c)
-print("dp=", dp)
Index: RSA_整理/整理中/dp泄露_e很大/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_e很大/exp2.py b/RSA_整理/整理中/dp泄露_e很大/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_e很大/exp2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-
-
-n= 18150086749964030204952772593650655354407282168407543480518017821905322058792108409169209539752974177937328703466169798097779231540410352308736251888449285307132274903811942187361234788236374036493935354342502760429195828731474432692281516115002087485890105917067613983079156790015275611914738187418424730456416770000646598861170179898016595068557049151791620868027603590052357726580431487083778514163249201637184318559165989454489485258667170883129099757366657203826319909509544670881866298317938263281638296241860739828567999093491297970389142395080780768892194380031018324855383292685388767246393785705551231780899
-e= 278817530653170259039233683650169866189
-c= 10813189255953686674328168562592345253502176950586624384555229875947895107088800774325110599057171743065073092283651992594106863499561887773348061509184951920329015539552207920010924284253109754443530283215130327152416667309504455641730629770856098336299767661535526880065006664806270833698497579073641076473649621250873969544362062393319711114090739414415757921473984666129110213417578310035188480139392986280529932137364474426391469019554935239234968517869914506321750458197587849623935306068749435995413807906558975073047215241796461878288003366415184144140612947217041288538376514085070670565572628317388808356563
-dp= 25015362092988139281045705051525732988903355826221062953430054346210238749256645995431509510448988062597830708438496723137288693056422683942336451600173722142331077900759633024803467824277121463213906905346623305038031660927650043841899168305106293747254814365869018331032172781810238397508103692878400636333
-
-import libnum
-
-p=libnum.gcd(pow(6,dp*e,n)-6,n)
-print(p)
-q=n//p
-print(n==p*q)
-m=pow(c,dp,p)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-flag=libnum.n2s(m)
-print(flag)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P53. p^3 + q^4/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P53. p^3 + q^4/题目.py b/RSA_基础篇/P41-P60/P53. p^3 + q^4/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P53. p^3 + q^4/题目.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-from Crypto.Util.number import *
-from gmpy2 import *
-from secret import flag
-
-p = getPrime(512)
-q = getPrime(128)
-r = getPrime(512)
-a = p**3 + q**4
-n = p * q * r
-e = 65537
-m = bytes_to_long(flag)
-c = powmod(m,e,n)
-
-print('a =', a)
-print('n =', n)
-print('c =', c)
-
-
-a = 1001757897913772351510420195662626456337522550684606727483773096673299029784598925879489541145425035208954548434364407129536623872359866140502945055841821765538135618785958230881698432164666106480484384998915283051445946164568339012311071022667483689786104241205203770248137327154122271358173278768580995401804353335810303663245624828137303106291342454008598042561788843169528260839797410662782024780465758566251328065946252974178694612662193108827812380093012592
-n = 19743856964263732842999962921764407899550835757434895392940479421960735302959163991849377985049404173836251900687827441599500422841626517558622567745437335569126719161072741233680254267603047267283814233895186061759120509099394028737117210315668037567644106922178370110286156290354552013641623466808054072066874721501635305497521532247446583415341
-c = 11573369450591319755076158585550356804136715495771905025393681593171072453674223539740220735995000501270745453812328856003963738281166754397539243769043057759237596024541470868109828449256053991918612982581009998827964614610819962346527488888094333196535012014776795315145414671509148454534127080694322513052946539505422338224596999797852421340273
Index: RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp2.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp2.py b/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P39 扩展中国剩余定理/1.求d/exp2.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-import libnum
-p=12922128058767029848676385650461975663483632970994721128398090402671357430399910236576943902580268365115559040908171487273491136108931171215963673857907721
-q=10395910293559541454979782434227114401257890224810826672485874938639616819909368963527556812339196570118998080877100587760101646884011742783881592586607483
-r=8104533688439480164488403019957173637520526666352540480766865791142556044817828133446063428255474375204188144310967625626318466189746446739697284656837499
-dp=73360412924315743410612858109886169233122608813546859531995431159702281180116580962235297605024326120716590757069707814371806343766956894408106019058184354279568525768909190843389534908163730972765221403797428735591146943727032277163147380538250142612444372315262195455266292156566943804557623319253942627829
-dq=40011003982913118920477233564329052389422276107266243287367766124357736739027781899850422097218506350119257015460291153483339485727984512959771805645640899525080850525273304988145509506962755664208407488807873672040970416096459662677968243781070751482234692575943914243633982505045357475070019527351586080273
-dr=21504040939112983125383942214187695383459556831904800061168077060846983552476434854825475457749096404504088696171780970907072305495623953811379179449789142049817703543458498244186699984858401903729236362439659600561895931051597248170420055792553353578915848063216831827095100173180270649367917678965552672673
-c=220428832901130282093087304800127910055992783874826238869471313726515822196746908777026147887315019800546695346099376727742597231512404648514329911088048902389321230640565683145565701498095660019604419213310866468276943241155853029934366950674139215056682438149221374543291202295130547776549069333898123270448986380025937093195496539532193583979030254746589985556996040224572481200667498253900563663950531345601763949337787268884688982469744380006435119997310653
-
-d=180171082464374053908724148860532892402211297680533542388398535453834172907613878404996937264910840683839492218577406084732161035594853616635682742116386285685614450931033973858666956799894677000293641816748133955996766539487948804565611537261710022099179895552234767207025739864114095299424717709389711203691962958870048027041933529979254347064603957575629597368213177818898674074934676565163091712467379167824560246364784943493509690650643108047919019285042353
-
-m=pow(c,d,p*q*r)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/exp.py b/RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P14 e=2 rabin/1.常规/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import gmpy2
-import libnum
-
-p= 13314362720917602133969793252481444316247612541287913579795797774897851142465370812511985605994998073433561235021924708067874236781706611485522371488232623
-q= 10711516497864529822020903304369858958930042711451857859791558135232705853374332295320094676061294774680048276363750484537945067473851592618816785752809803
-n= 142617015943661365869136488949628046624950745436416195175536421279851751774402291519010668496730147866462378904972514253007029491632653461771497495733152729212900224242492221133006321373540619376544526943204146111719397605460529531608654329571698129077171108416638061409327725762114841023226929126272738803269
-c= 3136716033731857617369889733308430982192049734478834150612954276064433287574994581343168243135342097712334250357890492021703404008556737899236668582163912130637742227325170121650071435166332685070232329
-e= 2
-inv_p = gmpy2.invert(p, q)
-inv_q = gmpy2.invert(q, p)
-mp = pow(c, (p + 1) // 4, p)
-mq = pow(c, (q + 1) // 4, q)
-a = (inv_p * p * mq + inv_q * q * mp) % n
-b = n - int(a)
-c = (inv_p * p * mq - inv_q * q * mp) % n
-d = n - int(c)
-# 因为rabin 加密有四种结果，全部列出。
-aa = [a, b, c, d]
-for i in aa:
-    print(i)
-    print(libnum.n2s(int(i)))
Index: RSA_整理/整理中/NC不互素/出题.py
===================================================================
diff --git a/RSA_整理/整理中/NC不互素/出题.py b/RSA_整理/整理中/NC不互素/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/NC不互素/出题.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-print(p)
-print(q)
-n = p * q
-e = 65537
-c = pow(m*p, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
Index: RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/exp.py b/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P30 pow(m,p,n)与pow(m,q,n)/1.求公约数/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-
-n= 49134891668897345591333219711303339144007670596441894829337290952093400283298630665826095289165809681961208520996265436195389904640720636719133734406693433810554096598929737422594980883724481297143537076662178576926253446582535294294231165454562659420944920445437433494540727083960515996626310138062984512331
-x= 24898114380189083075249478644617176345363769858290571489415603903447660857572376734333314388004344067870622511211551400003900882292855408080408530612898712604821849194436116203045876702326786310101264912258598823736415425063797050123512802647807994402065186878212852202204820369988512984137386942003350601013
-y= 16329839654620902472571665649919967371160409036961382290481165859731193710305989211665714814452109039568075053785039634104665516076749524765980529291699849764465433749870986860914147427598112865371747917109336808548762214669827404524571735460653099723747061723390924856171469660835909151652929700638010039801
-
-
-import libnum
-import gmpy2
-
-p=libnum.gcd(pow(x,n,n)-y,n)
-p=gmpy2.gcd(pow(x,n,n)-y,n)
-print(p)
-q=n//p
-print(n==p*q)
-phi=(p-1)*(q-1)
-d=libnum.invmod(p,phi)
-d=gmpy2.invert(p,phi)
-print(d)
-m=pow(x,d,n)
-flag=libnum.n2s(int())
-print(flag)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P49.p^5-p^4/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P49.p^5-p^4/题目.py b/RSA_基础篇/P41-P60/P49.p^5-p^4/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P49.p^5-p^4/题目.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-from Crypto.Util.number import getPrime, bytes_to_long
-from flag import flag
-
-m = bytes_to_long(flag)
-p = getPrime(512)
-q = getPrime(512)
-n = p*q
-e = 0x10001
-c = pow(m, e, n)
-hint = p**5 - q**4
-
-print(f"n = {n}")
-print(f"e = {e}")
-print(f"c = {c}")
-print(f"h = {hint}")
-print(f"f = {flag}")
-"""
-n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943      
-e = 65537
-c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552       
-h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446
-"""
Index: RSA_基础篇/P01-P20/P10 N是p的r次方/出题2.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P10 N是p的r次方/出题2.py b/RSA_基础篇/P01-P20/P10 N是p的r次方/出题2.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P10 N是p的r次方/出题2.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p ** 3 * q
-e = 65537
-c = pow(m, e, n)
-print("q=", q)
-print("n=", n)
-print("e=", e)
-print("c=", c)
Index: RSA_整理/整理中/P87.方程+中国剩余/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P87.方程+中国剩余/exp.py b/RSA_整理/整理中/P87.方程+中国剩余/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P87.方程+中国剩余/exp.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-
-from sympy import *
-import libnum
-n = 21256406304024147327122699985764737895162788854942201173538004689536569610046157311527715126074775927977409773971656249943602454790380966869525211733301201659688694473703188427037879868522859419364680904585572399937639393418586498509580133474303442722716959873727260844993296681950092753897902540593927952622713860163782763263944291810729056735965535138964485886748344167499818148134252327820007439830749462775149754781930983094046362696040641091039506998835624218220892441813224657845627120344960554424765109502415773475619490661527184126374299883610442465428985757004551740482644952396990065188807827114495184096249
-leak1 = 8842431959638543756327530752221031675897458993985909403335303147413741167900365489182674478419510549838159493192002672500346433589707076289344572454304647803237654059883974235710442126617587691632375039292283285577033977676131772115877520248352227419433136507412485140428972344000541898060766721412300525883
-leak2 = 127414092867622693231378230621806169422569654246682818498761930473755998913688181327473434110121174292309611256339271412324673262030535400937563769685033472683498585742711576446343086462569783541192470920638935990937187809422965809986860709074542257475025562691683977493260026623616012846939417988284096473040
-leak3 = 293130152177150437492580785085598394773458388719469800871702200331766258900690595210759869625006484354799804558552583572062231998451041105464048317708732987121458633718573774164071597186461239762511364549980544029915308083867329707804739776241438307060614946195675715671343671137725809499387682363101164970886
-
-p=Symbol("p")
-q=Symbol("q")
-f1=p+q-leak3
-f2=p*q-n
-pq1=solve([f1,f2],[p,q])
-print(pq1)
-
-p = 161562249983202700035527081166558786031731223261198195999535987465827171883730733359944156020947215855022510635343983292897557354440470230745496731228302894376018866016596714241754815953745113727125200716224341010140868299262202025976056483744622119807303134689795661748036502596285135565503272596613700276343
-q = 131567902193947737457053703919039608741727165458271604872166212865939087016959861850815713604059268499777293923208600279164674644010570874718551586480430092745439767701977059922316781232716126035386163833756203019774439784605127681828683292496816187253311811505880053923307168541440673933884409766487464694543
-
-c1=[leak2,leak1]
-pq=[p,q]
-c=libnum.solve_crt(c1,pq)
-print(c)
-phi=n-leak3+1
-for e in range(1,500000,2):
-    try:
-        if libnum.gcd(e,phi)==1:
-            d=libnum.invmod(e,phi)
-            m=pow(c,d,n)
-            flag=libnum.n2s(m)
-            if b"flag" in flag:
-                print(flag)
-                print(e)
-                break
-    except:
-        continue
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/rsa39.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/rsa39.py b/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/rsa39.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P12 e和phi不互素/2.lcm_phi/rsa39.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-import uuid
-from Crypto.Util.number import *
-import gmpy2
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m=libnum.s2n(flag)
-
-p = getPrime(512)
-q = getPrime(512)
-n=p*q
-hint = gmpy2.lcm(p - 1 , q - 1)
-e=54722
-c=pow(m,e,n)
-
-print("n=",n)
-print("e=",e)
-print("c=",c)
-print("hint=",hint)
Index: RSA_收集篇/99.不会做/测试/111.py
===================================================================
diff --git a/RSA_收集篇/99.不会做/测试/111.py b/RSA_收集篇/99.不会做/测试/111.py
deleted file mode 100644
--- a/RSA_收集篇/99.不会做/测试/111.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-from Crypto.Util.number import *
-from gmpy2 import next_prime, iroot
-from flag import flag
-assert flag[0:4]==b'flag'
-
-m = bytes_to_long(flag)
-assert size(m)<500
-
-p = getPrime(512)
-q = next_prime(p)
-
-n = p * q
-print('n=', n>>520)
-e = 0x10001
-c = pow(m, e, n)
-print('c=', c)
-
-'''
-n= 28576274811010794362153160897556935178530640825011441539841241257190782139295561904323347128956873569754645071205043238985141474388531008367238218822591
-c= 49502875285578675438052554215266678403659290915102322948363030271494959804587081871467110614683972929037615883922743651431683465100061968204901334627149795829429950385848753728500177164800064208215503246868631076011505268371936586645321659884527055007299822625570713613996139223348709621258028349513737798120
-'''
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/exp.py b/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P33  pow(p, q, n) + pow(q, p, n)/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-e = 65537
-c = 59662555342583061013008608133060203475725526601468647442902301335538953096485921516133656618941085620436784211565880744663573927593670579237831797055934897166262528476227281479029026508166848256301828084036716500159067642101104810756620735383857351274773983199968924981397675373272878756685629789497697821620
-n = 83332115751539889489689110273690067288993797655970253065863170986174973047785854940017477990345318506407680986257706329521142524295434171889087917406552261883625775754882538291980506944585738241124811588555071095223782766762626040473256423491630224616140407276984106458673447870374272906086783555489477673207
-l = 18881487897809480964326513919135880296801378921812225600834164247018332292886076618571738627353925482046410714540439662613766662197119044934743578662330528
-
-import libnum
-
-phi=n+1-l
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-flag=libnum.n2s(m)
-print(flag)
Index: RSA_整理/整理中/P48. 障眼法/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/P48. 障眼法/exp2.py b/RSA_整理/整理中/P48. 障眼法/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/P48. 障眼法/exp2.py	
+++ /dev/null	
@@ -1,51 +0,0 @@
-
-
-import sympy
-import gmpy2
-import libnum
-
-n1 = 6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683
-n2 = 20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947
-
-c1=6624758244437183700228793390575387439910775985543869953485120951825790403986028668723069396276896827302706342862776605008038149721097476152863529945095435498809442643082504012461883786296234960634593997098236558840899107452647003306820097771301898479134315680273315445282673421302058215601162967617943836306076
-c2=204384474875628990804496315735508023717499220909413449050868658084284187670628949761107184746708810539920536825856744947995442111688188562682921193868294477052992835394998910706435735040133361347697720913541458302074252626700854595868437809272878960638744881154520946183933043843588964174947340240510756356766
-e2=0xe18e
-print(e2)
-n22=n2//(13*25)
-
-while 1:
-    a,s=gmpy2.iroot(n22,2)
-    #print(p1,s)
-    p=sympy.nextprime(a*13)
-    q=n2//p
-    if n2%p==0:
-        # print(p)
-        # print(q)
-        q=n2//p
-        break
-
-p=102397419546952293033860597727650152144175130286102358700580521651161981691864932442389800376284315897109792547767071136122457986326994452907466660551539601
-q=196918114513369794295885764860865677200336789011735305193424080098388426330509485466134231492854453648288062591859752184850880742936527794052820501060652747
-
-# 当e约去公约数后与phi互素
-def decrypt(p, q, e, c):
-    n = p * q
-    phi = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi)
-    d = gmpy2.invert(e // t, phi)
-    print(d)
-    m = pow(c, d, n)
-    msg,s = gmpy2.iroot(m, t)
-    if msg:
-        return libnum.n2s(int(msg))
-m=decrypt(p, q, e2, c2)
-print(m)
-
-phi=(p-1)*(q-1)
-d1=libnum.invmod(n1,phi)
-m1=pow(c1,d1,n2)
-print(m1)
-flag1=libnum.n2s(m1)
-print(flag1)
-
-print(flag1+m)
Index: RSA_整理/整理中/e和phi不互素_lcm_phi/tmp思路.txt
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素_lcm_phi/tmp思路.txt b/RSA_整理/整理中/e和phi不互素_lcm_phi/tmp思路.txt
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素_lcm_phi/tmp思路.txt	
+++ /dev/null	
@@ -1,29 +0,0 @@
-
-
-h = gmpy2.lcm(p - 1 , q - 1)
-h2= gmpy2.gcd(p - 1 , q - 1)
-
-phi= (p-1)*(q-1)
-phi= h*h2
-
-n = 1024
-h = 1021
-h2= 3
-(4-7)
-
-
-h = gmpy2.lcm(p - 1 , q - 1)
-h2= gmpy2.gcd(p - 1 , q - 1)
-
-
-m=c^d%n
-c=m^e%n
-
-ed=1%phi
-ed=1%h
-
-
-ed=1+kphi
-ed=1+k*h2*h
-ed=1+k*h
-ed=1%h
\ No newline at end of file
Index: RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/题目.py
===================================================================
diff --git a/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/题目.py b/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/费马小定理pow(p, q, n) + pow(q, p, n)/题目.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-
-e = 0x10001
-n = p * q
-c = pow(m, e, n)
-leak = (pow(p, q, n) + pow(q, p, n)) % n
-print(f'{e = }')
-print(f'{c = }')
-print(f'{n = }')
-print(f'{leak = }')
Index: RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/解题.txt
===================================================================
diff --git a/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/解题.txt b/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/解题.txt
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P08 dp泄露/2.e很大/解题.txt	
+++ /dev/null	
@@ -1,18 +0,0 @@
-解析2：
-
-dp=d mod p-1
-#两边同时乘上e
-dp*e=de mod p-1
-因为de%phi=1
-de=kphi+1
-de=k(p-1)*(q-1)+1
-dpe=k(p-1)(q-1)+1+(p-1)*k
-dpe=1+(p-1)k
-dp*e%(p-1)=1
-模数p dp和e构成一对密钥。
-a^e*dp%p=a
-a^e*dp-a=kp
-a^e*dp%n-a%n=kp%n
-a^e*dp%n-a=kp+kn
-a^e*dp%n-a=kp+kpq
-a^e*dp%n-a=kp
\ No newline at end of file
Index: RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/exp.py b/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_phi/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-
-e = 65537
-phi = 98229890689284912089157469320766533791995454910192245906925225670195818406213091522014617153508961926275340781138620279250871290490873820930414041953789279215193143006258942396087516751221787778485548659324564021606857623517821094138942269722883193348321303203233297445863729579811837657596605227772947768080
-c = 20962649632855841088231373617057756055795073764826640468523117901947795570191538819434503909156672490273164571512993513456958532656058586024929659925126633909116178539998046336126716552474329852733455142305774551889295732464058882055828240152313078876041502758035842268176085433166898402827107253041748761839
-p1 = 9278107621912111502897373552245845971739215588186465664496052995069919521787577753719495078780428864673954897367324663969013147023292682927178810784000630
-q1 = 1888254482465757731585051308443185269531054824465971018646930721602120686960471254468405491101133069657301849498853283496490197246867160626826664577479894
-
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-f1 = p1 * p + q1 * q - 1 - p * q
-f2 = (p - 1) * (q - 1) - phi
-pq = sympy.solve([f1, f2], [p, q])
-p = (pq[1][0])
-q = (pq[1][1])
-n = p * q
-d = gmpy2.invert(e, phi)
-m = pow(c, int(d), int(n))
-print(libnum.n2s(int(m)))
Index: RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt
===================================================================
diff --git a/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt b/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P68 pow((p+q),e1,n)与pow((p-q),e1,n)/题目.txt	
+++ /dev/null	
@@ -1,21 +0,0 @@
-from Crypto.Util.number import *
-flag = ***********
-m=bytes_to_long(flag)
-p = getPrime(1024)
-q = getPrime(1024)
-e = ***********
-e1 = 2023
-n = p*q
-h1=pow((p+q),e1,n)
-h2=pow((p-q),e1,n)
-c=pow(m,e,n)
-print(n)
-print(h1)
-print(h2)
-print(c)
-
-30183656394805107357196370521008780218925570049861387216169054600381560517999947182495011076202126709273160644370262874124968897163730207965220921744326193258358200657778320099962189812662073746049174190737733696870138306766952659451198803418491107784028230018858597385184003464461324726173514428396625540948387202029576333925489299994380848535683878295861054849479745468667103738387433149825519903102622708548565692424513329009043335422465827135431803716962258640474502935517125459339414944346181909028036411407296618452373689029356418425024260765592536962977787010290927682883045452686496078325690903591609011622649
-7931354967841361677225525366492283823894590697656669456900404637225452955459348179528014507555386203547449783236442156583903338871101372231379416298673332475841552351685699019468753684327399291889812282583934998862651749254999550865157778659585029993856246293740166651157267243002539956928571725540194386430135556941941158115392325448899508409029275561616503138231793202722531305888967930689408754797831414396346372778070017194895510733987493231643773783381517911590791997520439013140032231243105419628779624880308940011265642047838378068375393042924607140918207395722101771037631402904373527746525020704973321077960
-25062305644512626278872554723682407404832559793666087363222623557675770421081399157255725073992481546436446297869801169592204892169276487493822396167281356628851048304904314012479222859204326040757182928968731733798383263988650657055905914856184098798472993044182269108543644164055399204428716761331393401597324716686296821274763372210790827746803211415514983448406120655928961667116170309904869353511506605306453153870397660846835063923643054746025854226394115291053816754538318359343733736423501470671478388599730283824290134464908259553611786880318768864343694812103186674192588648465811660170572517267553070038503
-10566050200491898237861779349951184912833923661795629392708549602522205458471596364817182905986707189288385851923975592583132325630526948547284585859263336194822093938912144662726671172596366107238257782270698285219710310820716655379358362338786357841955558739297544011078781470192343051678062312416475601556385198608232848554523600840313604027144055153075238544724194720089578983488275239449599014873939408460792984830861989839765653149206345119917698514546823183643061389802526139765069463102068988065342441036929752116505115330236182894409200589686944842338651901005676000551266948519276949174935413951432934098553
-
Index: RSA_整理/整理中/P81 p^5-p^4/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/P81 p^5-p^4/exp2.py b/RSA_整理/整理中/P81 p^5-p^4/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/P81 p^5-p^4/exp2.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-from Crypto.Util.number import *
-import gmpy2
-
-#因为p和q都是512bit长度，且已知hint=p**5 - q**4，p**5远大于q**4。由此我们可以直接对hint开5次方得到near_p，
-# 此时near_p<p我们再循环取near_p的下一个素数，直至n可以整除near_p为止,此时p=near_p，则q=n//p。
-
-n = 76236418318712173274495941060488893810931309177217802334230599201457092723011685048556311576262486371987147895332408646920500226769161418792142565209634495797142268681403865426056588605013602625268553194169434049817172340173907696496945054049859221379092764811535206778031226535614731731322630330166833765943
-e = 65537
-c = 7207616060389865156270906240837846478541820008527247539698331406253371238674590766101711421196342768182325013873320402422918804780590951789425587131632422554819735000106070325708057225062376701298825910565526713270553888227235612227223162695870584803109353377288421750982913226189395526612487664144379690552
-h = 130285072635228037239175162118613869214302695058325046962039091162567931492116336918638092534964417960274466351834311039222269165021532950982276262717322395682559639859781516047319178212473103057947426886870612637975024605166325017663998263834789814181250953051730859433354534450232382414565421858172075431133498326501045697132640582932453817599366612200146802110424409285814189125929844293789544163802323048780585398714263586547670912817768592459281775837372982750626103047573532664320692775783627129463700810934670066747044799514243631607384814191188276380589420289084574680852618867732847029105400406874790675559126905078326495799755425006555539699119063191489852930421412630857588890593040420277938268954008973405431053073576987401154763326417551463323055736754390446
-near_p = gmpy2.iroot(h,5)[0]
-while n%near_p !=0:
-    near_p =gmpy2.next_prime(near_p)
-p = near_p
-q = n//p
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-print(long_to_bytes(m))
Index: RSA_整理/P00 基础环境/2.rsa算法及原理简介.md
===================================================================
diff --git a/RSA_整理/P00 基础环境/2.rsa算法及原理简介.md b/RSA_整理/P00 基础环境/2.rsa算法及原理简介.md
deleted file mode 100644
--- a/RSA_整理/P00 基础环境/2.rsa算法及原理简介.md	
+++ /dev/null	
@@ -1,157 +0,0 @@
-    ## RSA简介及原理
-    ### rsa算法简介
-    
-    RSA是公钥密码体制，是一种使用不同的加密密钥与解密密钥
-    
-    ```
-    选择两个大素数p和q，计算出模数N = p * q
-    
-    计算φ(N) = (p−1) * (q−1) 即N的欧拉函数，然后选择一个e (1<e<φ(N))，且e和φN互素
-    
-    取e的模反数为d(逆元)，计算方法: e * d ≡ 1 (mod φ(N))
-    
-    对明文m进行加密：c=m^e%N
-    c = pow(m, e, N)，得到的c即为密文
-    
-    对密文c进行解密:m=c^d%N
-    m = pow(c, d, N)，得到的m即为明文
-    ```
-
-
-    ```
-    p 和 q ：大整数N的两个因子（factor）
-    
-    N：大整数N，我们称之为模数（modulus）
-    
-    e 和 d：互为模反数的两个指数（exponent）
-    
-    c 和 m：分别是密文和明文，这里一般指的是一个十进制的数
-    ```
-
-
-    ```
-    （N，e）：公钥
-    
-    （N，d）：私钥
-    ```
-    ### rsa算法原理
-    
-    #### 欧拉函数φ(n)
-    欧拉函数φ(n)的定义是小于n的自然数中与n互质的数的个数
-    
-    #### 欧拉定理
-    若n,a为正整数，且n,a互质，则:a^φ(n)≡1 mod n
-    
-    ### 费马小定理
-    费马小定理:
-    
-    
-
-
-    ```math
-    若p 是质数,a 与p 互质，
-    
-    a^p ≡a (mod p)
-    
-    a^{p-1}≡1 (mod p)
-    ```
-    
-    #### 模运算
-    运算规则
-    
-    模运算与基本四则运算有些相似，但是除法除外。其规则如下：
-    
-    ```python
-    (a + b) % p = (a % p + b % p) % p
-    (a - b) % p = (a % p - b % p) % p
-    (a * b) % p = (a % p * b % p) % p
-    a ^ b % p = ((a % p) ^ b) % p
-    结合律
-    ((a + b) % p + c)%p = (a + (b + c) % p) % p
-    ((a * b) % p * c) %p= (a * (b * c) % p) % p
-    交换律
-    (a + b) % p = (b + a) % p
-    (a * b) % p = (b * a) % p
-    分配律
-    (a + b) % p = (a % p + b % p) % p
-    ((a + b) % p * c) % p = ((a * c) % p + (b * c) % p
-    重要定理
-    若 a ≡ b (mod p)，则对于正整数 c，都有(a**c) ≡ (b**c) (mod p)
-    若 a ≡ b (mod p)，则对于任意的 c，都有(a + c) ≡ (b + c) (mod p)
-    若 a ≡ b (mod p)，则对于任意的 c，都有(a * c) ≡ (b * c) (mod p)
-    
-    如果ac≡bc (mod m)，且c和m互质，则a≡b (mod m）。
-    [理解：当且仅当c和m互质,c^-1存在,等式左右可同乘模逆。]
-    如果a≡b (mod m),a≡b (mod n)，且n和m互质，则a≡b (mod mn）
-
-
-    若 a ≡ b (mod p)，c ≡ d (mod p)，则
-    (a + c) ≡ (b + d) (mod p)
-    (a - c) ≡ (b - d) (mod p)
-    (a * c) ≡ (b * d) (mod p)
-    (a / c) ≡ (b / d) (mod p)
-    
-    除法规则：
-    在模n意义下，a/b不再仅仅代表这两个数相除，⽽是指 a+k1*n 和 b+k2*n这两个组数中任意两个相除，使商为整数
-    因此也就可以理解，除以⼀个数等价于乘以它的逆
-    a/b ≡ c(mod n) <=> a ≡ c*(b^-1) (mod n)，其中b模n的逆记作b的负⼀次⽅。
-
-
-    ```
-
-
-    ```
-    逆元
-    a mod p的逆元便是可以使 a * a' mod p = 1 的最小a'。
-    ```
-
-
-    #### 推导过程
-    
-    ```python
-    式1：c=m^e%N
-    式2：m=c^d%N
-    ```
-    将式1带入式2 得 m = (m ^ e % N ) ^ d % N
-    
-    需要证明：m == ( m ^ e % N ) ^ d % N
-    
-    ```python
-    (m^e%N)^d%N
-    
-    =>  (m^e)^d%N #模运算 a ^ b % p = ((a % p) ^ b) % p
-    
-    m^(e*d)%N #幂的乘方，底数不变，指数相乘
-    
-    ```
-    将 e * d ≡ 1 (mod φ(N)) 即 e * d =  K * φ(N) + 1，K为任意正整数，代入得：
-    
-    ```python
-    => (m^(K*φ(N)+1))%N   
-    
-    => (m^(K*φ(N)*m^1)%N # 同底数相乘，指数相加
-    
-    => (m^(K*φ(N)*m)%N 
-    
-    => ((m^φ(N)^K%N*m)%N # 幂的乘方，底数不变，指数相乘
-    
-    => ((m^φ(N)^K%N*m%N)%N # (a * b) % p = (a % p * b % p) % p
-    
-    => ((m^φ(N)%N)^K%N*m%N)%N # a ^ b % p = ((a % p) ^ b) % p
-    
-    => (1^K%N*m%N)%N # 根据欧拉定理：a^φ(n)≡1 mod n 即 a^φ(n) mod n = 1
-    
-    => (m%N)%N # 1^K%N=1
-    
-    => (m%N)%N 
-    
-    => (m%N)^1%N 
-    
-    => (m^1)%N   # a ^ b % p = ((a % p) ^ b) % p 
-    
-    => m%N 
-    
-    m  #因为 m < N
-    
-    ```
-
Index: RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/题目.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/题目.py b/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 共模攻击_e1e2不互素1/1.e1,e2/题目.py	
+++ /dev/null	
@@ -1,26 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-
-k = 1024
-while 1:
-    flag = "flag{" + str(uuid.uuid4()) + "}"
-    m = libnum.s2n(flag)
-    p = libnum.generate_prime(k)
-    q = libnum.generate_prime(k)
-    n = p * q
-    tmp = libnum.generate_prime(4)
-    e1 = libnum.generate_prime(5) * tmp
-    e2 = libnum.generate_prime(5) * tmp
-    tmp2 = gmpy2.bit_length(m ** tmp) - gmpy2.bit_length(n)
-    if e1 != e2 and tmp2 < 5:
-        break
-    k += tmp2 // 2
-print(flag)
-c1 = pow(m, e1, n)
-c2 = pow(m, e2, n)
-print("e1=", e1)
-print("e2=", e2)
-print("n=", n)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/题目.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/题目.py b/RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_ 求逆元d1-d2/题目.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-import gmpy2
-import libnum
-from Crypto.Util.number import *
-import uuid
-flag = 'flag{'+str(uuid.uuid4())+"}"
-print(flag)
-flag1=flag[:21]
-flag2=flag[21:]
-m1=libnum.s2n(flag1)
-m2=libnum.s2n(flag2)
-
-p = getPrime(1024)
-q= getPrime(1024)
-n=p*q
-phi=(p-1)*(q-1)
-e1 =  getPrime(16)
-e2 =  getPrime(16)
-d1 =libnum.invmod(e1,phi)
-d2 =libnum.invmod(e2,phi)
-dd=d2-d1
-
-c1=pow(m1,e1,n)
-c2=pow(m2,e2,n)
-print("c1=",c1)
-print("c2=",c2)
-print("n=",n)
-print("e1=",e1)
-print("e2=",e2)
-print("dd=",dd)
-c1= 6733838789459931199058149670308727260843741096811449715444872676794872013183754622858142358860953409090471275056663852093255382831595445093389027611418533073251542228105122098655672243201566013269049673257545950265921334769453660794260369460626145929789420379373117970169521395700109883829930832864801056074877674941597582088285235646759637909087476295147786527873676567410566717421523346422950182870668646809884825822209501435038703929387996244766422894277224634645939878481756200099084364167558964681594043169720137522542692333678325260048812579899748925536673077066928758276593208971988942663469169538691035047694
-c2= 8366277709764400685046974874556048480052496413928056769515579166359481224673400489772756573250767790594839615839083763898307048126689342195264524356874243599245090238779605753249119610170611143039424214272370993787185091949643348010978753622976256276642743234789172453774761354256683433570844983636116313586831018168267526012235746840937969827190549583438830654378812487809058974682282579118375227701868159940746116268326846677193441199872518360781657796776416813543201068186698175639943920727192924592723876352818832499607933389909348997360827293372712297925074254469038243598148632369617179529428124887418815513980
-n= 18817594671090743657272253762944576150137162885923542977286206265757425414985090758109410978146720356103998948718214270184508716827830409430441234706995168712344420950028012950634922410416769515072316211057242302962478172436850591043456595538065256499508407496097561437670387166881800267145313078814265201339439524924036116421018006462379533497424347501070705658003620710859122307390256199828928801036473297236708659050799043830928526868538891939761670420670258518198985039020439020541730747119429222464031076670255708095414432621713513727172536335364200547007022393362808026249379896670380908869775413898849075996507
-e1= 41981
-e2= 36209
-dd= 1053704841024395437174966126533190981616292415576606812740918909121096916949302531783101209289389200245384407349748603292561596667558819619086001066677101374394170513370717808658925536480708691940905153090874424365353443644389110969859064875481674601586495481715770875127506827571256652900931272013627123620403523296244399421027877414684962334619785788986710188422499709843593365835744664902744928748656403821851709598285463439355756235533416138015740467498790254173390459329436575772984367497189565361716119512393162905231586789553789322178062842452918483776810036444979996001994632844167024771563150952249751416556
Index: RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/出题.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/出题.py b/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P26 invert(p,q)和invert(q,p)/1. 已知phi/出题.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-pinv = gmpy2.invert(p, q)
-qinv = gmpy2.invert(q, p)
-c = pow(m, e, n)
-
-print("e=", e)
-print("phi=", phi)
-print("c=", c)
-print("pinv=", pinv)
-print("qinv=", qinv)
Index: RSA_整理/整理中/e和phi不互素，剩余定理/题目.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素，剩余定理/题目.py b/RSA_整理/整理中/e和phi不互素，剩余定理/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素，剩余定理/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-
-
-
-c1 == pow(flag, e1, p * q1)
-c2 == pow(flag, e2, p * q2)
-e1 = 15218928658178
-e2 = 381791429275130
-q1 = 127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871
-p = 109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453
-q2 = 114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513
-c1 = 262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124
-c2 = 7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596
-
-
Index: RSA_整理/整理中/P87.方程+中国剩余/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P87.方程+中国剩余/题目.py b/RSA_整理/整理中/P87.方程+中国剩余/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P87.方程+中国剩余/题目.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-from Crypto.Util.number import getPrime
-from flag import flag, e
-
-p = getPrime(1024)
-q = getPrime(1024)
-n = p * q
-assert e <= 500000
-c = pow(libnum.s2n(flag), e, n)
-leak1 = c % q
-leak2 = c % p
-leak3 = p + q
-print("n =", n)
-print("leak1 =", leak1)
-print("leak2 =", leak2)
-print("leak3 =", leak3)
-n = 21256406304024147327122699985764737895162788854942201173538004689536569610046157311527715126074775927977409773971656249943602454790380966869525211733301201659688694473703188427037879868522859419364680904585572399937639393418586498509580133474303442722716959873727260844993296681950092753897902540593927952622713860163782763263944291810729056735965535138964485886748344167499818148134252327820007439830749462775149754781930983094046362696040641091039506998835624218220892441813224657845627120344960554424765109502415773475619490661527184126374299883610442465428985757004551740482644952396990065188807827114495184096249
-leak1 = 8842431959638543756327530752221031675897458993985909403335303147413741167900365489182674478419510549838159493192002672500346433589707076289344572454304647803237654059883974235710442126617587691632375039292283285577033977676131772115877520248352227419433136507412485140428972344000541898060766721412300525883
-leak2 = 127414092867622693231378230621806169422569654246682818498761930473755998913688181327473434110121174292309611256339271412324673262030535400937563769685033472683498585742711576446343086462569783541192470920638935990937187809422965809986860709074542257475025562691683977493260026623616012846939417988284096473040
-leak3 = 293130152177150437492580785085598394773458388719469800871702200331766258900690595210759869625006484354799804558552583572062231998451041105464048317708732987121458633718573774164071597186461239762511364549980544029915308083867329707804739776241438307060614946195675715671343671137725809499387682363101164970886
Index: RSA_基础篇/P41-P60/P46. 已知e d n 求p q/脚本1.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P46. 已知e d n 求p q/脚本1.py b/RSA_基础篇/P41-P60/P46. 已知e d n 求p q/脚本1.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P46. 已知e d n 求p q/脚本1.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-# 给出n,e,d, 求 q,p
-import random
-import gmpy2
-
-
-def gcd(a, b):
-    if a < b:
-        a, b = b, a
-    while b != 0:
-        temp = a % b
-        a = b
-        b = temp
-    return a
-
-
-def getpq(n, e, d):
-    p = 1
-    q = 1
-    while p == 1 and q == 1:
-        k = d * e - 1
-        g = random.randint(0, n)
-        while p == 1 and q == 1 and k % 2 == 0:
-            k //= 2
-            y = pow(g, k, n)
-            if y != 1 and gmpy2.gcd(y - 1, n) > 1:
-                p = gmpy2.gcd(y - 1, n)
-                q = n // p
-    return p, q
-
-
-def main():
-    n = 16352578963372306131642407541567045533766691177138375676491913897592458965544068296813122740126583082006556217616296009516413202833698268845634497478988128850373221853516973259086845725813424850548682503827191121548693288763243619033224322698075987667531863213468223654181658012754897588147027437229269098246969811226129883327598021859724836993626315476699384610680857047403431430525708390695622848315322636785398223207468754197643541958599210127261345770914514670199047435085714403641469016212958361993969304545214061560160267760786482163373784437641808292654489343487613446165542988382687729593384887516272690654309
-    e = 65537
-    d = 9459928379973667430138068528059438139092368625339079253289560577985304435062213121398231875832264894458314629575455553485752685643743266654630829957442008775259776311585654014858165341757547284112061885158006881475740553532826576260839430343960738520822367975528644329172668877696208741007648370045520535298040161675407779239300466681615493892692265542290255408673533853011662134953869432632554008235340864803377610352438146264524770710345273439724107080190182918285547426166561803716644089414078389475072103315432638197578186106576626728869020366214077455194554930725576023274922741115941214789600089166754476449453
-
-    p, q = getpq(n, e,d)
-    print(p)
-    print(q)
-
-if __name__ == '__main__':
-    main()
\ No newline at end of file
Index: RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/exp.py b/RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_共模攻击_e1e2互素/exp.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-
-
-n1 = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779
-n2 = 12023886737570921683430494088148056717464277480371493354080633886982376602419433228186314817561301719123238737516332784081267153425832030515178119047675516911098595227477026283152544604891747727831780305507300318674027062554009254728767714650522432836286987070040177863862115871377017779058128916872854380528430193235920536818893053943407063308419618772087299760070707222914961338101044775521373972076936552277418325268112523349134412986872504187930360266568935217397303420305220796347316727211659529079762169876950534044014924448371804442314283893083178368082712851107281302456671010073505430574108861981588149293779
-e1 = 2333
-e2 = 23333
-c1 = 1316116662134770690879814362103839780623420120527248536043840592146479052480574077985474161623763978563721124073172820410730492348846200098142706235343164470686127445583938273863894304189618247054649514955176136464273395879832878841555224421879457659795562326746943199675846414637238040550327393009642569894024250271081839428945999237716296592560124669418322569188493036148885333003876760965512925618500360394774816066758106739359762817644284120811162065280330204951295150904138010974815308787047834776406610525102814356091515999954110712767658162496023213125548829820563945272374105274832862682574678195529192009516
-c2 = 6485241395763328009719746130709898541269729483150505308808259329749145687803066648274311801821624527910483266170666538736992203392620205417714840881369386852010836477498279266591695876758050686740322941452286584178315830797555697887040771666991377055060541491757349967338300117181859105577325308779010792879713808168285776399372981366988860647334022480774711504685240194804912592209253106123423232743785805952113875347267336118332317990496240807273787216894980604742600774512296661048914646776553393778079057461747246478299158814839681875752645552215714984659603917168300453505504140987829883479097467840565806608012
-# e1 e2 互素 gcd=1
-import libnum
-import gmpy2
-
-s, s1, s2 = gmpy2.gcdext(e1, e2)
-print(s, s1, s2)
-m = (pow(c1, s1, n1) * pow(c2, s2, n2) % n1)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P41-P60/P47.little fermat/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P47.little fermat/exp.py b/RSA_基础篇/P41-P60/P47.little fermat/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P47.little fermat/exp.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-from Crypto.Util.number import  *
-
-#用yafu分解N
-#114514 ** x % p == 1 根据费马小定理得知 x=p-1
-
-n = 141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393
-c = 81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883
-p = 11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734648016476153593841839977704512156756634066593725142934001
-q = 11887853772894265642834649929578157180848240939084164222334476057487485972806971092902627112665734646483980612727952939084061619889139517526028673988305393
-e = 65537
-x = p-1
-phi = (p-1)*(q-1)
-d = gmpy2.invert(e,phi)
-m = pow(c,d,n)
-real_m = m^(x**2)
-print(long_to_bytes(real_m))
-
-
Index: RSA_整理/整理中/N不互素_平分明文/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_平分明文/exp2.py b/RSA_整理/整理中/N不互素_平分明文/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_平分明文/exp2.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-import gmpy2
-import libnum
-
-n1 = 18278456416897540360396258822757262982555755869670901090552498586949101988114819983049973792228149331753714211829150091366507963407709639602249698787433863615316934241223748268055507819756435927605756487582004688515855293842338007617018726192787272178786187989919650031295017445246608913808150370396832979736966944101019341527689214911779109999636349425823878126859829147994819384548777027669606291738366823809278767708461221830670665255418591083090040274616328116968600117656658246421927767060728182402210035045881818025673807969254883542917548511100917885959250620704515582518997559286168715792883861074220598943791
-n2 = 14718281935692942246514344466960823739043788561815140598178699003630478731051901387468570752239748871701513260441416821474763710775757545770047001681689286764572928181308278425603577448081174829594272045737613383467853857541067932138008740271004046748970111915370497637083205151943216917589213000669827068183128735055853090146367442283033992973854093411154488547740107755082193303785575614939069343199774715111804373406251308943619862703275132627574605543897680349862262913772613627719842043981943797101165701793459771726617487555152346999588560213302046402911610106668235901710477454671759962352749028587857389680857
-c1 = 14897512957877985291073451370997229971431611442234246383959378368138383843838602186764200234176467559404370286570662411222496252433014380640842874696486877004925614788148596161632851280090237300707166430170067495353446298066772402105814072501891920041154576728250668160351771877215919279860070607769304225631648712101695757447443748349446067746844910191804121935748134960309518439864721866967284850597357412411606643356342075119302860193616589493080428754805797969067310700610860435816047860794169521102300081676745004651672196010599021308459569165202732261338157558377669701207385936984772269758652310839805490426436
-c2 = 8964679463182022749797829546680381147968492022695080270157954224365732346700186653596903802305955380468152204793914476872234000593338240036398422292867781937160592148807729413972520261014124973472761268000048797126209010105345911203497254239189500567762324829782091374108165308434410235044784878269559848498007708005049415987165881413527082350625816180534142506509426576438823347406737583570228393620002029592018404347050644682030278682484606748950839477932988072925403147456191170453590581297805161865533569937880834249663768378358974835993063581854638638010548705670806550267429609766941078881760115520503213998478
-e = 65537
-
-p = gmpy2.gcd(n1, n2)
-print(p)
-q1 = n1 // p
-phi = (p - 1) * (q1 - 1)
-d = gmpy2.invert(e, phi)
-m1 = pow(c1, d, n1)
-print(libnum.n2s(int(m1)))
-
-p = gmpy2.gcd(n1, n2)
-print(p)
-q1 = n2 // p
-phi = (p - 1) * (q1 - 1)
-d = gmpy2.invert(e, phi)
-m1 = pow(c2, d, n2)
-print(libnum.n2s(int(m1)))
Index: RSA_整理/整理中/中国剩余定理_广播攻击/exp.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_广播攻击/exp.py b/RSA_整理/整理中/中国剩余定理_广播攻击/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_广播攻击/exp.py	
+++ /dev/null	
@@ -1,54 +0,0 @@
-import libnum
-import gmpy2
-import random
-import uuid
-
-n1 = 15229908966215673498264833619915862067189414881076960436877368615098175680441463135574405877266084016930270486805823866233100564302504890309012014811833355036803313503898478169492755564750400014950957968738560644049839456859498610733352635085343594112468877475531058156406714101260523668718601047825031099622949295499360227422532501547624931966301078524006797464247562465148669456759919516529290118434601009165995947159321449572614699448476100967664566619009059134422233825969331748148860489619925702309297146477957965828540943526221853964005609999026637516521464246318660977046648835810455829429341968774818398723853
-n2 = 16647671303452992814874916736670768507126337287566806803856358971599504932626835696964451452343832014324551312290172667506710009528951994807498255871494566471000537304568754858163291490985871966879235032991671329249773447655311105094011323544857528388925766738036851981411914648354588379859727189184060795755469840504119808662263041034859662007459121199866617211978706354395021326856422186021481792874584360726451742152401574782594951342548837410441200290733338032526353513084793937984997949578170760791903999736291842181621963250574851421507831701064063912449849413172670241330884387514421259190912380383298164284999
-n3 = 29741021686246020663676841105136775419357440781390260185592393569401376370805978457667540637964200363607306500686262920691759678594031678300413142185183670884962159744553489320946009596478586998527067077134149278862373300775784094204755592034106781470475619885674201222026771053219023490292688620343351009379638231445481201297167271847129926702267108223608485623131033339305214837391614096507988954783053070796974148251216158278106592716506313630837162027599129553042520944246264174701211107075008419327392352704491698073652799599537256566759453566984344533606287599484285948531866987190797600263099518976935518240853
-
-c1 = 6959258084092071065454299562288093923928417805928999659456406888937711509968856448163724527178151995480998144115831503011062045998734828883932412902319165009103141785130495087527312884494217049521337026706981996133432121798284172867545561634801496799668796585567711427864913170983434124205704168783854067763295351235413293017461040137295238173652253470527795039349714605669787423743618096196647453389748359636276835096715488576301332996050701277261859215493749088704184934893541297337697890057228935005941328617003209076420546007716706353983380827300196405400201116416777230463275285732458512616567135941354467426685
-c2 = 6980329295285525362547267847848318865994479894934736155773709405141249106739972526023147681931864449293251687818166317241310314795104094837920560848283265330877221117715222738878585798211133044997504018312371879793223144496711763354586556889478112149480922447037459440851037495694217691645394427027614927170296896917587773256575272276914565557013085090885698797535297051218113044222599072597256695709554731560694742808401895251490618749646636594613484000904930914249322765325562362771885023000308531495515513151456771016399566960453308004677247446640121091968613983880226467225115682271606727631686032091291561140665
-c3 = 20233993944978872042376344612943348102384153122558951915884274540138133554880115520330270710436883503022447682261018630693003219118284031617386534453929979962484430097693138337783002193192655501743050154775785535891890220923675994415232467097451208945510241779558595207425558347996942813211797652323984401196168255438306008115570489036147326159800446645923532611587932910081212717758849963264411492688567511495848103724155361462459108323999586803944933759202774033308915621722956400626498734688034239662478280986247839989724798426875779835896165243527034531628504097837684091017613599431520636356624353558008613223963
-
-
-def GCRT(m, a):
-    assert (len(m) == len(a))
-    curm, cura = m[0], a[0]
-    for m, a in zip(m[1:], a[1:]):
-        d = gmpy2.gcd(curm, m)
-        c = a - cura
-        assert (c % d == 0)
-        K = c // d * gmpy2.invert(curm // d, m // d)
-        cura += curm * K
-        curm = curm * m // d
-    return cura % curm
-
-
-n = [n1, n2, n3]
-c = [c1, c2, c3]
-mm = libnum.solve_crt(c, n)
-print(mm)
-for e in range(10, 20):
-    m, t = gmpy2.iroot(mm, e)
-    if t:
-        print(m)
-        print(libnum.n2s(int(m)))
-
-import libnum
-
-e = 13
-n1 = 16655230929893303490818415854457831426545038662809855283873228642358207995734291242944120042612699642460820594813654718158395826755230956722936107927889550129166619245152453353908373751380196656611349200623414836128383308653618062999595622747482867683840133843768870236300348203389275090871132570173650238774275209757683812077533989960172822335488251744796657926473009279723460304257252876756936524918018903158795894385111046938638194925881670388700872760201130485273663156422785999102754192840209476417602399017445296045070405343876349687582470436774316410697773759057621576657298096301937899052773787116133124199739
-n2 = 17197151926745749646602149115445210421300330711044282276861045275221683290586877554048509794473112203880585601275129330843554946888863132721219683639579200702355880529569042889789589005950061966309684759066705732225014741164779016525568884409690021988879475589545329149547046975086877521757237117008484775731784935960191717287332176327498377273179740487245459081737196777751408106728622513560888261855065717079007065635401835089216224111969668029246916986663313301660909538148574652809266532053889578734157117390082522831069594417637550812101652367765364077901612478983024721669687150628356918237152414368862535409859
-n3 = 18719461901666732419189610536735130974364055134601694187780706398369536769336080321122034942831217438281120989017698755904233940669427542442488330152862658754609065361849067002424120904308655036927580582916373684567047102601602588472175947665724244201887952599804681827419266055359412641159981152796138695901074514583606207162167385730873921563442166111892785482387108299191119048884993267729877797586421940344366636285656854837470348603688925980178978612114344024951042846249621559376348599687263736342957456838732355009637030035658212442442824658869094581324944034490700706979663405137522294780606800571433058912041
-
-
-c1 = 3530761236149189046680124371485374220252032991305088864647979778627799354583229731576585900490173357726425570018182390597284149666834264690795437972634538596441103368165128688664787322126097802985602065455316693754513332761284857157982201975554297034291092099307950246864758375115838291339394148547902128382917596947095456178572561422004708150053706114994560773293625641699691472764190426577272488084620105693964419578988589192873196530900413833531923536786853211065167782657153004342018675666293830194703777994380600060782651326623229047839109994778831432598543154184891096335217588164509636922274833553782288823349
-c2 = 7557835478962501903223351987016911891266554255050134264644805724502475848487138948948076311894495847429608136390014902405718084026208891531815323418707377349405409096779206918831458396991602033494429461919844309109113047361743133772636443322195238900874786548606687215969337920658068807801603115402783849082788527952834594443136756890747461628705174983562847145588532659589787532039981477468881131005056101092222499397893730056830156407331988257383965698358904379729558105489119604343081747549319382873235286788453435066434264212954607441597606413293491628299838317713381567250093086011058119721189087729804152444980
-c3 = 8471234074077377509408346140986116360421840978074779990698043926601850838824365885362094731657766299393262223086536737448516669969503891677808275285733096884405583100485903641986516527279324847718603091709062689898441711907846902050004165404073776422495381050861998133576074526490209080137421773440295749900582039873013319584167081936219517593826232230971430937112005615502869367413205660317010303160932970748420125111225082886082306332340892549579826854620461821084886193470846195356695313518639669516456574134135244251956477677377976434266541164893562226872334598362396368708087248848222008201970781942468960022694
-
-# def phase5(n1, c1, n2, c2, n3, c3):
-#     r = CRT([c1, c2, c3], [n1, n2, n3])
-#     m = int(r) ^ (1 / 13)
-#     print(libnum.n2s(int(m))
-# phase5(n1, c1, n2, c2, n3, c3)
Index: RSA_整理/整理中/密钥_OAEP/rsa6.py
===================================================================
diff --git a/RSA_整理/整理中/密钥_OAEP/rsa6.py b/RSA_整理/整理中/密钥_OAEP/rsa6.py
deleted file mode 100644
--- a/RSA_整理/整理中/密钥_OAEP/rsa6.py	
+++ /dev/null	
@@ -1,31 +0,0 @@
-from Crypto.PublicKey import RSA
-from Crypto.Cipher import PKCS1_OAEP
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-flag = flag.encode()
-
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-
-#
-# 生成公钥
-rsa_components = (int(n), int(e), int(d))
-keypair = RSA.construct(rsa_components)
-with open('prikey2.pem', 'wb') as f:
-    f.write(keypair.exportKey())
-
-rsa_components = (int(n), e,)
-arsa = RSA.construct(rsa_components)
-rsakey = RSA.importKey(arsa.exportKey())
-rsakey = PKCS1_OAEP.new(rsakey)
-c = rsakey.encrypt(flag)
-with open("flag2.pem", "wb") as f:
-    f.write(c)
Index: RSA_基础篇/P41-P60/P55. 威尔逊定理/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P55. 威尔逊定理/exp.py b/RSA_基础篇/P41-P60/P55. 威尔逊定理/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P55. 威尔逊定理/exp.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-
-e = 1049
-a=4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377
-c=3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270
-
-n=pow(2,e)-a
-print(n)
-#y用yafu分解
-q = 34211
-p = 170229264879724117919007372149468684565431232721075153274808454126426741324966131188484635914814926870341378228417496808202497615585946352638507704855332363766887139815236730403246238633855524068161116748612090155595549964229654262432946553891601975628848891407847198187453488358420350203927771308228162321231
-
-phi=(p-1)*(q-1)
-import libnum
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-
-# for i in range(1,p-q):
-#     m = m*i%n
-
-for i in range(p-q,p):
-    m=pow(m*i,1,p)
-m=m*libnum.invmod(-1,p)%p
-print(libnum.n2s(m))
Index: RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/题目.py b/RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P34 扩展欧几里得求逆元d1-d2/题目.py	
+++ /dev/null	
@@ -1,35 +0,0 @@
-import gmpy2
-import libnum
-from Crypto.Util.number import *
-import uuid
-flag = 'flag{'+str(uuid.uuid4())+"}"
-print(flag)
-flag1=flag[:21]
-flag2=flag[21:]
-m1=libnum.s2n(flag1)
-m2=libnum.s2n(flag2)
-
-p = getPrime(1024)
-q= getPrime(1024)
-n=p*q
-phi=(p-1)*(q-1)
-e1 =  getPrime(16)
-e2 =  getPrime(16)
-d1 =libnum.invmod(e1,phi)
-d2 =libnum.invmod(e2,phi)
-dd=d2-d1
-
-c1=pow(m1,e1,n)
-c2=pow(m2,e2,n)
-print("c1=",c1)
-print("c2=",c2)
-print("n=",n)
-print("e1=",e1)
-print("e2=",e2)
-print("dd=",dd)
-c1= 6733838789459931199058149670308727260843741096811449715444872676794872013183754622858142358860953409090471275056663852093255382831595445093389027611418533073251542228105122098655672243201566013269049673257545950265921334769453660794260369460626145929789420379373117970169521395700109883829930832864801056074877674941597582088285235646759637909087476295147786527873676567410566717421523346422950182870668646809884825822209501435038703929387996244766422894277224634645939878481756200099084364167558964681594043169720137522542692333678325260048812579899748925536673077066928758276593208971988942663469169538691035047694
-c2= 8366277709764400685046974874556048480052496413928056769515579166359481224673400489772756573250767790594839615839083763898307048126689342195264524356874243599245090238779605753249119610170611143039424214272370993787185091949643348010978753622976256276642743234789172453774761354256683433570844983636116313586831018168267526012235746840937969827190549583438830654378812487809058974682282579118375227701868159940746116268326846677193441199872518360781657796776416813543201068186698175639943920727192924592723876352818832499607933389909348997360827293372712297925074254469038243598148632369617179529428124887418815513980
-n= 18817594671090743657272253762944576150137162885923542977286206265757425414985090758109410978146720356103998948718214270184508716827830409430441234706995168712344420950028012950634922410416769515072316211057242302962478172436850591043456595538065256499508407496097561437670387166881800267145313078814265201339439524924036116421018006462379533497424347501070705658003620710859122307390256199828928801036473297236708659050799043830928526868538891939761670420670258518198985039020439020541730747119429222464031076670255708095414432621713513727172536335364200547007022393362808026249379896670380908869775413898849075996507
-e1= 41981
-e2= 36209
-dd= 1053704841024395437174966126533190981616292415576606812740918909121096916949302531783101209289389200245384407349748603292561596667558819619086001066677101374394170513370717808658925536480708691940905153090874424365353443644389110969859064875481674601586495481715770875127506827571256652900931272013627123620403523296244399421027877414684962334619785788986710188422499709843593365835744664902744928748656403821851709598285463439355756235533416138015740467498790254173390459329436575772984367497189565361716119512393162905231586789553789322178062842452918483776810036444979996001994632844167024771563150952249751416556
Index: RSA_整理/整理中/P48. 障眼法/题目解析.txt
===================================================================
diff --git a/RSA_整理/整理中/P48. 障眼法/题目解析.txt b/RSA_整理/整理中/P48. 障眼法/题目解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P48. 障眼法/题目解析.txt	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-a=getPrime(512)
-p=sympy.nextprime(13*a)
-q=sympy.prevprime(25*a)
-number2=p*q
-
-这个里可以分解n2，因为
-
-def crypto01(number1, number2, number3):
-    number4 = 1
-    while number2 > 0:
-        if number2 % 2:
-            number4 = (number4 * number1) % number3
-        number1 = number1 ** 2 % number3
-        number2 //= 2
-    return number4
-
-这个函数其实个 pow函数
\ No newline at end of file
Index: RSA_整理/整理中/密钥_公钥分解/exp.py
===================================================================
diff --git a/RSA_整理/整理中/密钥_公钥分解/exp.py b/RSA_整理/整理中/密钥_公钥分解/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/密钥_公钥分解/exp.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-
-
-from Crypto.PublicKey import RSA
-from Crypto.Cipher import PKCS1_OAEP
-import libnum
-
-with open("111", 'rb') as f:
-    c = f.read()
-c=libnum.s2n(c)
-with open("11.pem", 'rb') as f:
-    key = f.read()
-rsakey = RSA.importKey(key)
-n= rsakey.n
-e= rsakey.e
-d= rsakey.d
-print(d)
-# p1=libnum.nroot(n,2)
-# p=gmpy2.next_prime(p1)
-# q=sympy.prevprime(p)
-# print(n==p*q)
-# phi=(p-1)*(q-1)
-# d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P41-P60/P56.Math_Rsa/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P56.Math_Rsa/题目.py b/RSA_基础篇/P41-P60/P56.Math_Rsa/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P56.Math_Rsa/题目.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-from Crypto.Util.number import *
-from shin import flag
-
-
-m=bytes_to_long(flag)
-r=getPrime(1024)
-assert r%4==3
-p=getPrime(1024)
-assert pow(p,(r-1)//2,r)==1
-q=getPrime(1024)
-e=65537
-n=p*q
-a=pow(p,2,r)
-c=pow(m,e,n)
-print(f"n = {n}")
-print(f"r = {r}")
-print(f"a = {a}")
-print(f"c = {c}")
-
-n = 14859096721972571275113983218934367817755893152876205380485481243331724183921836088288081702352994668073737901001999266644597320501510110156000004121260529706467596723314403262665291609405901413014268847623323618322794733633701355018297180967414569196496398340411723555826597629318524966741762029358820546567319749619243298957600716201084388836601266780686983787343862081546627427588380349419143512429889606408316907950943872684371787773262968532322073585449855893701828146080616188277162144464353498105939650706920663343245426376506714689749161228876988380824497513873436735960950355105802057279581583149036118078489
-r = 145491538843334216714386412684012043545621410855800637571278502175614814648745218194962227539529331856802087217944496965842507972546292280972112841086902373612910345469921148426463042254195665018427080500677258981687116985855921771781242636077989465778056018747012467840003841693555272437071000936268768887299
-a = 55964525692779548127584763434439890529728374088765597880759713360575037841170692647451851107865577004136603179246290669488558901413896713187831298964947047118465139235438896930729550228171700578741565927677764309135314910544565108363708736408337172674125506890098872891915897539306377840936658277631020650625
-c = 12162333845365222333317364738458290101496436746496440837075952494841057738832092422679700884737328562151621948812616422038905426346860411550178061478808128855882459082137077477841624706988356642870940724988156263550796637806555269282505420720558849717265491643392140727605508756229066139493821648882251876933345101043468528015921111395602873356915520599085461538265894970248065772191748271175288506787110428723281590819815819036931155215189564342305674107662339977581410206210870725691314524812137801739246685784657364132180368529788767503223017329025740936590291109954677092128550252945936759891497673970553062223608
-
Index: RSA_基础篇/P01-P20/P04 维纳攻击脚本/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P04 维纳攻击脚本/exp.py b/RSA_基础篇/P01-P20/P04 维纳攻击脚本/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P04 维纳攻击脚本/exp.py	
+++ /dev/null	
@@ -1,79 +0,0 @@
-
-import gmpy2
-import libnum
-
-
-def continuedFra(x, y):
-    """计算连分数
-    :param x: 分子
-    :param y: 分母
-    :return: 连分数列表
-    """
-    cf = []
-    while y:
-        cf.append(x // y)
-        x, y = y, x % y
-    return cf
-
-
-def gradualFra(cf):
-    """计算传入列表最后的渐进分数
-    :param cf: 连分数列表
-    :return: 该列表最后的渐近分数
-    """
-    numerator = 0
-    denominator = 1
-    for x in cf[::-1]:
-        # 这里的渐进分数分子分母要分开
-        numerator, denominator = denominator, x * denominator + numerator
-    return numerator, denominator
-
-
-def solve_pq(a, b, c):
-    """使用韦达定理解出pq，x^2−(p+q)∗x+pq=0
-    :param a:x^2的系数
-    :param b:x的系数
-    :param c:pq
-    :return:p，q
-    """
-    par = gmpy2.isqrt(b * b - 4 * a * c)
-    return (-b + par) // (2 * a), (-b - par) // (2 * a)
-
-
-def getGradualFra(cf):
-    """计算列表所有的渐近分数
-    :param cf: 连分数列表
-    :return: 该列表所有的渐近分数
-    """
-    gf = []
-    for i in range(1, len(cf) + 1):
-        gf.append(gradualFra(cf[:i]))
-    return gf
-
-
-def wienerAttack(e, n):
-    """
-    :param e:
-    :param n:
-    :return: 私钥d
-    """
-    cf = continuedFra(e, n)
-    gf = getGradualFra(cf)
-    for d, k in gf:
-        if k == 0: continue
-        if (e * d - 1) % k != 0:
-            continue
-        phi = (e * d - 1) // k
-        p, q = solve_pq(1, n - phi + 1, n)
-        if p * q == n:
-            return d
-
-
-n = 113881698992379349039968368927979997900777221951663104697020683691495129639829918739755194174063944178083527489820939138302751895652076620380510013941997706327553964127612610209509889011613768847759318892303231846117914554931459295347697888260576901354448014917692680573408654658384481284699735788978230690197
-e = 39068960413447607023613035707248214114819409621234801785480423979473767995171860917209502861408393208940683687475760366491413173744775811644295874981290403938714121977201901942939425294427737703229098649131737380098596135730392902019429964095866394165971291108245774407908011073271822915371753470010435225545
-c = 32897925577913728659288168937025744709859960639901500169867896018406263110205704273203287172003057450591000201857719871686024077615520906540631374442504017489026298422189715372129838501090730593164075113452055617571409044743698645392909829425374093273187125709095368164744188182156849031225036001381531504057
-
-d = wienerAttack(e, n)
-print(d)
-m = pow(c, d, n)
-print(libnum.n2s(m).decode())
Index: RSA_整理/整理中/P83 AMM算法/1.单个P/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P83 AMM算法/1.单个P/题目.py b/RSA_整理/整理中/P83 AMM算法/1.单个P/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P83 AMM算法/1.单个P/题目.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-from Crypto.Util.number import getPrime, bytes_to_long
-import uuid
-import libnum
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-e = 997
-p = 169192804045017094881483391290948160084538928031716323749363864952453968973507689162051165395748104110078160856791051809212190939432475142974911541618441458487669050818296365973889691415623806933502603345031427784795571665740530721508383685794846991682950112717404480456329219127191697671498037366841158723543
-q = 107516396467746261711633898678341416690878446946218041251896502835689317784482747676107795221812916591321630759086326505565275611515776242892889358779953138176525964380991025435521861396436904104071935067377647496422254521013295763929078451759522826104921925202219553793049032407587608850233803508977340633609
-
-
-c = pow(m, e, p*q)
-print("c = %d" % c)
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/题目.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/题目.py b/RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P06 广播攻击(中国剩余定理)/题目.py	
+++ /dev/null	
@@ -1,33 +0,0 @@
-import libnum
-import gmpy2
-import random
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n1 = p * q
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n2 = p * q
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n3 = p * q
-while 1:
-    e = random.randint(10, 20)
-    print(e)
-    if gmpy2.is_prime(e):
-        break
-c1 = pow(m, e, n1)
-c2 = pow(m, e, n2)
-c3 = pow(m, e, n3)
-
-print("n1=", n1)
-print("n2=", n2)
-print("n3=", n3)
-
-print("c1=", c1)
-print("c2=", c2)
-print("c3=", c3)
Index: RSA_整理/整理中/P49 ab与共模/exp.py
===================================================================
diff --git a/RSA_整理/整理中/P49 ab与共模/exp.py b/RSA_整理/整理中/P49 ab与共模/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/P49 ab与共模/exp.py	
+++ /dev/null	
@@ -1,39 +0,0 @@
-
-
-n = 16125407552864408038451978971181995868587415471360339980312161114604643561448189461178314426572196867330062460236485889607095216773610462673103525772850249723607127265156082437903554965291175082962639383670937777311212896542972880424526079735786844389686957083365598937203322023931600269428448046149266341128554306213612397973685363189571686506630309830089220474201802073858959449101463678487317186076440791650250365012789827421324921778250883488990582944368562892797416344251060566529139850257746842799863322714616986446835293581697909698285176760388107157669554377276259762618665488257388491160075176338147719827037
-a = 13322099359978468117372945784425510444699489610016328757147661948295406516253823721585011191447575070678806499049706999293540250271665120018677590850034030368730195727460200565297326051740643004879691301619699301106930837198015487978219038035197723076156409255613823021037443587984496717728543374662454371480847535762439189824812004916125039891869564141181736162482872749048932562058201189900746478873842107591299649081305019213582364534953875369121945643746097376620917802772688252466567153568522092062992030417712736678853318751806058050273319844033309624611135341470435429322414596904369077559157148448414839032363
-b = 10275112473052097822163214291710245927601932098450526023436146936515575568966157279003404407528918111137316033319928861357294023493650299285411997308906967017629349471597059845459569991332848036825641333607579647087347485564553165670865364947248868251173085509024531668592291055640081009491476771331141299698791088908862211221687025549332282038419404819610705192095183951267650322294156121830068680857085069554177406709624092077033969271498007410828074096659664006111360389535517799171965089132885207983699725930677229877112464611768708080016125996142926911506613455696889598916644316886658721740850065556243938007810
-hint1 = 5646585199324712910174870876537963922935541552960135665854448183261083672983331653471842641925332927782315514511532766879190801929980994592200158530247219526312018092215417868738295218479822713259089033062819804918266548266840411490391265219709570414166619339434539050638762944531192598576491596621743816843125895668542438923918478344982739955475060988594676093550481119457143084943131533380243144975602778461714997734422024740849870491507544447233405634629786945527801001275734833662623467945946282795996306293408310273736674209426457392716416888243874745568105752845915237400340094943662551705685040442624941385833
-hint2 = 14585520416190000580445268935877639341764643969476248446269709488912338827970488844346831212422329420900792189527752187774994153342996351962929221182898317644166070626979324794061661833397604017568609862262727324814815424928736663001245135821828306087205636823484794573005890510152188674905462762148100329985991698959636488617249906898501964648111982813010371107696317126789702686935854736324220969771123819040020121221332632913284083499130218851636149172445983987305390603339306926120007456352189098000654123268951023801063278397184055390984864816637614344524008267690049801207931569396692120561972519603849989128993
-hint3 = 62093942844955894809744369157790919272709918861758380679821577778048849347738275395666159786314235217854818169109692941511405178089534902688354311428283671061156522101189015915319595816373429513381246644721630263218045931797340921607548704947248385584064891710829013112219974267785184786002337877737639709838592212626216662132226423917011307673560256826430488539866716857680736031883178590790995624532262186067634107387809349232152735759985335934241188954392212538014367792568155050961352578224455757803682195904635225691590570030418963654743371040135500179324783700281415394891744127799547005015135086532660545095391079521112740890332419993624820181300060863161311031709022851421455500566323115875683812425673042153124072114571960643827025713430499560735327945430769108097870643289355930786864376038045754477540741831426313486186208377194724677735876320331562117490978784291302590568890413248378029250309728695855535870140308467228980587481032478718831718081368010375598581706830265936563271354286383793280590954702836704366205681837777194310753890918642427863999918174783991318434802104950572826848043286819209577713010622615357988184856985035869968426847979577245836140860190327001050885833097619703928776547085778778592553120373
-
-
-# c2=hint3//n
-#
-# hint1*1024 = (a * c1*1024  + 1023 * x*1024) % n
-# hint2*1023=  (b * c1*1023  + 1024 * x*1023) % n
-# #h1-h2
-# h1*1024-h2*1023 =(a*c1*1024-b*c1*1023)%n
-# (h1*1024-h2*1023)*(a*1024-a*1023)^-1 =c1%n
-
-c2=hint3//n
-import libnum
-import gmpy2
-
-tmp1=libnum.invmod(a*1024-b*1023,n)
-tmp2=hint1*1024-hint2*1023
-c1=pow(tmp2*tmp1,1,n)
-
-
-#e1 = randint(1, 65538)
-e2 = 9647291
-
-for e1 in range(65538,1,-1):
-    s1, s2, s = libnum.xgcd(e1, e2)
-    m = (pow(c1, s1, n) * pow(c2, s2, n) % n)
-    flag=libnum.n2s(int(m))
-    if b"flag" in flag:
-        print(flag)
-        break
-
-
Index: RSA_基础篇/P41-P60/P55. 威尔逊定理/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P55. 威尔逊定理/题目.py b/RSA_基础篇/P41-P60/P55. 威尔逊定理/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P55. 威尔逊定理/题目.py	
+++ /dev/null	
@@ -1,14 +0,0 @@
-from Crypto.Util.number import *
-from libnum import s2n
-from secret import flag
-p = getPrime(1024)
-q = getPrime(16)
-n = p*q
-m = s2n(flag)
-for i in range(1,p-q):
-    m = m*i%n
-e = 1049
-print(pow(2,e,n))
-print(pow(m,e,n))
-#4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377
-#3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270
Index: RSA_整理/整理中/中国剩余定理_ e=1/exp.py
===================================================================
diff --git a/RSA_整理/整理中/中国剩余定理_ e=1/exp.py b/RSA_整理/整理中/中国剩余定理_ e=1/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/中国剩余定理_ e=1/exp.py	
+++ /dev/null	
@@ -1,10 +0,0 @@
-
-import libnum
-n1= 148940337131589571956546000093283178449
-c1= 37661829633479650123965286422613768806
-n2= 194545959106983958495796913611226256697
-c2= 136557714345886330223035822589488157230
-n3= 159675071780718021961142743321726109279
-c3= 120830575737154793687705030754292986572
-m=libnum.solve_crt([c1,c2,c3],[n1,n2,n3])
-print(libnum.n2s(m))
Index: RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/exp.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/exp.py b/RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/exp.py	
+++ /dev/null	
@@ -1,13 +0,0 @@
-from Crypto.PublicKey import RSA
-from Crypto.Cipher import PKCS1_OAEP
-import libnum
-with open("flag2.pem", 'rb') as f:
-    ciphertext = f.read()
-with open("prikey2.pem", 'rb') as f:
-    key = f.read()
-
-rsakey = RSA.importKey(key)
-cipher = PKCS1_OAEP.new(rsakey)
-message = cipher.decrypt(ciphertext)
-print(message)
-# b'flag{e5dca96d-f0cb-4bde-b657-2e2589958557}'
\ No newline at end of file
Index: .idea/rsa_f2x.iml
===================================================================
diff --git a/.idea/rsa_f2x.iml b/.idea/rsa_f2x.iml
deleted file mode 100644
--- a/.idea/rsa_f2x.iml	
+++ /dev/null	
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/venv" />
-    </content>
-    <orderEntry type="jdk" jdkName="Python 3.11 (风二西rsa)" jdkType="Python SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P60. 障眼法/test2.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P60. 障眼法/test2.py b/RSA_基础篇/P41-P60/P60. 障眼法/test2.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P60. 障眼法/test2.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-
-
-def crypto01(n3, n1, n2):
-    n4 = 1
-    while n1 > 0:
-        if n1 % 2: 
-            n4 = (n4 * n3) % n2
-        n3 = n3 *n3 % n2
-        n1 //= 2
-    return n4
-
-n3=3
-n1=5
-n2=23
-c1=crypto01(n3, n1, n2)
-c2=pow(n3,n1,n2)
-print(c1)
-print(c2)
\ No newline at end of file
Index: RSA_基础篇/P61-P80/P61.求公约数+2^16/exp2.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P61.求公约数+2^16/exp2.py b/RSA_基础篇/P61-P80/P61.求公约数+2^16/exp2.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P61.求公约数+2^16/exp2.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-
-n1= 83758575069905304067768481601753574998130100929563488113032489538841228437614038849648582947130531285620158614235448872871127520586959431556641650448541549150788998002451811261912231543271446644060890282133258667768706029719891178262570370575285298224152119578339390800107889334951078164762184333747467380888
-n2= 9831276541826816789368451633385540087371496489313852209076031193730848235018296111252032115432949863700248359574145846899107616306788202793767305144740541785563939136198331219646159758474239920030391929508514991198073422146216586741498057527918329570942088288077450777684683107307014975767032857456318358064
-n= 140856289298906159437739029545347610108994755491239167745641832705764858521348872395929019274279252591208014041777481788324765489375807836151544773947219166392455703715770608717639845195855883468725012423798709748849187737712690267229995903190368828458681379150127037925721096918609588453047678178189307880401
-c= 53100585481275556435409181501721693813984862333551455563238323458270043603912938367431862281708352595284147129805506010649262433103290734582315903650224375708892586331205036195752388648357117325957081723405359096400361691896699396085109653734337210068638841322039054338712409255759760189138139488615812969337
-
-import libnum
-p=libnum.gcd(n1+n2,n)
-q=n//p
-print(n==p*q)
-
-inv_p = libnum.invmod(p, q)
-inv_q = libnum.invmod(q, p)
-
-
-c1=[c]
-for i in range(16):
-    tmp=[]
-    for c in c1:
-        mp = pow(c, (p + 1) // 4, p)
-        mq = pow(c, (q + 1) // 4, q)
-
-        a = (inv_p * p * mq + inv_q * q * mp) % n
-        if a not in tmp:
-            tmp.append(a)
-        b = n - int(a)
-        if b not in tmp:
-            tmp.append(b)
-        c = (inv_p * p * mq - inv_q * q * mp) % n
-        if c not in tmp:
-            tmp.append(c)
-        d = n - int(c)
-        if d not in tmp:
-            tmp.append(d)
-    c1=tmp
-
-
-
-for i in c1:
-    print(i)
-    print(libnum.n2s(int(i)))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/exp3.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/exp3.py b/RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/exp3.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P12 e和phi不互素/1.常规/exp3.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-from Crypto.Util.number import *
-import libnum
-
-# 当e约去公约数后与phi互素
-def decrypt(p, q, e, c):
-    n = p * q
-    phi = (p - 1) * (q - 1)
-    t = gmpy2.gcd(e, phi)
-    d = gmpy2.invert(e // t, phi)
-    print(d)
-    m = pow(c, d, n)
-    msg = gmpy2.iroot(m, t)
-    if msg[1]:
-        print(long_to_bytes(msg[0]))
-
-
-p = 171854505164939390402295426493389586289972154851849140728417624619463988154808053805729538974688869671559032639921300088271234681410193379381085714252211392886408792711387524667824537369266846649573070209815436507363007636943912350208275895292853801665488228125846058987049326903498661007035974420392738723323
-q = 145951936627745243523384785325963094339728144811023266133546816860787405503371056873662508073284279180417626507724315776654624382665743082805910036891739754019932290977071276850239245644056698685966997752654383650764557358649666141576105936215709831181842086893228254304235678475375978464394818353375373451573
-e = 830
-c = 4413268199893347044741276120215584703428167052744516280494996526431559720190092261631829389527634625276020346166956540800884139234489942113764564139232948414263452549927818365096023041932432723988241639527832673120924732407691135173154085803338322715604275530735968992726708155724384432557207264839248502158712330572704509492520346044648676055223193900826626346707083590815897507927683083455678855000344499804465073698745769989966769567497677402668725931090596642504740789789740965769347050166069295727209131555338513809368814890255851742010120871635378654904140016065148709710206173069000137023824698858539843753921
-
-decrypt(p, q, e, c)
Index: RSA_基础篇/P41-P60/P59. 费马小定理/task.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P59. 费马小定理/task.py b/RSA_基础篇/P41-P60/P59. 费马小定理/task.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P59. 费马小定理/task.py	
+++ /dev/null	
@@ -1,43 +0,0 @@
-from Crypto.Util.number import *
-from random import *
-from flag import FLAG
-
-BITS = 1024
-flag = bytes_to_long(FLAG)
-
-p = getPrime(BITS)
-q = getPrime(BITS)
-n = p*q
-
-g = randint(1,n)
-a1 = randint(1,n)
-a2 = randint(1,n)
-
-k1 = pow(g,a1*(p-1),n)
-k2 = pow(g,a2*(q-1),n)
-
-
-print("n = %s"%n)
-print("k1 = %s"%k1)
-print("k2 = %s"%k2)
-
-b1 = randint(1,n)
-b2 = randint(1,n)
-
-c1 = (pow(k1,b1,n)*flag)%n
-c2 = (pow(k1,b2,n)*flag)%n
-
-assert flag < n
-
-print("c1 = %d"%c1)
-print("c2 = %d"%c2)
-
-'''
-n = 9858036118742475059433629759400140149605427966433887001108914046633590983713890376353399251885596714047941627222518567515364827340623251995233155278723954926352575221234142199002389819918370754455018819109203109519495493316781422680537687252828642561153832774006286448224016306003631037545643746379044035822029246823483754854602215035869280453855199171915302879406862793807947285344105991067005185493038370882005106069286893165426035453262949739088328689761676541415552066845538243916687080015277379248062286846119847500455125785281216888979581104100416760176854106890525904804003871967844912776926419778292365918733
-k1 = 4961356980843219227031667558158760111429474781353239042846946454889308337426649950562701556812878479419482114480334396560017050901408543482904510839046375272618911899662922000275482705215097956326853000314956770940510205507508883917322367747195211326932972446951696070952604655668087834669239815290687449340666091764203568518066586476150861542456340936303824392273004883320273039066213750777751436497551151274574369325153858390731248298056433816285354182588883715211738843801326831297181947562239993323202961410530072969013398669658073337273085171642258091164822631807295793886169033827781164115751086585872189121242
-k2 = 8943660577405892997099415246000964332413663135286363632645590478753346989578467429954062835807609942851365774880023144520942029315601785638267996044694835031239940919206726351387647791985293576677117144309222345482756402074345845506698221273703274410853004407629888264128027446878663894377503365831077629911487977796118893231354280680598325548327444053575447407791091256260091884824630356121390983373431984667887019137026219503921285289004358685317477667095203722657823621429988685962573778350234701781053232256494914398637744373081735647622790113318562356606831868682912936768762749860591989864642992367932846710665
-c1 = 4115578106197062017294044310891024039554438131787269391154862526142866937938155870549829472424386226484625850457327387070755337288822640509004443484397234720914851433620556887385729540499953724033259937785600491548446806766462413179765702810698096381537513314758346885921106310631278002150697458246447235914052771405341899822588463120295331632180131956205362147784798497203957828308109092025630961803808101730731656980785388965672073473370194469269645377465298620585379296063436880502566076330461976785816470877632107769103280243111778113065038163250625042092690628478547757779278811188187028242267396799577953511519
-c2 = 1069417390392712224013484466911946251479515132512683148923109806683426116132220974153759944203026795479272077929265429391851629949467649257513543604050970026412281764244254971122378729482985044535740328359563865949603944075625096242664299209143911115287867129678168308056632406522013494918385694044348658310785409548526884085469813804712945302487796400392901241763662852123731910949146709219711388725430757562836225353975933990961286601256351973981732004724397292031523206145692402321288085912884435326461626793886145952474077975796841103796283781865005879515976167187625178845457630564285181509041968859289264784559
-'''
-
-
Index: RSA_基础篇/P41-P60/P43. l=xp - yq/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P43. l=xp - yq/exp.py b/RSA_基础篇/P41-P60/P43. l=xp - yq/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P43. l=xp - yq/exp.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-
-c= 551564125794527360292754537135683993412073939931842743252825546160841743341364252094742222814487857418305824437323878030495005807897236944650041419697803230240542069789239142234335059646047531620567332859284127151534412455911539133365768350696428945111875792760777095508652587766083396019852298185115051969441074068938824047201192080418628602596174474774855697186208035938593534975409169684395515882685578329880719955607549130328622864194613235437820462747929915267018301395643953492066705285425220173592312775458072380593362944099308614354606781832206279986843372454066078671851476691251733787462566344010699659948657470584132290099499667486463668654484126327809783796272798211413970548059315276716638396549002556403458342714471679783144761718633856405196153659252506389046652272680738572647805669805470798408389216761414662117425919867711976198236441013393105065105046883566185424874718959523366577696635290319923431499347239353902164293776533287417684647248865650788292642479872919920916018023539192669345883686464939028997808635504006023546082570114536162143744176286568521085625879207069673824739439940521280693601490469000165917705323629474544240448431724304411942107541454761715945905363697306927908085601405210241096339584435
-c
-x= 1039921692531141453171855686573982160456036531996302869318512030808823452344564509029392768187937381358132835421353947391146152688775743299708763697482129863204164544696991625661601981428710402320295175770372423624167211973430139460361562768548290676701957053891210369700921221423149214485954906023526821279926557801581767708726392811383905896345230572315244721504057592760336332644624486050382007494446830316569572753507641996242913084915745145936195274474180406298475140237243181920308808061641459145199545975335386794052129180701729606572759157857974396497582462091051829175373289263597496839879241578243224907672832014803113635737984868263391212145914279985388384337152091881584412700291574912680627163539990219142463561790982466626815425779747862078596997632279168340914860868052097864543118762539022747121013597275757154401931133822198696036282672601198523849805269896168866902811154489835853026712709866710314531080297228565754738514945802684651397895233790841923066629484585104088163724416585649040197355115406759433403488645168693798651073547129833154915060629892670375098565171693004803737662953673589099229638713143579081504330789724161639576214795886269552237155791077509102229464684521355609590852748304069726247236704799
-y= 736014288116387998482981292225897575913033744746622859814245522394148828934504502068128536122008262895931175914404165778736109397740668050279940330934493758991133283289795093940740201033496246207192437425621387835239430286481129433660072250177825347297475025162943732731630653122272527575067247416479924583882613330362098881474738197380789249965288557232114834891782358102994942270211315653831351383961417227758531583740666226727725750344616718977607143032420115705902434150306308160817617737050537061661099447512128104666493631155591951137144970943417226364185059458456339980873416546822860516520652871647188557889586426143677544650638309834553711532895702474423578962267524516754014832022202939700966864046238418056495746842655952853211515370515521909876239291145362684660555361066717458585544421496216796451185392132170217148402925014208212261927403253177814728752653680327831399487079417648836955867684206159459353721174409472322370933025321740556907124801250532865024242284602753929833669163493860061693895261466397155211732075466641386919838121634892150813507406963394856780887481463616941192441478968072733703153183623234052142371034221826202653301438259138303438892825467473471320095956240609806088237187069554283831919431149
-e = 0x10001
-
-import libnum
-x1=libnum.invmod(x,y)
-p=pow(c1*x1,1,y)
-q=(x*p-c1)//y
-n=p*q
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/整理中/P84.攻防世界simpleRSA/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P84.攻防世界simpleRSA/题目.py b/RSA_整理/整理中/P84.攻防世界simpleRSA/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P84.攻防世界simpleRSA/题目.py	
+++ /dev/null	
@@ -1,56 +0,0 @@
-#!/usr/bin/env python3.9
-# -*- coding: utf-8 -*-
-import gmpy2
-from Crypto.Util.number import getPrime, isPrime, bytes_to_long
-from secret import FLAG, E1, E2, P, Q1, Q2
-
-
-def next_prime(num: int) -> int:
-    num = num + 2 if num % 2 else num + 1
-    while not isPrime(num):
-        num += 2
-    return num
-
-p = getPrime(1024)
-q = next_prime(getPrime(16) * p + 38219)
-n = p * q
-c = pow(E1, 65537, n)
-print(f'n = {n}')
-print(f'c = {c}')
-# n = 1605247600724752598798254639224215706171506359654961357324428027985787942008103766562745464838961569081446916113769517713344420113584254259000172572811154232107339480903672251992191997458469905064423618888336088652352540882576826988355783159237971043770132628344798937353150930071309347972804118952814447576207066147031238749098842662046825743988208813903138796789940911515825517078554074496474819128789835309636804325132602557092847746454786387067599510769382078521691609970320528531270474091713477040343897269903489441410062592732302402854035415438078656688806905350495825334584533345448091335565792091890185673190424063
-# c = 751639057610677013264061431434189083017589908118307247217007533938435229431015858783222167911772848893015518607229280589985711010766459396989232072512314594917029375221335361209036112742388866873824163350886610514973038316512032459352053158417705406031466332440378871927174731975794579894912999936641163063898365134788537389162378185448090279397717831977803284480743612393591614284972981435749362255654561121758163485884075260156288337176713756471879489767416836868661153693157792733142765671887792303181376620864506386820826866340907593080654521498766421056474652652337037121881207188033108746890998208582406826010121861
-
-
-
-assert E2.bit_length() == 69
-ns = [getPrime(1024) * getPrime(1024) for _ in range(3)]
-cs = [pow(E2, 89, n) for n in ns]
-print(f'ns = {ns}')
-print(f'cs = {cs}')
-# ns = [15863230586500684911356384742123404120213699052018048588650392009927565369685497256344682150189923131009586323640507773706997704860898682946308031020361302334248895233255911348365179153799197341744863134926804603973507415697810440916305092395180382239729550833607847524005391137474497849077097574452115379368463540087172800902210822143687014813631366360652583216269138116785489485772437870528892032119729929607857459621078790511144060710035933887337208301078892163837203412081114510143406013892393607932596921308889058909544584619676380766485493114814753878272881866907210235681877689493671668534251778397658670518117, 14144098469438619358682652828507744381697293556670717685553585719665002440476256008471235313826051740009083510860714991201047915737216102220242621674841600987122005914542061963618272275986835928673920375768272390912778741502655909281390948606467847118377641357547931472588836726339758576038273820470879637555458446243401248151675266602656677360819563744765522495640821496694918515669243614141704744848980746101569785439728585144841655665959389460512628800782742764147773150430552859331269667626942993392101897661719871375721143240270211821269260950380944670195863016621594387236339317938305273510719419578308449465183, 27563822879593503938377821960427219022565215631856333510782568496016547757945464794632272818101891677705256471714805217606503652132995136255720639088424576003650628211271025648183600635145895528466199068640094470078526413324708028578289949241288828542143203769199399500669311878391255837977932634772778594526940501234736059441483897017015324765266787399950699732518347518591167932031031320265136158304460199654008895095274754918153773566824931440342525688741289235153882699461549523425169846266597156773535163599640189457171272058311480951820887261040891344076039474315985825984444520336790670313179493074014037981261]
-# cs = [3833095607830862948079097323254872789586576953317671099752083261949616608759231291050566542764984974722790226120399722937104503590740358249900089784508490830379531632752169777949200718567033018577184658177019404903817920024468923715441355404672443007723525750768430895425376124679225715687382380114628103058312176343693900115638265002657622618744666247132114654135429040069316368839938881716554901593031901272992940200484460436193699175500376368456706998564064693820008778900344357745691652875500810447147088715289581351501876012044611990972521570253106671158207677490849249612002954497927762168699886110455354481924, 1502420121177211156091634258259634977709023894278792755694473756163084431123774101512866316989917922052023168401167212284219907272528117024670443698990238243030221117004372456475521502350404137469088570170885409265567084376069256924135270283335242133163303599239181417949980292944203204296598188175632723968779672994090788585343302473442389865459398142634104331743517384589200789331489394375604801951994831647339839112698394141328178967516636452592385248135340133712522135715943787590172334743893259621909532456281362868290556461907936774231166936915669816509378419892149164552548131776979706381641477878931403040942, 8992204063713908492214256291861339175525948946919629972908439132005643626148678347198381531633907182877152728077958345519083406637446972079387161726967295886447791613166577391233866583354793842121902234644830640050181130381996083089350911224037154798259291124104894554037604500881250119806371348673833105103600782286898276354573884788251542211434143476774391457587885772379990104835187104619922442613860682792470389490804228050671124495925536024571104944112397143299499508504917890140939438891891453283594000764399193028606955089853654071198909973555844004685149713774167524224100487937899126480545681565581673958854]
-
-
-
-qq = getPrime(1024)
-nn = P * qq
-qqq = qq >> 460 << 460
-print(f'nn = {nn}')
-print(f'qqq = {qqq}')
-# nn = 16851735797771199659625936797279158526379741298692339786049494329385618191510929735113284926125682522862667382938603116481087115598324232020838136618518964343752653000145611092980612556947954728339508416646035295651852840099205127587606898235203114875942637900167644300657599966420459187131027117268004042708998239798434578246497419547543598779697909298102358128788120332794123690714647499091326245022977970510468925837363300545900657420134894815246189043375619879915523611890538142257042753868665844692029124229028056547096764320547579965641276151760507921199827910445919017775913411823263307923216323527883262438117
-# qqq = 121042531930820997492656296084544616958724191434895945419858099204426898711413526806300854553993738803031497438495403291406481997877273916883918253302909196533823945327277312672931819555344139777992801106437643790498379469530787985051569590331291422592393540391481519004782904598710037907420679190942964514816
-
-
-assert len(FLAG) == 42
-n1 = P * Q1
-n2 = P * Q2
-c1 = pow(bytes_to_long(FLAG), E1, n1)
-c2 = pow(bytes_to_long(FLAG), E2, n2)
-print(f'n1 = {n1}')
-print(f'n2 = {n2}')
-print(f'c1 = {c1}')
-print(f'c2 = {c2}')
-# n1 = 21655617838358037895534605162358784326495251462447218485102155997156394132443891540203860915433559917314267455046844360743623050975083617915806922096697304603878134295964650430393375225792781804726292460923708890722827436552209016368047420993613497196059326374616217655625810171080545267058266278112647715784756433895809757917070401895613168910166812566545593405362953487807840539425383123369842741821260523005208479361484891762714749721683834754601596796707669718084343845276793153649005628590896279281956588607062999398889314240295073524688108299345609307659091936270255367762936542565961639163236594456862919813549
-# n2 = 24623016338698579967431781680200075706241014384066250660360949684385831604822817314457973559632215801205780786144608311361063622813017396858888436529116737754653067203843306015767091585697803364656624926853551997229897087731298797904208292585562517602132663331748784390752958757661484560335406769204491939879324079089140420467301773366050084810282369044622442784113688062220370531522036512803461607049619641336524486507388232280683726065679295742456158606213294533956580462863488082028563360006966912264908424680686577344549034033470952036766850596897062924137344079889301948258438680545785139118107899367307031396309
-# c1 = 2615722342860373905833491925692465899705229373785773622118746270300793647098821993550686581418882518204094299812033719020077509270290007615866572202192731169538843513634106977827187688709725198643481375562114294032637211892276591506759075653224150064709644522873824736707734614347484224826380423111005274801291329132431269949575630918992520949095837680436317128676927389692790957195674310219740918585437793016218702207192925330821165126647260859644876583452851011163136097317885847756944279214149072452930036614703451352331567857453770020626414948005358547089607480508274005888648569717750523094342973767148059329557
-# c2 = 6769301750070285366235237940904276375318319174100507184855293529277737253672792851212185236735819718282816927603167670154115730023644681563602020732801002035524276894497009910595468459369997765552682404281557968383413458466181053253824257764740656801662020120125474240770889092605770532420770257017137747744565202144183642972714927894809373657977142884508230107940618969817885214454558667008383628769508472963039551067432579488899853537410634175220583489733111861415444811663313479382343954977022383996370428051605169520337142916079300674356082855978456798812661535740008277913769809112114364617214398154457094899399
Index: RSA_整理/整理中/dp泄露变形/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露变形/exp2.py b/RSA_整理/整理中/dp泄露变形/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露变形/exp2.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-
-e = 65537
-c= 32461937291123838150015437738232132778136420835501172981733602990740273486953741568090810560778161966164945158511260774070358644248232323420087723385263256644196533073406984717180336745536558689984942092573081904079903490501386556080018394074410235002595317034773282955985118051270196236522237314803148550104312339887381647416993827777740145028707473690705297024951376596720342536992121548930518678367840538408090222135227089379157055839665026501357827048478457911999587594147965082828271987647298414995124826623670109344083974284447663062399760045862177923687178825610208304215451278227328518587611057109711358853294506221375136820608279989589848521299683305678250602533798187554673551619882364862267158445783085217884637473353723296775978631814700691324134568859907895
-h1= 6468066142812037811245811431029822620718431256172659827318030980766740646875043754362691871361354796260760544851348386608059020178469741472552508428173289
-
-
-
-for k in range(65537,1,-1):
-    aa=e*h1-1
-    if aa%k==0:
-        p=aa//k+1
-        if gmpy2.is_prime(p) and gmpy2.bit_length(p)==512:
-            print(p)
-            break
-m=pow(c,h1,p)
-print(libnum.n2s(int(m)))
-
Index: RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/exp.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/exp.py b/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法_invert(p,q)和invert(q,p)_ed/exp.py	
+++ /dev/null	
@@ -1,36 +0,0 @@
-
-
-p1= 97656077071270197914785321263555295398683131376741279762023269752748032446917564784973530125497364995807144029368514414686812526434051342203148587548869714362392149049199571504107521002327725946079985444111124295505554135534791115828253787424842366876671199369039838469527700802048214832651973914615014793434
-q1= 39346433326508892813150536257919182675225716975877498778468626666265319210911093864684217868389854790505495572529483241732413112619372606685748980784688553398278315703981192828280813023954306657912647634729098972136705540024619937335024692325575092594446158807029214788285050359047781519982931005193436553164
-d= 13982206046522221689006948762375515892286671914597370002120896052266280914021885507889789598565474633660266121772385535949954654478591294089438758529565129571215458972099907852294228150256147359389834287744392536374255187239416806275744570662248893522074706262730636918053134499811014564470545819778015584753659205965073426501902382941707278051440033966771995946005135307665514929445057737703258338176975384665564222178081103000139437728386604903444661523794053627011660691133434801451813006697587015285256584456452850523012639216643290392821724776006584995172392016576699118057963479401425915020921720042294733838337
-e= 65537
-c= 13235028416286929520160810669079534965765212020283157183506000327481359053022089166886460096491962822206497841520395685863417454564782563002357235184688540460362871929729166716636143577909568477095287025119038866855396071566223268818065261766734924398179202129826294778702597618099032226876112654250403885134458713788086798004345808257538019652522209856828455756694071035571007463724635674562294436700546760823969026149755043139120494280665479551005965472492371422616161244117935709924215027494208339801474837499105640735072011664365891939864038690374913413240430803230704628673411107455299647523018041707726365601893
-phi=16033591784555690839033601641933863819862675274128076669740291933394723758788009352788583792713912217703542497595829207543956085361202366334328595985304274508481724780489075813896396106581346750635700757907059309496772854950127016253035273087412614339939285140337656629662098889174735118835844089284571097739371559723771996652001268037000802800553357819154820449211550823391567258031927998247803081416301018071582489307196620368843405837158330864310134068534625079672858460155583646814590373389203531298114865193213718937686858488611970228064763729093357377320357215677266414126622909951204685623007887150263682313184
-
-import sympy
-import gmpy2
-import libnum
-
-p = sympy.symbols('p')
-q = sympy.symbols('q')
-for k in range(e,1,-1):
-    if (e*d-1)%k==0:
-        phi=(e*d-1)//k
-        print(phi)
-        print(k)
-        try:
-            f1 = (p - 1) * (q - 1) - phi
-            f2 = q1 * q + p1 * p - p * q - 1
-            c1 = sympy.solve([f1, f2], [p, q])
-            p = int(c1[1][0])
-            print(p)
-            q = int(c1[1][1])
-            print(q)
-            break
-        except:
-            continue
-
-
-n=p*q
-m=pow(c,d,n)
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_整理/0.sage/P51.strange_rsa1/解析.txt
===================================================================
diff --git a/RSA_整理/0.sage/P51.strange_rsa1/解析.txt b/RSA_整理/0.sage/P51.strange_rsa1/解析.txt
deleted file mode 100644
--- a/RSA_整理/0.sage/P51.strange_rsa1/解析.txt	
+++ /dev/null	
@@ -1,6 +0,0 @@
-
-
-由代码可知，gift=p/q，但是是一个小数。
-因为n=p*q，可以得到n*gift=p*q*p/q=p**p,直接在Python中开方的话由于gift是小数，会导致精度不够，
-但是sage中使用sqrt()进行开平方的话精度是满足。
-所以sqrt(n*gift)开方得到p，再对其进行整型转换p=int(p)，进而得到q=n//p,接下来就是普通RSA解密。
Index: RSA_整理/整理中/求公约数_h=pow(d,e,n)/出题.py
===================================================================
diff --git a/RSA_整理/整理中/求公约数_h=pow(d,e,n)/出题.py b/RSA_整理/整理中/求公约数_h=pow(d,e,n)/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/求公约数_h=pow(d,e,n)/出题.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-e = 65537
-n = p * p * q
-d=libnum.invmod(e,p*(p-1)*(q-1))
-m=libnum.s2n(flag)
-c=pow(m,e,n)
-h=pow(d,e,n)
-print("n=",n)
-print("e=",e)
-print("c=",c)
-print("h=",h)
-
Index: RSA_基础篇/P01-P20/P03 共模攻击/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P03 共模攻击/出题.py b/RSA_基础篇/P01-P20/P03 共模攻击/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P03 共模攻击/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-n1 = p * q
-n2 = p * q
-e1 = 2333
-e2 = 23333
-m = libnum.s2n(flag)
-c1 = pow(m, e1, n1)
-c2 = pow(m, e2, n2)
-print("n1=", n1)
-print("n2=", n2)
-print("e1=", e1)
-print("e2=", e2)
-print("c1=", c1)
-print("c2=", c2)
Index: RSA_基础篇/P61-P80/P63 多次共模攻击/exp.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P63 多次共模攻击/exp.py b/RSA_基础篇/P61-P80/P63 多次共模攻击/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P63 多次共模攻击/exp.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-
-
-n1=22050953768202021481010915313335403389948821591290284021528823110055078952801744325742584338632743222564116025569201609100099140217395018016506154677038588910158433553200597007004268715220573321589629347699068502486270203492908109836129720897763672586681625070576997967568522356194367741554734864232958659587053761759661478814378254701518735932796643357210227340562329360114827890815519720551495219551873035412573398259484498825938763675850434100787696383253997179331644466947544341986360021205157678182603783695524965051557767005272125386048836833015580253783584964102467821576852398803546108481537310174321919050353
-
-e1=59128088630385702091793322397875412615287778093553340394935198771980934904409635908137056137500955809593299368744838440346273289970555396051144990989797210863701146919141975211913752717972107017909298545594800443496132062216604362311000654559609679035644414116340707213965027649030838962137050094466321514829
-e2=56215169078945305147968681282252756439303068274069910023349833198776537639158983027295991346383182982930396088736536749365734429090657910300545074934035046118793611766878525139472732747606948579166089291432351453511111034598283193727196891373071637478129067053858908528278572028109519929965821246065475778933
-e3=73156897345576580733336254416875446312135920505234241583955377458351670307425321903141332045390781579660774735374640610101410104174523838973391291498719274252868469620986514997919898470027086712768194090825851384606653867575710280385622236269294531071134614036937731776500204830836190134333882217896008543457
-
-c1=19976175496420780796848436562459254725655766819091829085826918149358308150771183434480326036444720888245566133903361432778229861271628280695446732985230796743181959883517331552003617993267709377216621765393365663340987203137917844628578695625623022062000732096723407958157462077180258074203352729060778611766833177607902362002125820905015209529089499964424943030945604025254397014677619659288363721977711532716145967636667129377981985698990030569256843762007665249718164170703617756181999278131026660565301567535403114776187577089832813139785291746759358023750990811762789636834511123590738087173954711684926601615115
-c2=4898586865590583349791168503497061263814474412917633892983260889915349146399251850580778058010671768731276622207144220430686590775349599075240855807281580243699788240580753584404973075025832012668575962081086112249777937293916819176020066376650920291361510348493449272807270898408762007189419333896769659437430852768446544404264173201280880803402814516726579877461957611421823994569622178100898519381415592111331870831221465078296676862706869630494365712999543574411096657312292324237752979866718985721293323434244021916237004185669910990599469829124257580347870877094040597883857029513765244082636393726155793249758
-c3=9099883293285607188457315377060923795389227851572672279537581985537813863184558195642805032976629001480514343235938921302176128381899613102386249993227001360190335966378018345908405925306216793296591916375901967580479064607956351257642318992575443552673489793187341405994074952704302526250535547037471646429167885887202208019598232257237310090543218540763411250961204711239409925361176839906514774379481609219818539741463273640959146818464495377132354754189255581006486953675501357979989730786548601066328450328018325649032865158696166428191373110380437099547406040746960175538556202450225910237128767465615939587757
-
-
-e1e2=6740560973485493036625043786360637357620464277198869494878993293248726344542203632176960860913490017486846857633080261095044261451862939397229008604970249
-e1e3=8771983350194518781617000083611750677841987896991848139049745498894342351855483382790835667007379464695226823245525542422100743814570866678833455310960421
-e2e3=8339835408369114849130895563555934346018109933913062330818844184888266124660264101689665242429038647659065732286075080285443457809210952438395361672290317
-
-import libnum
-
-s1,s2,e1e2=libnum.xgcd(e1,e2)
-c12=pow(c1,s1,n1)*pow(c2,s2,n1)%n1
-s2,s3,e2e3=libnum.xgcd(e2,e3)
-c23=pow(c2,s2,n1)*pow(c3,s3,n1)%n1
-
-s12,s23,gcd=libnum.xgcd(e1e2,e2e3)
-m=pow(c12,s12,n1)*pow(c23,s23,n1)%n1
-print(libnum.n2s(m))
-
-
-s1,s2,e1e2=libnum.xgcd(e1,e2)
-c12=pow(c1,s1,n1)*pow(c2,s2,n1)%n1
-
-s12,s3,gcd=libnum.xgcd(e1e2,e3)
-m=pow(c12,s12,n1)*pow(c3,s3,n1)%n1
-print(libnum.n2s(m))
-
-#
-s1,s2,e1e2=libnum.xgcd(e1,e2)
-s12,s3,gcd=libnum.xgcd(e1e2,e3)
-m=pow(c1,s1*s12,n1)*pow(c2,s2*s12,n1)*pow(c3,s3,n1)%n1
-print(libnum.n2s(m))
\ No newline at end of file
Index: RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/rsa6.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/rsa6.py b/RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/rsa6.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P02 密钥/3.公钥OAEP/rsa6.py	
+++ /dev/null	
@@ -1,31 +0,0 @@
-from Crypto.PublicKey import RSA
-from Crypto.Cipher import PKCS1_OAEP
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-flag = flag.encode()
-
-p = libnum.generate_prime(1024)
-q = gmpy2.next_prime(p)
-n = p * q
-e = 65537
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-
-#
-# 生成公钥
-rsa_components = (int(n), int(e), int(d))
-keypair = RSA.construct(rsa_components)
-with open('prikey2.pem', 'wb') as f:
-    f.write(keypair.exportKey())
-
-rsa_components = (int(n), e,)
-arsa = RSA.construct(rsa_components)
-rsakey = RSA.importKey(arsa.exportKey())
-rsakey = PKCS1_OAEP.new(rsakey)
-c = rsakey.encrypt(flag)
-with open("flag2.pem", "wb") as f:
-    f.write(c)
Index: RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/题目.py b/RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P52.next_prime(p+2^420)/题目.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-
-from Crypto.Util.number import *
-from gmpy2 import *
-from random import *
-from flag import flag
-
-m = bytes_to_long(flag)
-
-while True:
-    try:
-        p = getPrime(512)
-        q = next_prime(p+2**420)
-        n = p*q
-        phi = (p-1)*(q-1)
-        d = randint(0,n**0.32)
-        e = inverse(d,phi)
-        c = pow(m,e,n)
-        break
-    except:
-        continue
-
-print("e = %d"%e)
-print("n = %d"%n)
-print("c = %d"%c)
-
-'''
-e = 101684733522589049376051051576215902510166244234370429058800153902445053536138419222096346715560283781778705047246555278271919928248836576236044123786248907522717751222608113597458768397652361813688176017155353220911686089871315647328303370846954697334521948003485878793121446614220897034652783771882675756065
-n = 106490064297459077911162044548396107234298314288687868971249318200714506925762583340058042587392504450330878677254698499363515259785914237880057943786202091010532603853142050802310895234445611880617572636397946757345480447391544962796834842717321639098108976593541239044249391398321435940436125823407760564233
-c = 92367575354201067679929326801477992215675304496512806779109227230237905402825022908214026985431756172011616861246881703226244396008088878308925377019775353026444957454196182919500667632574210469783704454438904889268692709062013797002819384105191802781841741128273810101308641357704215204494382259638905571144
-'''
Index: RSA_整理/整理中/P67 求公约数+2^16/exp2.py
===================================================================
diff --git a/RSA_整理/整理中/P67 求公约数+2^16/exp2.py b/RSA_整理/整理中/P67 求公约数+2^16/exp2.py
deleted file mode 100644
--- a/RSA_整理/整理中/P67 求公约数+2^16/exp2.py	
+++ /dev/null	
@@ -1,41 +0,0 @@
-
-n1= 83758575069905304067768481601753574998130100929563488113032489538841228437614038849648582947130531285620158614235448872871127520586959431556641650448541549150788998002451811261912231543271446644060890282133258667768706029719891178262570370575285298224152119578339390800107889334951078164762184333747467380888
-n2= 9831276541826816789368451633385540087371496489313852209076031193730848235018296111252032115432949863700248359574145846899107616306788202793767305144740541785563939136198331219646159758474239920030391929508514991198073422146216586741498057527918329570942088288077450777684683107307014975767032857456318358064
-n= 140856289298906159437739029545347610108994755491239167745641832705764858521348872395929019274279252591208014041777481788324765489375807836151544773947219166392455703715770608717639845195855883468725012423798709748849187737712690267229995903190368828458681379150127037925721096918609588453047678178189307880401
-c= 53100585481275556435409181501721693813984862333551455563238323458270043603912938367431862281708352595284147129805506010649262433103290734582315903650224375708892586331205036195752388648357117325957081723405359096400361691896699396085109653734337210068638841322039054338712409255759760189138139488615812969337
-
-import libnum
-p=libnum.gcd(n1+n2,n)
-q=n//p
-print(n==p*q)
-
-inv_p = libnum.invmod(p, q)
-inv_q = libnum.invmod(q, p)
-
-
-c1=[c]
-for i in range(16):
-    tmp=[]
-    for c in c1:
-        mp = pow(c, (p + 1) // 4, p)
-        mq = pow(c, (q + 1) // 4, q)
-
-        a = (inv_p * p * mq + inv_q * q * mp) % n
-        if a not in tmp:
-            tmp.append(a)
-        b = n - int(a)
-        if b not in tmp:
-            tmp.append(b)
-        c = (inv_p * p * mq - inv_q * q * mp) % n
-        if c not in tmp:
-            tmp.append(c)
-        d = n - int(c)
-        if d not in tmp:
-            tmp.append(d)
-    c1=tmp
-
-
-
-for i in c1:
-    print(i)
-    print(libnum.n2s(int(i)))
\ No newline at end of file
Index: RSA_整理/整理中/e和phi不互素，剩余定理/exp.py
===================================================================
diff --git a/RSA_整理/整理中/e和phi不互素，剩余定理/exp.py b/RSA_整理/整理中/e和phi不互素，剩余定理/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/e和phi不互素，剩余定理/exp.py	
+++ /dev/null	
@@ -1,30 +0,0 @@
-# -*- coding: utf-8 -*-
-from gmpy2 import *
-from libnum import n2s, solve_crt
-
-#c1 == pow(flag, e1, p * q1)
-#c2 == pow(flag, e2, p * q2)
-e1 = 15218928658178
-e2 = 381791429275130
-q1 = 127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871
-p = 109935857933867829728985398563235455481120300859311421762540858762721955038310117609456763338082237907005937380873151279351831600225270995344096532750271070807051984097524900957809427861441436796934012393707770012556604479065826879107677002380580866325868240270494148512743861326447181476633546419262340100453
-q2 = 114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513
-c1 = 262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124
-c2 = 7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596
-n1, n2 = p*q1, p*q2
-phi1, phi2 = (p-1)*(q1-1), (p-1)*(q2-1)
-gcd1, gcd2 = gcd(e1, phi1), gcd(e2, phi2)
-print(f'gcd1 = {gcd1}')
-print(f'gcd2 = {gcd2}')
-m1 = powmod(c1, invert(e1//gcd1, phi1), n1)
-m2 = powmod(c2, invert(e2//gcd2, phi2), n2)
-
-
-gcd1_, gcd2_ = gcd(gcd1, q1-1), gcd(gcd2, q2-1)
-print(f'gcd1_ = {gcd1_}')
-print(f'gcd2_ = {gcd2_}')
-m1 = powmod(m1, invert(gcd1//gcd1_, q1-1), q1)
-m2 = powmod(m2, invert(gcd2//gcd2_, q2-1), q2)
-m = solve_crt((m1, m2), (q1, q2))
-print(m)
-print(n2s(int(iroot(m, 2)[0])))
\ No newline at end of file
Index: RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py b/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P62.pow((p+q),e1,n)与pow((p-q),e1,n)/題目.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-
-
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p = libnum.generate_prime(1024)
-q = libnum.generate_prime(1024)
-e = libnum.generate_prime(16)
-print(e)
-e1 = 2023
-n = p*q
-h1=pow((p+q),e1,n)
-h2=pow((p-q),e1,n)
-c=pow(m,e,n)
-print(n)
-print(h1)
-print(h2)
-print(c)
\ No newline at end of file
Index: RSA_整理/整理中/P87.方程+中国剩余/解析.txt
===================================================================
diff --git a/RSA_整理/整理中/P87.方程+中国剩余/解析.txt b/RSA_整理/整理中/P87.方程+中国剩余/解析.txt
deleted file mode 100644
--- a/RSA_整理/整理中/P87.方程+中国剩余/解析.txt	
+++ /dev/null	
@@ -1,4 +0,0 @@
-
-已知n=p*q,leak3=p+q,由此可以组成方程组，从而得到p和q。
-又leak1 = c % q、leak2 = c % p，使用中国剩余定理CRT组合一下可以计算出c。
-已知此时p,q,n,c，又e <= 500000,所以我们只需要爆破出一个合适的e即可获得flag。
\ No newline at end of file
Index: RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/出题.py
===================================================================
diff --git a/RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/出题.py b/RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/扩展欧几里得算法invert(p,q)和invert(q,p)_变形/出题.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-# print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-p1 = gmpy2.invert(p, q)-q
-q1 = gmpy2.invert(q, p)-p
-c = pow(m, e, n)
-
-print("e=", e)
-print("phi=", phi)
-print("c=", c)
-print("p1=", p1)
-print("q1=", q1)
Index: RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp.py b/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/exp.py	
+++ /dev/null	
@@ -1,34 +0,0 @@
-
-import gmpy2
-import libnum
-
-n1 = 21655617838358037895534605162358784326495251462447218485102155997156394132443891540203860915433559917314267455046844360743623050975083617915806922096697304603878134295964650430393375225792781804726292460923708890722827436552209016368047420993613497196059326374616217655625810171080545267058266278112647715784756433895809757917070401895613168910166812566545593405362953487807840539425383123369842741821260523005208479361484891762714749721683834754601596796707669718084343845276793153649005628590896279281956588607062999398889314240295073524688108299345609307659091936270255367762936542565961639163236594456862919813549
-n2 = 24623016338698579967431781680200075706241014384066250660360949684385831604822817314457973559632215801205780786144608311361063622813017396858888436529116737754653067203843306015767091585697803364656624926853551997229897087731298797904208292585562517602132663331748784390752958757661484560335406769204491939879324079089140420467301773366050084810282369044622442784113688062220370531522036512803461607049619641336524486507388232280683726065679295742456158606213294533956580462863488082028563360006966912264908424680686577344549034033470952036766850596897062924137344079889301948258438680545785139118107899367307031396309
-c1 = 2615722342860373905833491925692465899705229373785773622118746270300793647098821993550686581418882518204094299812033719020077509270290007615866572202192731169538843513634106977827187688709725198643481375562114294032637211892276591506759075653224150064709644522873824736707734614347484224826380423111005274801291329132431269949575630918992520949095837680436317128676927389692790957195674310219740918585437793016218702207192925330821165126647260859644876583452851011163136097317885847756944279214149072452930036614703451352331567857453770020626414948005358547089607480508274005888648569717750523094342973767148059329557
-c2 = 6769301750070285366235237940904276375318319174100507184855293529277737253672792851212185236735819718282816927603167670154115730023644681563602020732801002035524276894497009910595468459369997765552682404281557968383413458466181053253824257764740656801662020120125474240770889092605770532420770257017137747744565202144183642972714927894809373657977142884508230107940618969817885214454558667008383628769508472963039551067432579488899853537410634175220583489733111861415444811663313479382343954977022383996370428051605169520337142916079300674356082855978456798812661535740008277913769809112114364617214398154457094899399
-e1=  377312346502536339265
-e2=  561236991551738188085
-
-
-p=libnum.gcd(n1,n2)
-q1=n1//p
-q2=n2//p
-#因为e phi不互素，需要用到中国剩余定理构建一个新的rsa
-#https://blog.csdn.net/luochen2436/article/details/128012748
-phi1=(p-1)*(q1-1)
-phi2=(p-1)*(q2-1)
-t=35
-c1=pow(c1,libnum.invmod(e1//35,phi1),n1)
-c2=pow(c2,libnum.invmod(e2//35,phi2),n2)
-m1=pow(c1,1,q1)
-m2=pow(c2,1,q2)
-m3=pow(c1*c2,1,p)
-c=libnum.solve_crt([m1,m2,m3],[q1,q2,p])
-phi=(q1-1)*(q2-1)
-m=pow(c,libnum.invmod(7,phi),q1*q2)
-print(m)
-m1=libnum.nroot(m,5)
-print(libnum.n2s(int(m1)))
-
-
-
Index: RSA_基础篇/P41-P60/P55. 威尔逊定理/解析.txt
===================================================================
diff --git a/RSA_基础篇/P41-P60/P55. 威尔逊定理/解析.txt b/RSA_基础篇/P41-P60/P55. 威尔逊定理/解析.txt
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P55. 威尔逊定理/解析.txt	
+++ /dev/null	
@@ -1,5 +0,0 @@
-
-1.先算出N
-2.因为pq相差过大，可以直接分解
-3.后面是威尔逊定理
-（p-1)！%p=-1
\ No newline at end of file
Index: RSA_整理/整理中/P46 ppq与ppp/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P46 ppq与ppp/题目.py b/RSA_整理/整理中/P46 ppq与ppp/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P46 ppq与ppp/题目.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-from gmpy2 import *
-from Crypto.Util.number import getPrime, long_to_bytes, bytes_to_long
-
-flag = b"flag{xxxxxx}"
-m = bytes_to_long(flag)
-p = getPrime(1024)
-q = getPrime(1024)
-e = 65537
-n = p*p*q
-t = p*p*p
-c = powmod(m, e, n)
-print(c)
-print(n)
-print(t)
-
-# 695811613220508521533410410135903763704380792345313822348335925535019364085287973391006658091756337941388790850576390425798691514904654108730064898721482454942897809486946732327567166790987988769649339266791907850313832700513155194190805272799105846921535231183458026312210254181900390502309417588847104213793231394168583827484833346266655392107254900891316034825295594615584454126662183967495486871019315836843964142146438253642093949267821928660254775556448682535996878217802620757735862588509198138308229216540912203307177130148261480033848867147610177292359480179993393430101548639801133574244188591918478576785400355882470444135385837723688465703459098247158590332167802098779963168624783522306380012451430590453130321881597629274617390265737278952430391455292129197120724233266227673065462001473529262207830010588159156853973215615518415224386700532070174251781750417203041543631328597659473610199473825400069638203715
-# 1103142672269025650462929198164640404493425942265040323371207998377200145961695641048087337404972402560194267711668479433180851107371884950953570911657090487495216386781924343363213345312692741516666557796484628501590914827387171553761258413087800091632213720047678961681727564158606220008125433169164157150198004730103285226539823741065685538894369776994256049396334124080247371292445543852118777801692107831636409684364527162627188519199064013189168290873007156380530155343171815296016451575866508168728518236121071519646489851701773457562537221387306293985011019040423572239157745630631563892081210964602524396761067561161422635793249097955070576281428534742447903449072401000345617064665752070967341863838984791405144869303448662169933201623421080650216122814985967041163663854812030159367202820911939914186148267664571396203542821594364250609009816872825447917845472311564561269905225280796615586133341770795940714518373
-# 1352157133681616199949626085859887520183044653936717410198546937928330648087119395184417755928058157424764679366526294873446661771336360719004981235527982326342186212780230888122434477779310176780131887691097470115061291877918798366484343129280364265571974776435297187299058517674913907506344826320352532394679559865918025267583173757096064690288877037701829014463065076789753953054738098985305066307636180043889030783678919407771611169741555877144593927382649961986384716532446388338376466150688150609936293316903617335385558920141250240529204636396228961938978325120385146208552506658553610353813640686759609897131817533377973931149277140553678119548578402674858651748611808600372129132750796909828079961432457264127651812438564831345298563698676305419952826466259729378236885089128224289161328570151277873778313473830713469181909893871432564345696475759124658962121070495959528237764331872929513704863754771030741820729657
Index: RSA_整理/整理中/dp泄露_常规/exp.py
===================================================================
diff --git a/RSA_整理/整理中/dp泄露_常规/exp.py b/RSA_整理/整理中/dp泄露_常规/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/dp泄露_常规/exp.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-
-n = 17954000555185130679232377513216924086370205717680723426279833171815673097846434355592747466782173529597978954062272371758852339605432963940809244445748900431763988392120156128524694217746804744076348205536430811607694098089294013508111154514184079159181563040241302764793111632189829652065825442796716027051750043654503172469553222784393034067341575558782690547449884992414106322578261286526556856377419622164651917718772498388922129465042492616904419638034789576380038341882418547113136903862482397767904921157094396562770484669239932933837196899640811033424030302285885080504355934919967693498648701839252087380477
-e = 65537
-c = 1808490145328726635638705291306162339133116115672167390186563455429486046847680827004544020052978814401354685508506555963361065725012891622174617670820924531959433674273579973778657669162210657120785539629874456938159379512635932223403818177582242406964621317531188027900758868453176575753681627336133481701182056262584118645398172089436811174776978418919803975809158758707062473122656821152108292060156091196577573172937093806159669057467094718771367509856968694209472630329096814023864642219783061245777457366202879949123915168571990229277326042767587009623951348541055835347386485900505749475571895673653225741649
-dp = 114993440308125678369350484461242628405806013372930792337329972720600942891053460367721272956155528263465552939386621554396883112994907299126303463171544968629898544811159986442249990975328659373544491636958873255689808151391606942912468529923159009459712396428051292828093059494024457367637991626193487727331
-
-for i in range(1, 65537):
-    p = (dp * e - 1) // i + 1
-    if n % p == 0:
-        q = n // p
-        break
-
-print(q)
-phi_n = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi_n)
-m = pow(c, d, n)
-print(m)
-flag = libnum.n2s(int(m)).decode()
-print(flag)
-
Index: RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/exp.py b/RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P36 离散对数pow(m,flag,n)/exp.py	
+++ /dev/null	
@@ -1,12 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-
-m= 159288671018830898156155351952186977642819454341811868237859009749383960869982923115380878290375192847504545108933927464025163205891819917678534983817309
-c= 12714803532028941243809606974437987862326521262004726834999494702689747253925210908627215296516631899337657950072189903034513687791841244487330214554784973
-
-n = 2 ** 512
-
-flag=sympy.discrete_log(n,c,m)
-print(flag)
-print(libnum.n2s(int(flag)))
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/题目.py b/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P57.攻防世界simpleRSA/题目.py	
+++ /dev/null	
@@ -1,51 +0,0 @@
-#!/usr/bin/env python3.9
-# -*- coding: utf-8 -*-
-import gmpy2
-from Crypto.Util.number import getPrime, isPrime, bytes_to_long
-from secret import FLAG, E1, E2, P, Q1, Q2
-
-
-def next_prime(num: int) -> int:
-    num = num + 2 if num % 2 else num + 1
-    while not isPrime(num):
-        num += 2
-    return num
-
-p = getPrime(1024)
-q = next_prime(getPrime(16) * p + 38219)
-n = p * q
-c = pow(E1, 65537, n)
-print(f'n = {n}')
-print(f'c = {c}')
-# n = 1605247600724752598798254639224215706171506359654961357324428027985787942008103766562745464838961569081446916113769517713344420113584254259000172572811154232107339480903672251992191997458469905064423618888336088652352540882576826988355783159237971043770132628344798937353150930071309347972804118952814447576207066147031238749098842662046825743988208813903138796789940911515825517078554074496474819128789835309636804325132602557092847746454786387067599510769382078521691609970320528531270474091713477040343897269903489441410062592732302402854035415438078656688806905350495825334584533345448091335565792091890185673190424063
-# c = 751639057610677013264061431434189083017589908118307247217007533938435229431015858783222167911772848893015518607229280589985711010766459396989232072512314594917029375221335361209036112742388866873824163350886610514973038316512032459352053158417705406031466332440378871927174731975794579894912999936641163063898365134788537389162378185448090279397717831977803284480743612393591614284972981435749362255654561121758163485884075260156288337176713756471879489767416836868661153693157792733142765671887792303181376620864506386820826866340907593080654521498766421056474652652337037121881207188033108746890998208582406826010121861
-
-assert E2.bit_length() == 69
-ns = [getPrime(1024) * getPrime(1024) for _ in range(3)]
-cs = [pow(E2, 89, n) for n in ns]
-print(f'ns = {ns}')
-print(f'cs = {cs}')
-# ns = [15863230586500684911356384742123404120213699052018048588650392009927565369685497256344682150189923131009586323640507773706997704860898682946308031020361302334248895233255911348365179153799197341744863134926804603973507415697810440916305092395180382239729550833607847524005391137474497849077097574452115379368463540087172800902210822143687014813631366360652583216269138116785489485772437870528892032119729929607857459621078790511144060710035933887337208301078892163837203412081114510143406013892393607932596921308889058909544584619676380766485493114814753878272881866907210235681877689493671668534251778397658670518117, 14144098469438619358682652828507744381697293556670717685553585719665002440476256008471235313826051740009083510860714991201047915737216102220242621674841600987122005914542061963618272275986835928673920375768272390912778741502655909281390948606467847118377641357547931472588836726339758576038273820470879637555458446243401248151675266602656677360819563744765522495640821496694918515669243614141704744848980746101569785439728585144841655665959389460512628800782742764147773150430552859331269667626942993392101897661719871375721143240270211821269260950380944670195863016621594387236339317938305273510719419578308449465183, 27563822879593503938377821960427219022565215631856333510782568496016547757945464794632272818101891677705256471714805217606503652132995136255720639088424576003650628211271025648183600635145895528466199068640094470078526413324708028578289949241288828542143203769199399500669311878391255837977932634772778594526940501234736059441483897017015324765266787399950699732518347518591167932031031320265136158304460199654008895095274754918153773566824931440342525688741289235153882699461549523425169846266597156773535163599640189457171272058311480951820887261040891344076039474315985825984444520336790670313179493074014037981261]
-# cs = [3833095607830862948079097323254872789586576953317671099752083261949616608759231291050566542764984974722790226120399722937104503590740358249900089784508490830379531632752169777949200718567033018577184658177019404903817920024468923715441355404672443007723525750768430895425376124679225715687382380114628103058312176343693900115638265002657622618744666247132114654135429040069316368839938881716554901593031901272992940200484460436193699175500376368456706998564064693820008778900344357745691652875500810447147088715289581351501876012044611990972521570253106671158207677490849249612002954497927762168699886110455354481924, 1502420121177211156091634258259634977709023894278792755694473756163084431123774101512866316989917922052023168401167212284219907272528117024670443698990238243030221117004372456475521502350404137469088570170885409265567084376069256924135270283335242133163303599239181417949980292944203204296598188175632723968779672994090788585343302473442389865459398142634104331743517384589200789331489394375604801951994831647339839112698394141328178967516636452592385248135340133712522135715943787590172334743893259621909532456281362868290556461907936774231166936915669816509378419892149164552548131776979706381641477878931403040942, 8992204063713908492214256291861339175525948946919629972908439132005643626148678347198381531633907182877152728077958345519083406637446972079387161726967295886447791613166577391233866583354793842121902234644830640050181130381996083089350911224037154798259291124104894554037604500881250119806371348673833105103600782286898276354573884788251542211434143476774391457587885772379990104835187104619922442613860682792470389490804228050671124495925536024571104944112397143299499508504917890140939438891891453283594000764399193028606955089853654071198909973555844004685149713774167524224100487937899126480545681565581673958854]
-
-qq = getPrime(1024)
-nn = P * qq
-qqq = qq >> 460 << 460
-print(f'nn = {nn}')
-print(f'qqq = {qqq}')
-# nn = 16851735797771199659625936797279158526379741298692339786049494329385618191510929735113284926125682522862667382938603116481087115598324232020838136618518964343752653000145611092980612556947954728339508416646035295651852840099205127587606898235203114875942637900167644300657599966420459187131027117268004042708998239798434578246497419547543598779697909298102358128788120332794123690714647499091326245022977970510468925837363300545900657420134894815246189043375619879915523611890538142257042753868665844692029124229028056547096764320547579965641276151760507921199827910445919017775913411823263307923216323527883262438117
-# qqq = 121042531930820997492656296084544616958724191434895945419858099204426898711413526806300854553993738803031497438495403291406481997877273916883918253302909196533823945327277312672931819555344139777992801106437643790498379469530787985051569590331291422592393540391481519004782904598710037907420679190942964514816
-
-assert len(FLAG) == 42
-n1 = P * Q1
-n2 = P * Q2
-c1 = pow(bytes_to_long(FLAG), E1, n1)
-c2 = pow(bytes_to_long(FLAG), E2, n2)
-print(f'n1 = {n1}')
-print(f'n2 = {n2}')
-print(f'c1 = {c1}')
-print(f'c2 = {c2}')
-# n1 = 21655617838358037895534605162358784326495251462447218485102155997156394132443891540203860915433559917314267455046844360743623050975083617915806922096697304603878134295964650430393375225792781804726292460923708890722827436552209016368047420993613497196059326374616217655625810171080545267058266278112647715784756433895809757917070401895613168910166812566545593405362953487807840539425383123369842741821260523005208479361484891762714749721683834754601596796707669718084343845276793153649005628590896279281956588607062999398889314240295073524688108299345609307659091936270255367762936542565961639163236594456862919813549
-# n2 = 24623016338698579967431781680200075706241014384066250660360949684385831604822817314457973559632215801205780786144608311361063622813017396858888436529116737754653067203843306015767091585697803364656624926853551997229897087731298797904208292585562517602132663331748784390752958757661484560335406769204491939879324079089140420467301773366050084810282369044622442784113688062220370531522036512803461607049619641336524486507388232280683726065679295742456158606213294533956580462863488082028563360006966912264908424680686577344549034033470952036766850596897062924137344079889301948258438680545785139118107899367307031396309
-# c1 = 2615722342860373905833491925692465899705229373785773622118746270300793647098821993550686581418882518204094299812033719020077509270290007615866572202192731169538843513634106977827187688709725198643481375562114294032637211892276591506759075653224150064709644522873824736707734614347484224826380423111005274801291329132431269949575630918992520949095837680436317128676927389692790957195674310219740918585437793016218702207192925330821165126647260859644876583452851011163136097317885847756944279214149072452930036614703451352331567857453770020626414948005358547089607480508274005888648569717750523094342973767148059329557
-# c2 = 6769301750070285366235237940904276375318319174100507184855293529277737253672792851212185236735819718282816927603167670154115730023644681563602020732801002035524276894497009910595468459369997765552682404281557968383413458466181053253824257764740656801662020120125474240770889092605770532420770257017137747744565202144183642972714927894809373657977142884508230107940618969817885214454558667008383628769508472963039551067432579488899853537410634175220583489733111861415444811663313479382343954977022383996370428051605169520337142916079300674356082855978456798812661535740008277913769809112114364617214398154457094899399
Index: RSA_整理/整理中/NC不互素/exp.py
===================================================================
diff --git a/RSA_整理/整理中/NC不互素/exp.py b/RSA_整理/整理中/NC不互素/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/NC不互素/exp.py	
+++ /dev/null	
@@ -1,15 +0,0 @@
-import gmpy2
-import libnum
-
-n= 17483770234884142847456666352881633858141093959507406489438832657811880348544517317886235174580364402693136945332374390980468053811072776178864091768180166876221659675217180437370214612891072604883134760061297589091497848817124108984000363937311663848944163413212471490943544013729793140932153932722897244086933590069840634776188515344586162299372418033246808686151342011111253737930983815234958893340565218112060881945578082230607232140507764864201490541905951630320920698022711376246588071419161730102709168468030659029885654176255175171297966568656762020277408125453099365768353256668477237850688484624314512104837
-c= 7756412419736534306267281137444055853970895832135119947012680801728368453412511898214833061840593207999925914861147437172775590961864429038538036044372917920901477955515874667827839423934284921039793035016663689671993982388770276121107464667278667672531024583000281458905472417802844581894023365347884859881069456113169832521363450118618605256637768282911914962650680421804219666243987097956602779278718190490013281291054728762585198175600573970428128728004843715806947600331454660689313029334295614495527134693874900019066579958992524583794853232795458791635025434351607697221423673529269965794629214578773549342054
-e= 65537
-
-p = gmpy2.gcd(n, c)
-q = n // p
-assert p * q == n
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-m = pow(c, d, n)
-m1 = m // p
-print(libnum.n2s(int(m1)))
Index: RSA_整理/整理中/P52 告诉ed，未知n/test.py
===================================================================
diff --git a/RSA_整理/整理中/P52 告诉ed，未知n/test.py b/RSA_整理/整理中/P52 告诉ed，未知n/test.py
deleted file mode 100644
--- a/RSA_整理/整理中/P52 告诉ed，未知n/test.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-import gmpy2
-import libnum
-import sympy
-e= 65537
-d= 101594869720546931320854078122074713525440214937312570093875805795442939419150687426541696295674878779299548914655788437314309125616957909033562280929717866606065779817497302315467363623403872305239280119140790162548715397120510561988704976218698155764361497527906154413313848193338028881708170081388311050841
-c= 35017095079265838979734409416685141495410012751608421171984571206906907112637156478970636762948745062984603962185272983251479813367054508240145465939059405315210753494552412701642616337156914318259643364976440231342251176780836484538401507518406607672852280282429279213480081726239103353793034991628250368074
-
-ed1=e*d-1
-for k in range(65537,1,-1):
-
-        if ed1 % k == 0:
-            phi = ed1 // k
-            p1,s1 = gmpy2.iroot(phi, 2)
-            p = sympy.prevprime(p1)
-            q = gmpy2.next_prime(p1)
-            if phi % (q - 1) ==0:
-                break
-
-
-n=p*q
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
Index: RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/题目.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/题目.py b/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/题目.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-from Crypto.Util.number import *
-import uuid
-flag = 'flag{'+str(uuid.uuid4())+"}"
-flag=flag.encode()
-import gmpy2
-
-p = getPrime(512)
-p1 = gmpy2.next_prime(p)
-q= getPrime(512)
-q1= gmpy2.next_prime(q)
-
-n = p*q*p1*q1
-e = 0x10001
-m = bytes_to_long(flag)
-c = pow(m,e,n)
-print("c=",c)
-print("n=",n)
-c= 9949542934673249601822379710110536682375274333294212429688584989332571435120688962792756767799023906332576991820877786082142174075762351091472858450420524999000438499038246804892307015253501997557003507879115010365751701766309706931191167213901685725286428926861333201965004869326873632404052661985741631906479109023390455968199954361183959446992180809970004376995201084933073767278979855530735756096072840384641334181432769063314242300512881491103946010394543208395998872730145780806025267971492301568490427293141120807461902093932052106811061648537600125019831876736538658644780471805555396705702634885360657660235
-n= 14775235844515544576473611382698284004133861994231391972299917039113871334718108546717938305388267655285590882177982603418940337565701637106925368292676630781520319110700106306029357476649553934570683454139537943486518666101218072140043084858740684805876092240053196287287330188619164273915005792335974297620475140547828827559062269649682393716241864595363863867012095487700403514116433664086346056485373014640655316422588972338531776150881686013955605480910803097642414475309381073364181798620439167561641939844350252283317699576359402716770493658380425200603092475286870303441165147435503582004675788584686434009043
Index: RSA_基础篇/P01-P20/P17 d低位攻击/出题脚本.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P17 d低位攻击/出题脚本.py b/RSA_基础篇/P01-P20/P17 d低位攻击/出题脚本.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P17 d低位攻击/出题脚本.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-while True:
-    p = libnum.generate_prime(512)
-    q = libnum.generate_prime(512)
-    n = p * q
-    phi_n = (p - 1) * (q - 1)
-    e = 3
-    if gmpy2.gcd(e, phi_n) == 1:
-        break
-d = gmpy2.invert(e, phi_n)
-d1 = d & ((1 << 486) - 1)
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-print("d1=", d)
Index: RSA_整理/整理中/低加密指数_e=3/题目.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=3/题目.py b/RSA_整理/整理中/低加密指数_e=3/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=3/题目.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-import libnum
-import gmpy2
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-print(gmpy2.bit_length(m ** 3))
-while True:
-    p = libnum.generate_prime(504)
-    q = libnum.generate_prime(504)
-    n = p * q
-    phi_n = (p - 1) * (q - 1)
-    e = 3
-    if gmpy2.gcd(e, phi_n) == 1 and  phi_n%e !=0:
-        break
-
-c = pow(m, e, n)
-print("n=", n)
-print("e=", e)
-print("c=", c)
\ No newline at end of file
Index: RSA_整理/整理中/密钥_OAEP/exp.py
===================================================================
diff --git a/RSA_整理/整理中/密钥_OAEP/exp.py b/RSA_整理/整理中/密钥_OAEP/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/密钥_OAEP/exp.py	
+++ /dev/null	
@@ -1,13 +0,0 @@
-from Crypto.PublicKey import RSA
-from Crypto.Cipher import PKCS1_OAEP
-import libnum
-with open("flag2.pem", 'rb') as f:
-    ciphertext = f.read()
-with open("prikey2.pem", 'rb') as f:
-    key = f.read()
-
-rsakey = RSA.importKey(key)
-cipher = PKCS1_OAEP.new(rsakey)
-message = cipher.decrypt(ciphertext)
-print(message)
-# b'flag{e5dca96d-f0cb-4bde-b657-2e2589958557}'
\ No newline at end of file
Index: RSA_整理/整理中/低加密指数_e=1/e=1.py
===================================================================
diff --git a/RSA_整理/整理中/低加密指数_e=1/e=1.py b/RSA_整理/整理中/低加密指数_e=1/e=1.py
deleted file mode 100644
--- a/RSA_整理/整理中/低加密指数_e=1/e=1.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-
-p = libnum.generate_prime(512)
-q = libnum.generate_prime(512)
-n = p * q
-e = 1
-c = pow(m, e, n)
-print("n=", n)
-print("c=", c)
-print("e=", e)
-n = 90981495617756764768563887456121485632852821294992273406540426689270512099459758619024797604428497371505761088482731691740604544236399875476209161759486542642982460755167111605224305056733441714037861907483938283623389941146434398522162360139652831844867722242479359748886192684447486989079947504196734648421
-c = 56006392793403067781861231386277942050474101531963376999457063633948500765747587998496106575433840765
Index: RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/题目.py
===================================================================
diff --git a/RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/题目.py b/RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/题目.py
deleted file mode 100644
--- a/RSA_收集篇/1.3tefanie博客/P22 L=3d1-2d2/题目.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-from Crypto.Util.number import *
-from gmpy2 import invert,gcd
-
-flag = b'###'
-p = getPrime(1024)
-q = getPrime(1024)
-n = p*q
-fi = (p-1)*(q-1)
-e1 = getPrime(200)
-e2 = getPrime(200)
-e3 = 65537
-
-c = pow(bytes_to_long(flag),e3,n)
-print(n)
-print(c)
-print(e1,e2)
-l = 3*invert(e1,fi) - 2*invert(e2,fi)
-print(l)
-
-# 17292721978983607267718923718634305548293925536048457222972976121289309885759139060295886920407164363819420901895875254399359595973394431387846360520765205327144836799906135362452257623307102022291445029628782238521405931409291229248463837617401580600173077583943171896679232904981458275862028378237023986028001153676164561182371356596898184187590184455478690318324741581571554812742647463631545337268021329984154569576370352598120197605991949144443013468206983245554057352904863889632138060467077134384662793998998572664873312208265022794676616426412680890902293364368502643048737873693953075550383723675285227616397
-# 11262957726526687856651103086915410919363781583740281242541133435895684557872848373183598908277896372575220350655871410741973457011773621514911795457547247638143385931212189807332453016648124312325964078502610642954492042568898679870975716747418361926689045230000169564315065425780404351118159843362139039288762708906878572375208700123570919174225712073740951890433433880474093154078203775671775455655269403226928059841306122415423576661710193478093980413703925973076259628618599441045577652991187944026246969418191789705042820179834443061730873779638409826451944533113953353770983794728402615949910204363918628794938
-# 863730506311496380048464177431832856757231887750545766714043 1150630598011230266913144827508479988054069316592596632718511
-# -9754612898628159268860797664298712620277301422822838483994027820600830106601927950168099205655730606742179276931554297578144525517754502663164605727502538787530579445688270704975958798751701673102593289201022186939320416269904242044099057518099075087472668747599123871745309839519713586137376001719593282486886331696055431287073705776659579254318080838375798526393908110868567114766287332516172333848631716689972944168953061446251353501793569920572432606314353875375139368870574672253417182827525543752158266074722259377017516428042286015114715209304254818046235283075281762932451264597218529734117472816995494099941
-
Index: RSA_整理/整理中/N不互素_两次加密/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N不互素_两次加密/exp.py b/RSA_整理/整理中/N不互素_两次加密/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N不互素_两次加密/exp.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-
-import libnum
-e = 65537
-n1= 150385265883022810920531550970630108400430543818471500891590140199707649995501117348066774775184165792224937991344433983957573653027874840489304848195497009423451167471760779377182089223798345066725118315308855105107141561304474307498166446141583179467605566320989536938720233358985573268575155276402991154317
-n2= 106498882115557018189370273061316655460477950197978282009613026952684980916076348240470149979526496634980863495388879465301117930724847841296622956930409511935157610009638964532186481476533717433545160920482713004034351440256533377478069533597494614250846195509814711493490656049090557995367091398042847809291
-c = 34561944952062850364382557830751736854391559039860664899222552151184701276317668701704663262936204576039631410697930325961372518855538296824868114627687821333101614460575579760886055584340850598581117306570532634571689119867984167113417965053197028139669757572272462186421257144438230028016380359716460402816
-
-p=libnum.gcd(n2,n1)
-q2=n2//p
-phi2=(p-1)*(q2-1)
-d2=libnum.invmod(e,phi2)
-c=pow(c,d2,n2)
-
-q1=n1//p
-phi1=(p-1)*(q1-1)
-d1=libnum.invmod(e,phi1)
-m=pow(c,d1,n1)
-print(libnum.n2s(m))
-
-
Index: RSA_整理/整理中/N分解_N分解3个素数/出题.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_N分解3个素数/出题.py b/RSA_整理/整理中/N分解_N分解3个素数/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_N分解3个素数/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = gmpy2.next_prime(p)
-r = libnum.generate_prime(512)
-n = p * q * r
-e = 65537
-c = pow(m, e, n)
-print("r=", r)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-r = 12328943069972158868300333965019293732240349172933398867374450193780676916633106046545397891902123683693837126404908611670219604587587151306224914062663729
-n = 928445951911850156618541782850215900925329423880533465612155142015978599609287623859912813317551629221695490535012732781489396534420011145723987610606038091488823086647363964394753700158320900867101659445170118179077194271099520502633316318889163873291574934282498061117736456183503867870294570083013883365868242889035609602940685335912371326827533418614992221705810476710807373254363162373986374486325350746366851935451369892949745302442034805629514003196071631
-e = 65537
-c = 327716655224470059950709685055600963837116578216483343492948888372401723689223347212508532985781828794786448842515029515358422017875793926582832247025212149474404973170422295165602666360784347416812528617973764432916955654602356835327769633635513894485943553309743509322858937973710628023758816806471875016815994664897320150855163109437521642800230902661034555151514311149333258071668655344069451897282357234220538922127548822361859943829665459953651351620958628
Index: RSA_基础篇/P61-P80/P61.求公约数+2^16/题目.py
===================================================================
diff --git a/RSA_基础篇/P61-P80/P61.求公约数+2^16/题目.py b/RSA_基础篇/P61-P80/P61.求公约数+2^16/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P61-P80/P61.求公约数+2^16/题目.py	
+++ /dev/null	
@@ -1,29 +0,0 @@
-
-import libnum
-import gmpy2
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-while 1:
-    p = libnum.generate_prime(512)
-    q = libnum.generate_prime(512)
-    if p>q:
-        break
-assert p > q
-n = p*q
-e = 65536  #2**16
-num1 = (pow(p,e,n)-pow(q,e,n)) % n
-num2 = pow(p-q,e,n)
-c = pow(m,e,n)
-
-print("n1=",num1)
-print("n2=",num2)
-print("n=",n)
-print("c=",c)
-
-
-n1= 83758575069905304067768481601753574998130100929563488113032489538841228437614038849648582947130531285620158614235448872871127520586959431556641650448541549150788998002451811261912231543271446644060890282133258667768706029719891178262570370575285298224152119578339390800107889334951078164762184333747467380888
-n2= 9831276541826816789368451633385540087371496489313852209076031193730848235018296111252032115432949863700248359574145846899107616306788202793767305144740541785563939136198331219646159758474239920030391929508514991198073422146216586741498057527918329570942088288077450777684683107307014975767032857456318358064
-n= 140856289298906159437739029545347610108994755491239167745641832705764858521348872395929019274279252591208014041777481788324765489375807836151544773947219166392455703715770608717639845195855883468725012423798709748849187737712690267229995903190368828458681379150127037925721096918609588453047678178189307880401
-c= 53100585481275556435409181501721693813984862333551455563238323458270043603912938367431862281708352595284147129805506010649262433103290734582315903650224375708892586331205036195752388648357117325957081723405359096400361691896699396085109653734337210068638841322039054338712409255759760189138139488615812969337
Index: RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/exp3.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/exp3.py b/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/exp3.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/1.pqp1q1/exp3.py	
+++ /dev/null	
@@ -1,42 +0,0 @@
-
-
-e = 0x10001
-c= 9949542934673249601822379710110536682375274333294212429688584989332571435120688962792756767799023906332576991820877786082142174075762351091472858450420524999000438499038246804892307015253501997557003507879115010365751701766309706931191167213901685725286428926861333201965004869326873632404052661985741631906479109023390455968199954361183959446992180809970004376995201084933073767278979855530735756096072840384641334181432769063314242300512881491103946010394543208395998872730145780806025267971492301568490427293141120807461902093932052106811061648537600125019831876736538658644780471805555396705702634885360657660235
-n= 14775235844515544576473611382698284004133861994231391972299917039113871334718108546717938305388267655285590882177982603418940337565701637106925368292676630781520319110700106306029357476649553934570683454139537943486518666101218072140043084858740684805876092240053196287287330188619164273915005792335974297620475140547828827559062269649682393716241864595363863867012095487700403514116433664086346056485373014640655316422588972338531776150881686013955605480910803097642414475309381073364181798620439167561641939844350252283317699576359402716770493658380425200603092475286870303441165147435503582004675788584686434009043
-
-import gmpy2
-import libnum
-
-a=gmpy2.iroot(n,2)[0]
-lt=[]
-while 1:
-    a+=1
-    b2=pow(a,2)-n
-    if gmpy2.is_square(b2):
-        tmp=[]
-        b=gmpy2.iroot(b2,2)[0]
-        x1=a-b
-        x2=a+b
-        tmp.append(int(x1))
-        tmp.append(int(x2))
-        lt.append(tmp)
-    if len(lt)>=2:
-        break
-print(lt)
-assert lt[0][1]*lt[0][0]==n
-assert lt[1][1]*lt[1][0]==n
-p=libnum.gcd(lt[0][0],lt[1][0])
-print(p)
-print(gmpy2.is_prime(p))
-p1=gmpy2.next_prime(p)
-print(p1)
-q=libnum.gcd(lt[0][1],lt[1][0])
-print(q)
-print(gmpy2.is_prime(q))
-q1=gmpy2.next_prime(q)
-print(q1)
-print(n==p*p1*q*q1)
-phi=(p-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,p)
-print(libnum.n2s(int(m)))
Index: RSA_收集篇/99.不会做/测试/111122.py
===================================================================
diff --git a/RSA_收集篇/99.不会做/测试/111122.py b/RSA_收集篇/99.不会做/测试/111122.py
deleted file mode 100644
--- a/RSA_收集篇/99.不会做/测试/111122.py	
+++ /dev/null	
@@ -1,31 +0,0 @@
-# from secret import flag
-import gmpy2
-from Crypto.Util.number import *
-
-p = getPrime(512)
-q = p + 2
-while True:
-    if isPrime(q):
-       break
-    q += 2
-print(p)
-print(q)
-n = p * q
-e = 0x10001
-flag=b'12dddddddddddd33'
-m = bytes_to_long(flag)
-c = pow(m, e, n)
-
-import gmpy2
-p1,s=gmpy2.iroot(n,2)
-p=gmpy2.next_prime(p1)
-q=n//p
-print(n==p*q)
-
-
-n=177920246731961984692844675027794269351974655978633360958792135066811113973204490061355452695689806058893015396266267360582784890984276521557441293993864861033228213124084744486810727223671447408512757938978007969098885482833084907318019060009833379873711469730284507118386587060518773729384368339738258068433
-import gmpy2
-p1,s=gmpy2.iroot(n,2)
-p=gmpy2.next_prime(p1)
-q=n//p
-print(n==p*q)
\ No newline at end of file
Index: RSA_基础篇/P41-P60/P60. 障眼法/题目.py
===================================================================
diff --git a/RSA_基础篇/P41-P60/P60. 障眼法/题目.py b/RSA_基础篇/P41-P60/P60. 障眼法/题目.py
deleted file mode 100644
--- a/RSA_基础篇/P41-P60/P60. 障眼法/题目.py	
+++ /dev/null	
@@ -1,46 +0,0 @@
-from Crypto.Util.number import *
-import sympy
-from flag import flag
-
-
-a=getPrime(512)
-p=sympy.nextprime(13*a)
-q=sympy.prevprime(25*a)
-number2=p*q
-
-def crypto01(number1, number2, number3):
-    number4 = 1
-    while number2 > 0:
-        if number2 % 2: 
-            number4 = (number4 * number1) % number3
-        number1 = number1 ** 2 % number3
-        number2 //= 2
-    return number4
-def crypto02(number1, number2):
-    number3 = number1
-    number4 = number2
-    giao = 1
-    giaogiao = 0
-    while number4 > 0:
-        number7 = number3 // number4
-        giao, giaogiao = giaogiao, giao - giaogiao*number7
-        number3, number4 = number4, number3 - number4*number7
-    while giao<0:
-        giao = giao + number2
-    return giao
-def crypto03(number1, number2, number3):
-    number4 = crypto01(number3, number1, number2)
-    return number4
-def crypto05(number1,number2):
-    return pow(number1,0xe18e,number2)
-
-number1 = 6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683
-number2 = 20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947
-
-number3 = int.from_bytes(flag[0:19].encode("utf-8"), "big")
-number4 = int.from_bytes(flag[19:39].encode("utf-8"), "big")
-
-print(crypto03(number1, number2, number3))
-print(crypto05(number4,number2))
-#6624758244437183700228793390575387439910775985543869953485120951825790403986028668723069396276896827302706342862776605008038149721097476152863529945095435498809442643082504012461883786296234960634593997098236558840899107452647003306820097771301898479134315680273315445282673421302058215601162967617943836306076
-#204384474875628990804496315735508023717499220909413449050868658084284187670628949761107184746708810539920536825856744947995442111688188562682921193868294477052992835394998910706435735040133361347697720913541458302074252626700854595868437809272878960638744881154520946183933043843588964174947340240510756356766
Index: RSA_整理/整理中/威尔逊定理_中国剩余定理/exp.py
===================================================================
diff --git a/RSA_整理/整理中/威尔逊定理_中国剩余定理/exp.py b/RSA_整理/整理中/威尔逊定理_中国剩余定理/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/威尔逊定理_中国剩余定理/exp.py	
+++ /dev/null	
@@ -1,33 +0,0 @@
-
-
-a = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169
-c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810
-e = 65537
-import gmpy2
-import libnum
-
-p1=libnum.nroot(a,2)
-while a%p1!=0:
-    p1=gmpy2.next_prime(p1)
-q=int(p1)
-p=a//q
-print(a==p*q)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,a)
-print(m)
-
-m1=m*libnum.invmod(-1,p)%p
-
-for i in range(p,q):
-    print(i)
-    m=m*i%a
-m2=m*libnum.invmod(-1,q)%q
-
-mm=libnum.solve_crt([m1,m2],[p,q])
-print(mm)
-print(libnum.n2s(int(mm)))
-
-
-
-
Index: RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/rsa34.py
===================================================================
diff --git a/RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/rsa34.py b/RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/rsa34.py
deleted file mode 100644
--- a/RSA_整理/整理中/P70 c=(pow(g,p,nn)pow(m,n,nn))%(nn)/rsa34.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-from Crypto.Util.number import *
-import libnum
-import os
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-p = getPrime(1024)
-q = getPrime(1024)
-n = p*q
-g = n+1
-m = bytes_to_long(flag.encode()+os.urandom(80))
-assert m < n
-c=(pow(g,p,n*n)*pow(m,n,n*n))%(n*n)
-print("c="+str(c))
-print("n="+str(n))
-print("hint="+str(pow(m,n,n*n)))
-c=905172784418873713732700558989181996325888648419514448597522212684278398492968953662897010162459720878338826781745670048648503779257335410151406677417672179943629405238436257761900874779751323685645487171118941725247670177508835630481691386000018298279603171853869779484660079539212620112828361078884675672318207140662942807891978333217323903614109508047283464815109670669749578130718034005367412888820840187084195735110169860263051517794259176586440054603489419713260249482251876820886895812965753980629409003368980726873547620586673084434595344022526350554435683286970476385148137233032328326069460609647990748281965659109823359063464740041165085947578112934084444546578892243586755065620072226406559570695996411425392411720235577924087686144818222754504180459012372066335490682513709248974145951032855864423898924290178930441424519435513069223761613624946714386744074724873963316031171129368661130034527289076196976788125801482545219357263063182186736412009825867346742491995907489707140750618968084303409140459259029941006631812240535300916608964267286900303263889610322380698382293583754970203768704399696974094327426470370167364635490705190916409115979541420542043314273903341551693854266457846024456417034657152355702425585484
-n=31016237680452528704873191037134067101278463443982527817436364102617348902532256530861676448201075746827834542956506366698825423422483893189352329256671487874082156052214641945947096606313380306737789848779237364845323351377115674248947766919676433584677299950176564986961205465375287101064714101688614722710223640975579844338149091130387005331087496684778954404065614342428013697081893585722086127239864386794351634597573229819179116430105000422883664131016949507449532791494372407636576472748173367100782468874221920267631198486913451692621404826280274339031449224108911511601369385962449647906065004132890110315191
-hint=218207395768478557471199767194094043876724592138588774570908990468428950605149285379792082880818082732758456157750106025376469170078549528685829802378925626144504311460262428580920405672341673977468406004167108795444419994568528664898153779169619242440508681759186017153711527661283166710768331441106506554151407089758879246657121059234157255083964973037628491442405875716725032650227392405274334487258752469294042631778616110618699764229701945343859239888793305620960480463538257644020487517361371098883002526539902459754433571144717491292105967141861141822042443693629090462448712500532607336928502017089154250653979878646143264568658353591859972526675416599548031535473192600081383998056552022089590117980379324695272326190935495337967240049776307127889831165855695782293908854273381915760832267426532554157982310401664106552217062642147611812863526763087374157217764323065841672272539622812472535192439927792375314310035581298527907756661627438862033009575874759150646763139825124510422557834829003090593326781196144175844093709071945019402686845259582266824033566943227461354561480721320603363363818423382582406857246764822653289982541708423069636397274899545161162174930897008316838239371094314997267623578517028431314845245239
Index: RSA_整理/整理中/解方程_q=inverse(e, p)/出题.py
===================================================================
diff --git a/RSA_整理/整理中/解方程_q=inverse(e, p)/出题.py b/RSA_整理/整理中/解方程_q=inverse(e, p)/出题.py
deleted file mode 100644
--- a/RSA_整理/整理中/解方程_q=inverse(e, p)/出题.py	
+++ /dev/null	
@@ -1,18 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-e = 65537
-
-
-while 1:
-    p = libnum.generate_prime(512)
-    q = libnum.invmod(e, p)
-    if gmpy2.is_prime(q):
-        break
-n=p*q
-c=pow(m,e,n)
-print("n=",n)
-print("c=",c)
\ No newline at end of file
Index: RSA_整理/整理中/P76 l=d+p+q/题目.py
===================================================================
diff --git a/RSA_整理/整理中/P76 l=d+p+q/题目.py b/RSA_整理/整理中/P76 l=d+p+q/题目.py
deleted file mode 100644
--- a/RSA_整理/整理中/P76 l=d+p+q/题目.py	
+++ /dev/null	
@@ -1,17 +0,0 @@
-
-import libnum
-import uuid
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m=libnum.s2n(flag)
-p=libnum.generate_prime(512)
-q=libnum.generate_prime(512)
-
-e = 0x10001
-n = p * q
-c = pow(m, e, n)
-d=libnum.invmod(e,(p-1)*(q-1))
-leak = d+p+q
-print(f'{e = }')
-print(f'{c = }')
-print(f'{n = }')
-print(f'{leak = }')
Index: RSA_基础篇/P01-P20/P09 dpdq/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P09 dpdq/出题.py b/RSA_基础篇/P01-P20/P09 dpdq/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P09 dpdq/出题.py	
+++ /dev/null	
@@ -1,23 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-print(flag)
-m = libnum.s2n(flag)
-p = libnum.generate_prime(256)
-q = libnum.generate_prime(256)
-e = 65537
-n = p * q
-phi = (p - 1) * (q - 1)
-d = gmpy2.invert(e, phi)
-print("d=", d)
-dp = d % (p - 1)
-dq = d % (q - 1)
-c = pow(m, e, n)
-
-print("p=", p)
-print("q=", q)
-print("c=", c)
-print("dp=", dp)
-print("dq=", dq)
Index: RSA_基础篇/P01-P20/P11 n分解3个素数/出题.py
===================================================================
diff --git a/RSA_基础篇/P01-P20/P11 n分解3个素数/出题.py b/RSA_基础篇/P01-P20/P11 n分解3个素数/出题.py
deleted file mode 100644
--- a/RSA_基础篇/P01-P20/P11 n分解3个素数/出题.py	
+++ /dev/null	
@@ -1,20 +0,0 @@
-import gmpy2
-import libnum
-import uuid
-
-flag = "flag{" + str(uuid.uuid4()) + "}"
-m = libnum.s2n(flag)
-p = libnum.generate_prime(512)
-q = gmpy2.next_prime(p)
-r = libnum.generate_prime(512)
-n = p * q * r
-e = 65537
-c = pow(m, e, n)
-print("r=", r)
-print("n=", n)
-print("e=", e)
-print("c=", c)
-r = 12328943069972158868300333965019293732240349172933398867374450193780676916633106046545397891902123683693837126404908611670219604587587151306224914062663729
-n = 928445951911850156618541782850215900925329423880533465612155142015978599609287623859912813317551629221695490535012732781489396534420011145723987610606038091488823086647363964394753700158320900867101659445170118179077194271099520502633316318889163873291574934282498061117736456183503867870294570083013883365868242889035609602940685335912371326827533418614992221705810476710807373254363162373986374486325350746366851935451369892949745302442034805629514003196071631
-e = 65537
-c = 327716655224470059950709685055600963837116578216483343492948888372401723689223347212508532985781828794786448842515029515358422017875793926582832247025212149474404973170422295165602666360784347416812528617973764432916955654602356835327769633635513894485943553309743509322858937973710628023758816806471875016815994664897320150855163109437521642800230902661034555151514311149333258071668655344069451897282357234220538922127548822361859943829665459953651351620958628
Index: RSA_整理/整理中/N分解_分解有合数/exp.py
===================================================================
diff --git a/RSA_整理/整理中/N分解_分解有合数/exp.py b/RSA_整理/整理中/N分解_分解有合数/exp.py
deleted file mode 100644
--- a/RSA_整理/整理中/N分解_分解有合数/exp.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-
-
-#利用在线网站分解N，把分解结果中的非素数去掉。
-#重新计算N,计算私钥,求出明文
-
-e=65537
-c=76196483810925191371357319946893762223027002702624516192769497540954799651198719100683206759706879828894501526423422596543748404479640715319801018211652987852179907519286760601944889601355220646374788026632971331786307898234821477134265724962397355614076896148563340833323366935479885600112872998594315513803419069126624158092821269145991266528158747750965226483644012365861166608598063649804899693010576080857540523307078138634628539419178875838147396170651777949577793359622498517581948006585916952705460782942977789615065947303447566918741750017127110484065354974088489869377128636357092420660532261674969708694
-
-
-p=5
-q=29
-r3=31
-r4=197
-r5=12541
-r6=4811988280952344246576937
-r7=304081130082418831034791698146581643331044047712028910273173568327362370621651464924047927850720915897334538205155796477275515888954493777509372421863858817079340724222044305450451984754173948523380921443850440010226012354226083642718433164324022575599948330147718863789069
-r8=16249579302136675275737472669394168521026727339712083110552530420348131906271518040549529167354613121510156841352658645018277766962773342379074137176993546193979134201416444089373463960664685121485689105129185197998903479181913613273443541075619342246119648308939006396145123630152777688592984718084919469059
-
-phi=(r8-1)
-n=r8
-import libnum
-d=libnum.invmod(e,phi)
-c=pow(c,d,n)
-print(libnum.n2s(c))
\ No newline at end of file
Index: RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/exp.py
===================================================================
diff --git a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/exp.py b/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/exp.py
deleted file mode 100644
--- a/RSA_基础篇/P21-P40/P29 费马分解法(平方差遍历法)/2.yafu不能分解的情况/exp.py	
+++ /dev/null	
@@ -1,21 +0,0 @@
-import libnum
-import gmpy2
-
-c= 672211618947965669743140453815925311571913536792006320455451623329504768032653294195423386000169883889423130760702613901378226812991253672513808102582219125394975375184975680670477893616071731840578283372003364948041569480819988957797304000908767353945393438677325246806404776535366574244075168385686413998057429677446479345637389931707590541292174569539214514406772616679574446429577154994658300264395963743399028585579405127133850937684035755385536903177249615680095525438385801267848518932540742850864828339907387436386589615141301315094268048540705754105909152114279580297245086066527476038499949395262133426884691004953583259542925926790804058362169131721101062567084072161757158556850613589003126629288335943625835227353239228779420777075183829735033060565964497198340990191457681711972006273381600852029426480042505732976038791175365941723190939561137761147915067500934001302644947570092730510410631121938241136026914524548262047531029183007578603005500736114268512900086177419819102734670936080786880709408049475188517563383396936699006425388577265810859020768191320288121742321413664684223757832512232195144286087827718142083017087556701405737637649721698260338198824299502881114161665693663517201464044647997804424204974158
-n= 720239742676276892125180297266754203107040753393792061819109788620051632698640388878164710563582551395398417339060158866293057237682628696160289176629921331485290769277668335946098043360398735897380648863281934217401247716885835600015902679721336644611726200751169780657177537142181503044265719975692160293076414714427014863104317576606190229434103615882007838099640939570363751985038883738622768287033043747426059699658000045440922380571398371705698665874788485742224933932126886052739997477581453575568873105033061557099207861338425715849944147722082093066073450898210944979122392845654525731562948599513722685350626329020621203929679566003766926450933409172107168029480058053562850582746440505733686649603099598891890233020681944859657534362524449703843503708875743380789764830334189231182948902486001101574574542624002055351308194659501208428214278013747062791484983332159726081847473539435746845527406013789541657402799211822281010775911725885529125479685615597338584834382753602860489834851310346307067835494249861848527198787408591551265511901573927692939919503175252790601381174213220684859419625471536435635703766410175026305548524401754345447084444023478365533640647989603192253820896160603674343007718854266899300948742261
-
-e = 0x10001
-a=gmpy2.iroot(n,2)[0]
-while 1:
-    b2=pow(a,2)-n
-    if gmpy2.is_square(b2):
-        b=gmpy2.iroot(b2,2)[0]
-        q=a-b
-        p=a+b
-        break
-    a+=1
-print(n==p*q)
-phi=(p-1)*(q-1)
-d=libnum.invmod(e,phi)
-m=pow(c,d,n)
-print(libnum.n2s(int(m)))
diff --git a/RSA_整理/整理中/N分解_PQ过大/exp.py b/RSA_整理/整理中/N分解_PQ过大/exp.py
deleted file mode 100644
diff --git a/RSA_整理/整理中/解方程_(n + p) % (q-1)/exp2.py b/RSA_整理/整理中/解方程_(n + p) % (q-1)/exp2.py
deleted file mode 100644
