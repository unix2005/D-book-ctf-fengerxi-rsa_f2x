import gmpy2
import libnum
from Crypto.Util.number import sieve_base as primes

e = 0x10001
n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513
c = 2630801835673985389538224010996889417516673128370292700216526899877370833521633899705831415771714713108329655131333404250980622985334148846108700995520385425331382760827546059278560773909199259143108034266408196203055704278486407453338070101458531566321878313016237617609477301047815936243433178727930330271809873557460546980380187310998247325820744434233063319184904055355070888659334077075306432241088904813542502571598219660065074098707648654067409092318166428151519767974590783010768477724853227864534371626368601494108141791462272490631496024994510501130173124732460162088678296721733934039385361645007710512539198268998617834241722339221708527646547110273759471993234724248267032080106319186947131831351440799732635006518790415422955770635135505244602715997254673721345142297821105577816457878215642846662689402610305336043128164464551515547130182684475433880235284609529342171824981972820553853465221298483128364247207166949485182312355282738073779860982970622574437666708253402687448348248312749153347430655221003938625606211634578587066833151372579205330218827668255067266335393778105562186010162424221667163582431141279349596562887603634473173314275949534824897031365538140724145711874353231139469776328368185290856438728260527910

e = 0x10001

def Pollards_p_1(N):
    a = 2
    n = 2
    while True:
        a = pow(a, n, N)
        res = gmpy2.gcd(a - 1, N)
        if res != 1 and res != N:
            print('n =', n)
            print('p =', res)
            return res
        n += 1

def pollard(N):
    a = 2
    n = 2
    while True:
        a = pow(a, n, N)
        p = libnum.gcd(a-1, N)
        if p != 1 and p != N:
            return p
        n += 1


p=pollard(n)
print(p)
q=n//p
phi_n=(p-1)*(q-1)
d=gmpy2.invert(e,phi_n)
m=pow(c,d,n)
print(libnum.n2s(int(m)))