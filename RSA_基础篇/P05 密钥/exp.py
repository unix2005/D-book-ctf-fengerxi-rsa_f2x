from Crypto.PublicKey import RSA
import libnum
import gmpy2
from Crypto.Cipher import PKCS1_OAEP

with open("pubckey.pem", "rb") as f:
    key = RSA.import_key(f.read())
    print('n = %d' % key.n)
    print('e = %d' % key.e)

with open("flag.pem", "rb") as f:
    print(libnum.s2n(f.read()))
n = 21523292524073815362622260489918042504113333088744576381980642882372525978273506556757633530812032368667071163380952905753016283506444164389051499095279188254758007582046107417158690901899209172332086863137996195987683924503716179011566000882587348300062320712355920362367167225715369245797762775855955688566500745343595501743343772679142970107519869724595176648701889809863759958795105383869381213447252507302273533500591049101648477107053408126347759944586185535176801791429239838422798979594144691329643978867693195982215541072406200751131101667576527178913275210544035316802480030467247359819800435377726928330107
e = 65537
c = 20333569132895847605230372228334466272880498831462529054168644148192016703440180985759720609970874888676407524916296109293148918512561360013773881645076871633131767132747406260083085327236827780028306711773906911220973502126864208944278244845308208359817215376977191297044106661056244818112077405351270067127559793426238149259513729370883458954754758373405549454824079425265985804131048245492232719892281630762340119313792263706711128346324628755466137852975172464963980546065505557493130312594427500986374785418435275323928862428136563548410939889139826233420152842552286397709089663901923291611185419208001042632354
p = 146708188333418579375591195418079310067649251005167896899891175952628343358449129123181119547312284298151686615545444684800201688305262107534872675360517229163395249064430713834832854357091628896234579278682272747020344666442372144005699291572777483460204386694107587656670936133852975959748284269685917659571
q = 146708188333418579375591195418079310067649251005167896899891175952628343358449129123181119547312284298151686615545444684800201688305262107534872675360517229163395249064430713834832854357091628896234579278682272747020344666442372144005699291572777483460204386694107587656670936133852975959748284269685917659417
assert n == p * q
phi = (p - 1) * (q - 1)
d = gmpy2.invert(e, phi)

rsa_components = (int(n), e, int(d), p, q)
arsa = RSA.construct(rsa_components)
rsakey = RSA.importKey(arsa.exportKey())
rsakey = PKCS1_OAEP.new(rsakey)
with open("flag.pem", "rb") as f:
    c = f.read()
decrypted = rsakey.decrypt(c)
print(decrypted)
