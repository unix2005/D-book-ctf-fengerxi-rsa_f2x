

c=96079094819072863743808262717461546898317660946445410040791219221585852874917929505428513768912555344206373839166115690101218542404847432574945842912762371058575389777746693184974860098465481981016044055210448657035153542941957176936258989203783133391133985064863535430788782219595684945340332654649278805763559427007648422397923985299510234340839728751621681204883396245228309514682516020966041094775279737465827326624945297227211252153931640601252420416576496441969690530979880437426553523387060499845588083289041247926733648519271929067411524898233007905075235564442276299274089821307768950481305778492743504746955749658008955988705845701964431060420916178873419990554126643313380958546078785587657462504249386675779951436744081357401458708901707098504583396068656571924529254139544852627995828287588799405246544276945472568933818790297866455138349362393545351894144613951039246986304083687602519166068144322615916448912496063380450882848068104927743057734108295085678288232280112865846240838340907031145799608684212581095113443314951084088148931565469180941521080946507518041441405234217163365801497490665915373405833921655937943338826273301610325562050286566456031303028926764318160491645860472075799108770710240993701206734807
n=560843548195727991727322348759608304394820631733342221540549376369718205975310746918609326819284167555420178109939600672526441734426082280666794315650938736651737743442025263574231684013409241326374069041872855355082588122960676336159421393889020782006119991125771682068841006484910686408815547196238521900780715783698482113763729191571401341568729422896399168482711928119058470415420070422067817236335662204489311483039768480903942936028698799534542450331397268631689213139894212446416979203904293702185866115850719222304058915678209602277926925195101145010159683139988914734285856070636574014483781075229941852270792455553051569581158664102924049577922578842870241772277787181948382702200329276095439943203994514954141180101150132567724795140518385960753531023057998378893124471259174267378235249766121074473250094120729272084528068595804947039346772411487573280345621084317993256289479515176312776956432483481716238617964175999256511962050653781737041443331319808753162969018741230431777156786540642105110873062805041579603355810191823645314219530859012221282527768024070350513119102280802689864130051936228732120756604593155847526044798998970304702234914679975015807676738606493276263450715511736728080715340822746976203493435149
e=32
import libnum
import gmpy2
print(libnum.gcd(n-1,8))


import random
import math
import libnum
import time
from Crypto.Util.number import bytes_to_long,long_to_bytes
#设置模数
def GF(a):
    global p
    p = a
#乘法取模
def g(a,b):
    global p
    return pow(a,b,p)


def AMM(x,e,p):
    GF(p)
    y = random.randint(1, p-1)
    while g(y, (p-1)//e) == 1:
        y = random.randint(1, p-1)
        print(y)
    #p-1 = e^t*s
    t = 1
    s = 0
    while p % e == 0:
        t += 1
        print(t)
    s = p // (e**t)
    # s|ralpha-1
    k = 1
    while((s * k + 1) % e != 0):
        k += 1
    alpha = (s * k + 1) // e
    #计算a = y^s b = x^s h =1
    #h为e次非剩余部分的积
    a = g(y, (e ** (t - 1) ) * s)
    b = g(x, e * alpha - 1)
    c = g(y, s)
    h = 1
    #
    for i in range(1, t-1):
        d = g(b,e**(t-1-i))
        if d == 1:
            j = 0
        else:
            j = -math.log(d,a)
        b = b * (g(g(c, e), j))
        h = h * g(c, j)
        c = g(c, e)
    #return (g(x, alpha * h)) % p
    root = (g(x, alpha * h)) % p
    roots = set()
    for i in range(e):
        mp2 = root * g(a,i) %p
        #assert(g(mp2, e) == x)
        roots.add(mp2)
    return roots
def check(m):
    if 'flag' in m:
        return True
    else:
        return False
e = 4


mps = AMM(c,e,n)
# print(mps)
for mpp in mps:
        solution = str(long_to_bytes(mpp))
        if check(solution):
            print(solution)