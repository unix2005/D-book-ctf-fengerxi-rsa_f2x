

n = 1605247600724752598798254639224215706171506359654961357324428027985787942008103766562745464838961569081446916113769517713344420113584254259000172572811154232107339480903672251992191997458469905064423618888336088652352540882576826988355783159237971043770132628344798937353150930071309347972804118952814447576207066147031238749098842662046825743988208813903138796789940911515825517078554074496474819128789835309636804325132602557092847746454786387067599510769382078521691609970320528531270474091713477040343897269903489441410062592732302402854035415438078656688806905350495825334584533345448091335565792091890185673190424063
c = 751639057610677013264061431434189083017589908118307247217007533938435229431015858783222167911772848893015518607229280589985711010766459396989232072512314594917029375221335361209036112742388866873824163350886610514973038316512032459352053158417705406031466332440378871927174731975794579894912999936641163063898365134788537389162378185448090279397717831977803284480743612393591614284972981435749362255654561121758163485884075260156288337176713756471879489767416836868661153693157792733142765671887792303181376620864506386820826866340907593080654521498766421056474652652337037121881207188033108746890998208582406826010121861


from Crypto.Util.number import getPrime, isPrime, bytes_to_long
import gmpy2

def next_prime(num: int)-> int:
    num = num + 2 if num % 2 else num + 1
    while not isPrime(num):
        num += 2
    return num

p = 101153761350904589855517442780153065565706320528371620483449999154969520176744167146400595049699636245761285033244375269288101079333718038178669006191310264954391749137111824834747490866504812253896029419675504450422822815251105737023687460718883784050802575077766843413354227450593024635838544544448396028867
q = next_prime(getPrime(16) * p + 38219)
print(p)
print(q)
print(gmpy2.bit_length(p))
print(gmpy2.bit_length(q))
