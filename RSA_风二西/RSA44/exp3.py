

import random
import math
import libnum
import time
from Crypto.Util.number import bytes_to_long, long_to_bytes

# 设置模数
def GF(a):
    global p
    p = a


# 乘法取模
def g(a, b):
    global p
    return pow(a, b, p)


def AMM(x, e, p):
    GF(p)
    y = random.randint(1, p - 1)
    while g(y, (p - 1) // e) == 1:
        y = random.randint(1, p - 1)
        print(y)
    # p-1 = e^t*s
    t = 1
    s = 0
    while p % e == 0:
        t += 1
        print(t)
    s = p // (e ** t)
    # s|ralpha-1
    k = 1
    while ((s * k + 1) % e != 0):
        k += 1
    alpha = (s * k + 1) // e
    # 计算a = y^s b = x^s h =1
    # h为e次非剩余部分的积
    a = g(y, (e ** (t - 1)) * s)
    b = g(x, e * alpha - 1)
    c = g(y, s)
    h = 1
    #
    for i in range(1, t - 1):
        d = g(b, e ** (t - 1 - i))
        if d == 1:
            j = 0
        else:
            j = -math.log(d, a)
        b = b * (g(g(c, e), j))
        h = h * g(c, j)
        c = g(c, e)
    # return (g(x, alpha * h)) % p
    root = (g(x, alpha * h)) % p
    roots = set()
    for i in range(e):
        mp2 = root * g(a, i) % p
        # assert(g(mp2, e) == x)
        roots.add(mp2)
    return roots


def check(m):
    if 'flag' in m:
        print(m)
        return True
    else:
        return False

p=109215445077255515217229271382740540366103400758511319895838828487470935283264198624007618966931046066565939941560147814468754200083591930375693326599568670762534572611730492003415433707346836485337422179101494640606501875161843095874293491762117642823236326180941030334045049443843166917906582496540436708751
c= 88407786831257420405444350184044268754056513106038378173655644391839389563755400512109682329789429532927366796850680257959024836422740866929232671654548385731733236132882965265291398119071200073982941294758496943064258510514672058233198964074656012421546805002439856078621863517674697801173370271496806196248581368756423218610109272330853983507285590250843857258831600965926181178246162425278530305186009104524190018754798361779488723824106302742643048098873106948523523201532122840178405823665942685294973606711721155100636249983354630029957817225066405634633784920212003935371123965179998261981704806634668711708828400572083526351998730859850878964735957771600800502929372532585402680685935312023463331125513894536392251912996723518098284521412950290008995980624609551186737039228554343549097964068649906445641615107650960549641212309268781356138022505023033982776277506209249044400484264232016802585405426812927625965051
e=114


mps = AMM(c, e, p)
# print(mps)
for mpp in mps:
    solution = str(long_to_bytes(mpp))
    if check(solution):
        print(solution)